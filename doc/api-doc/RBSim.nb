(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[    660899,      13215]
NotebookOptionsPosition[    640836,      12623]
NotebookOutlinePosition[    649171,      12852]
CellTagsIndexPosition[    646885,      12795]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["RBSim` Documentation", "Chapter",
 CellChangeTimes->{{3.6333515346579514`*^9, 3.63335154627586*^9}, {
  3.633364320690548*^9, 3.63336432261762*^9}, {3.633369638229841*^9, 
  3.633369639626734*^9}, {3.6334392596239843`*^9, 3.633439260205854*^9}, {
  3.6976423907438707`*^9, 3.6976423983589783`*^9}}],

Cell[CellGroupData[{

Cell["Preamble", "Subsection",
 CellChangeTimes->{{3.633351558518317*^9, 3.633351560041299*^9}, {
  3.633781248319159*^9, 3.633781249429679*^9}, {3.635193764338916*^9, 
  3.635193767599886*^9}, {3.6357763910767603`*^9, 3.635776391166196*^9}, {
  3.63646826310387*^9, 3.6364682632018557`*^9}, {3.650023482305333*^9, 
  3.650023482405375*^9}, {3.6538391825136347`*^9, 3.653839182588071*^9}, {
  3.69755650546826*^9, 3.697556505610845*^9}, {3.700822522404282*^9, 
  3.7008225224981213`*^9}},
 CellTags->"Preamble::section"],

Cell[BoxData[{
 RowBox[{"Needs", "[", "\"\<RBSim`\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", "\"\<Visualization`\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.633351696261045*^9, 3.633351701530016*^9}, {
  3.633369630403097*^9, 3.633369649792616*^9}, {3.633371974503627*^9, 
  3.633371979509849*^9}, {3.633439263683157*^9, 3.6334392647382183`*^9}, {
  3.63448171195175*^9, 3.634481712372257*^9}, {3.697641680635879*^9, 
  3.697641681936212*^9}, {3.697641725681835*^9, 3.697641729048428*^9}, {
  3.7005726662196407`*^9, 3.700572675447852*^9}, {3.7088677930645847`*^9, 
  3.70886779316396*^9}}],

Cell["\<\
The following packages are needed to run some code found in this \
documentation notebook.\
\>", "Text",
 CellChangeTimes->{{3.633781139005548*^9, 3.6337811426309013`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Source Code", "Subsection",
 CellChangeTimes->{{3.6351824420646763`*^9, 3.635182446927919*^9}, {
   3.63636683985861*^9, 3.6363668399870663`*^9}, {3.6367256846865187`*^9, 
   3.636725684771607*^9}, {3.636736338251857*^9, 3.6367363383696423`*^9}, {
   3.681470243460311*^9, 3.6814702436683683`*^9}, 3.700573468075815*^9}],

Cell[BoxData[
 ButtonBox["\<\"Open Source Code\"\>",
  Appearance->Automatic,
  ButtonFunction:>(Needs["QUDevTools`"]; NotebookOpen[
     FileNameJoin[{QUDevTools`$QUSourcePath, 
       StringJoin[
        FileBaseName[
         NotebookFileName[]], ".m"]}]]),
  Evaluator->Automatic,
  Method->"Preemptive"]], "Output",
 CellChangeTimes->{{3.635182609676621*^9, 3.6351826444407997`*^9}, {
  3.635182842680962*^9, 3.63518284820653*^9}, {3.635182903083259*^9, 
  3.635182906619155*^9}, {3.635182952870352*^9, 3.635182956778173*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Introduction and Overview", "Section",
 CellChangeTimes->{{3.633351563673402*^9, 3.633351567143589*^9}, {
   3.681470238916027*^9, 3.6814702390920763`*^9}, 3.697408498365951*^9}],

Cell["\<\
This package provides generic tools for simulating Randomized Benchmarking \
(RB) and related protocols. Though RB is in the title of this package, it \
should be general enough to simulate any kind of protocol which relies on a \
gate set whose gates are specified by pulses.
The main advantage of this library is that it allows a wide class of error \
models. In particular, all of the following error models can be incorporated \
simultaneously:
    \[Bullet] Discrete error channels following any pulse, which may be gate \
dependent, independent, or depend on exactly which pulses preceded the \
present pulse.
    \[Bullet] Hardware distortions (for example, from a transfer function) \
applied to the entire concatenated pulse train of a given pulse sequence.
    \[Bullet] Coupling to an external quantum system.
    \[Bullet] Additive stochastic Hamiltonian noise, including on the bath.
    \[Bullet] Static parameter noise; noise chosen randomly at the beginning \
of each pulse sequence, but fixed for the duration of the sequence.\
\>", "Text",
 CellChangeTimes->{{3.63336976465697*^9, 3.6333698346703863`*^9}, {
  3.633369866272846*^9, 3.633369887648974*^9}, {3.633369949703978*^9, 
  3.633369955653768*^9}, {3.633370004311841*^9, 3.633370006392604*^9}, {
  3.633370062385489*^9, 3.633370284437573*^9}, {3.633370463585658*^9, 
  3.6333704707289658`*^9}, {3.6344817728884087`*^9, 3.634481861576255*^9}, {
  3.634481891879867*^9, 3.634482015550557*^9}, {3.634482047838583*^9, 
  3.634482122061866*^9}, {3.634482155710588*^9, 3.634482272094702*^9}, {
  3.634482321437049*^9, 3.634482375741543*^9}, {3.634482414132523*^9, 
  3.63448243106884*^9}, {3.634483941546707*^9, 3.6344839442660923`*^9}, {
  3.634484931716042*^9, 3.634484935728187*^9}, {3.6345010492991533`*^9, 
  3.6345010631069813`*^9}, {3.697641830693304*^9, 3.697642296200235*^9}}],

Cell["References", "Subsubsection",
 CellChangeTimes->{{3.634498044285822*^9, 3.6344980452557173`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Gate Sets", "Section",
 CellChangeTimes->{{3.634499315580278*^9, 3.6344993201551857`*^9}, 
   3.6361984185927258`*^9, {3.697642333880053*^9, 3.697642335331832*^9}, {
   3.700575473184161*^9, 3.700575473263701*^9}}],

Cell[TextData[{
 StyleBox["GateSet", "Input"],
 " is a ",
 StyleBox["Head", "Input"],
 " used to store all relevant information about a particular set of quantum \
gates,  their structure, and their Hamiltonian implementation.  Such objects \
have the format ",
 StyleBox["gateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["=GateSet[", "Input"],
 StyleBox["key1\[Rule]value1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["...", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 ". \n\n",
 StyleBox["Retrieving Values",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\nValues of keys can be retrieved by calling the key: ",
 StyleBox["Dimension[", "Input"],
 StyleBox["gateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 "\n\n",
 StyleBox["Notes",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n\[Bullet]",
 StyleBox[" ", "Input"],
 "A gate set is formatted as ",
 StyleBox["GateSet[", "Input"],
 StyleBox["\[OpenCurlyDoubleQuote]name\[CloseCurlyDoubleQuote]", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " when printed -- do not let this fool you about the contents. Use ",
 StyleBox["FullForm[", "Input"],
 StyleBox["gateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " or ",
 StyleBox["List@@", "Input"],
 StyleBox["gateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " to see all of the explicit contents.\n\n",
 StyleBox["Possible Keys\n",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox["GateSetName\nSize\nDimension\nGateProduct\nGateInverse\n\
GateUnitary\nGatePulse", "Input"]
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.6344996477785463`*^9, 3.634499648332594*^9}, {
  3.6345002099990873`*^9, 3.634500628404138*^9}, {3.6345007418132677`*^9, 
  3.634500914003952*^9}, {3.63450112157022*^9, 3.634501123890213*^9}, {
  3.634501193768155*^9, 3.634501201142671*^9}, {3.634501989868088*^9, 
  3.6345020089884663`*^9}, {3.635772721205873*^9, 3.635772740285365*^9}, {
  3.700565785736985*^9, 3.700566063894699*^9}, {3.7005660992536917`*^9, 
  3.700566103725062*^9}, {3.700566142548973*^9, 3.700566225811758*^9}, {
  3.7005662806132593`*^9, 3.7005663629158163`*^9}, {3.700567921422406*^9, 
  3.700567930643736*^9}},
 CellTags->"GateSet::usage"],

Cell[TextData[{
 StyleBox["GateNoiseGateSet", "Input"],
 " is a ",
 StyleBox["Head", "Input"],
 " used to store all relevant information about a particular set of quantum \
gates and their structure, along with a ",
 StyleBox["GateNoise", "Input"],
 " error model.  Such objects have the format ",
 StyleBox["gateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["=GateNoiseGateSet[", "Input"],
 StyleBox["key1\[Rule]value1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["...", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 ". \nThis object is a combination of ",
 StyleBox["GateSet", "Input"],
 " and ",
 StyleBox["NoiseModel", "Input"],
 " where the only noise is ",
 StyleBox["GateNoise", "Input"],
 ", that is, all noise happens as a discrete CPTP map. There is no \
implementation of the gate as a pulse; it is assumed that all noise is in the \
",
 StyleBox["GateNoise", "Input"],
 ". \n\n",
 StyleBox["Retrieving Values",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\nValues of keys can be retrieved by calling the key: ",
 StyleBox["Dimension[", "Input"],
 StyleBox["gateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 "\n\n",
 StyleBox["Notes",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n\[Bullet]",
 StyleBox[" ", "Input"],
 "A gate set is formatted as ",
 StyleBox["GateNoiseGateSet[", "Input"],
 StyleBox["\[OpenCurlyDoubleQuote]name\[CloseCurlyDoubleQuote]", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " when printed -- do not let this fool you about the contents. Use ",
 StyleBox["FullForm[", "Input"],
 StyleBox["gateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " or ",
 StyleBox["List@@", "Input"],
 StyleBox["gateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " to see all of the explicit contents.\n\[Bullet]  This object can be \
created manually, or compiled from a ",
 StyleBox["GateSet", "Input"],
 " and ",
 StyleBox["NoiseModel", "Input"],
 " with ",
 StyleBox["CompileGateSet", "Input"],
 ".\n\n",
 StyleBox["Possible Keys\n",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox["GateSetName\nSize\nDimension\nGateProduct\nGateInverse\n\
GateUnitary\nGateNoise\nGateChannel", "Input"]
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.7006607329057713`*^9, 3.70066075391953*^9}, {
  3.7006608359535503`*^9, 3.700660838897089*^9}, {3.700660967067718*^9, 
  3.700661274060649*^9}, {3.700911201524584*^9, 3.70091122734844*^9}},
 CellTags->"GateNoiseGateSet::usage"],

Cell[CellGroupData[{

Cell["GateSet Keys", "Subsection",
 CellChangeTimes->{{3.634500206854645*^9, 3.6345002075994864`*^9}, {
  3.6345009230830584`*^9, 3.634500924531307*^9}, {3.636198915107503*^9, 
  3.636198917211508*^9}, {3.700566253007392*^9, 3.700566256430564*^9}}],

Cell[TextData[{
 StyleBox["GateSetName", "Input"],
 " is a ",
 StyleBox["GateSet", "Input"],
 " key storing a string with a human-readable gate set name."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700567164547894*^9, 3.700567191402363*^9}, {
  3.700567963229566*^9, 3.700567978819016*^9}},
 CellTags->"GateSetName::usage"],

Cell[TextData[{
 StyleBox["Size", "Input"],
 " is a ",
 StyleBox["GateSet", "Input"],
 " key storing the number of gates in the gate set."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700567164547894*^9, 3.700567191402363*^9}},
 CellTags->"Size::usage"],

Cell[TextData[{
 StyleBox["Dimension", "Input"],
 " is a ",
 StyleBox["GateSet", "Input"],
 " key storing the Hilbert space dimension the gates in the gate set act on."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700567164547894*^9, 3.700567221216147*^9}},
 CellTags->"Dimension::usage"],

Cell[TextData[{
 StyleBox["GateProduct", "Input"],
 " is an optional ",
 StyleBox["GateSet", "Input"],
 " key storing a function ",
 StyleBox["f[i,j]", "Input"],
 " that takes two gate indices and returns the index of the product gate. \
Gate ",
 StyleBox["i", "Input"],
 " happens before gate ",
 StyleBox["j", "Input"],
 ", so the product is ",
 StyleBox["gate[j].gate[i]", "Input"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700567164547894*^9, 3.700567191402363*^9}, {
  3.7005672443952093`*^9, 3.700567283150799*^9}, {3.700567403541587*^9, 
  3.700567438564158*^9}, {3.700567480464538*^9, 3.700567492766582*^9}},
 CellTags->"GateProduct::usage"],

Cell[TextData[{
 StyleBox["GateInverse", "Input"],
 " is an optional ",
 StyleBox["GateSet", "Input"],
 " key storing a function ",
 StyleBox["f[i]", "Input"],
 " that takes a gate index and returns the index of the inverse gate."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700567164547894*^9, 3.700567191402363*^9}, {
  3.700567449727736*^9, 3.700567475276484*^9}},
 CellTags->"GateInverse::usage"],

Cell[TextData[{
 StyleBox["GateUnitary", "Input"],
 " is a ",
 StyleBox["GateSet", "Input"],
 " key storing a function ",
 StyleBox["f[i]", "Input"],
 " that returns the matrix representation of the gate with index ",
 StyleBox["i", "Input"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700567164547894*^9, 3.700567191402363*^9}, {
  3.700567529537837*^9, 3.700567562099168*^9}},
 CellTags->"GateUnitary::usage"],

Cell[TextData[{
 StyleBox["GatePulse", "Input"],
 " is a ",
 StyleBox["GateSet", "Input"],
 " key storing a function ",
 StyleBox["f[i]", "Input"],
 " that returns the pulse (in a format accepted by ",
 StyleBox["QSim`", "Input"],
 StyleBox["PulseSim", "Input"],
 ") of the gate with index ",
 StyleBox["i", "Input"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700567164547894*^9, 3.700567191402363*^9}, {
  3.700567574913677*^9, 3.7005676480738792`*^9}},
 CellTags->"GatePulse::usage"],

Cell[TextData[{
 ButtonBox["GateNoise",
  BaseStyle->"Hyperlink",
  ButtonData->"GateNoise::usage"],
 " (for ",
 StyleBox["GateNoiseGateSet", "Input"],
 " only). This represents the (left-hand) error channel of the pulse, given \
that it was "
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700660860092545*^9, 3.700660898869829*^9}, {
  3.7009113357881393`*^9, 3.700911413688196*^9}}],

Cell[TextData[{
 StyleBox["GateChannel", "Input"],
 " is a ",
 StyleBox["GateNoiseGateSet", "Input"],
 " key storing a function  ",
 StyleBox["f[", "Input"],
 StyleBox["i1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["i2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["...", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["in", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " that returns an object satisfying ",
 StyleBox["ChannelPulseQ", "Input"],
 " given the gate index history ",
 StyleBox["i1,i2,...,in", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " where ",
 StyleBox["in", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " is the most recent. This channel is the composition of the ideal gate ",
 StyleBox["GateUnitary", "Input"],
 " with index ",
 StyleBox["in", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " followed by the ",
 StyleBox["GateNoise", "Input"],
 " error, where the ",
 StyleBox["GateNoise", "Input"],
 " is allowed to depend on the indices",
 StyleBox[" i1,i2,...,i(n-1)", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " that preceded the current gate."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700911257413364*^9, 3.70091133384307*^9}, {
  3.700911430454821*^9, 3.700911520861352*^9}, {3.700911551814693*^9, 
  3.7009115536682053`*^9}},
 CellTags->"GateChannel::usage"]
}, Closed]],

Cell[CellGroupData[{

Cell["Built-In GateSets", "Subsection",
 CellChangeTimes->{{3.700569447270977*^9, 3.700569454849353*^9}}],

Cell[TextData[{
 StyleBox["$gaussianQubitGateSet", "Input"],
 " is a 12-element unitary 2-design for qubits implemented with gaussian \
pulses applied on the x-y plane for all gates."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.7005694632899427`*^9, 3.7005695090231037`*^9}},
 CellTags->"$gaussianQubitGateSet::usage"],

Cell[CellGroupData[{

Cell["Example: Qubit 2-design group with Gaussian pulses", "Subsubsection",
 CellChangeTimes->{{3.700572322834285*^9, 3.700572349168743*^9}, {
  3.700572563176702*^9, 3.700572566848925*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Size", "[", "$gaussianQubitGateSet", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Dimension", "[", "$gaussianQubitGateSet", "]"}]}], "Input",
 CellChangeTimes->{{3.700572548638916*^9, 3.700572578926653*^9}, {
  3.7005728171903143`*^9, 3.700572820411291*^9}}],

Cell[BoxData["12"], "Output",
 CellChangeTimes->{3.7005725792554417`*^9, 3.700572821933507*^9, 
  3.700584227572151*^9}],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.7005725792554417`*^9, 3.700572821933507*^9, 
  3.700584227572795*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GateUnitary", "[", "$gaussianQubitGateSet", "]"}], "/@", 
   RowBox[{"Range", "[", "12", "]"}]}], "//", "MatrixListForm"}]], "Input",
 CellChangeTimes->{{3.700572352902117*^9, 3.700572354445794*^9}, {
  3.700572521985291*^9, 3.700572545814206*^9}, {3.700572584682691*^9, 
  3.700572587741639*^9}, {3.700572823914722*^9, 3.700572824404991*^9}}],

Cell[BoxData[
 TemplateBox[{TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{"1", "0"}, {"0", "1"}}, RowSpacings -> 1, ColumnSpacings -> 1,
        RowAlignments -> Baseline, ColumnAlignments -> Center], "\[NoBreak]", 
      ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           RowBox[{"-", 
             FractionBox["1", "2"]}], "+", 
           FractionBox["\[ImaginaryI]", "2"]}]}, {
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}]}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
         RowBox[{"-", "\[ImaginaryI]"}], "0"}, {"0", "\[ImaginaryI]"}}, 
       RowSpacings -> 1, ColumnSpacings -> 1, RowAlignments -> Baseline, 
       ColumnAlignments -> Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}]}, {
         RowBox[{
           RowBox[{"-", 
             FractionBox["1", "2"]}], "-", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}]}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           RowBox[{"-", 
             FractionBox["1", "2"]}], "-", 
           FractionBox["\[ImaginaryI]", "2"]}]}, {
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}]}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}]}, {
         RowBox[{
           RowBox[{"-", 
             FractionBox["1", "2"]}], "+", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}]}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           RowBox[{"-", 
             FractionBox["1", "2"]}], "-", 
           FractionBox["\[ImaginaryI]", "2"]}]}, {
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}]}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           RowBox[{"-", 
             FractionBox["1", "2"]}], "+", 
           FractionBox["\[ImaginaryI]", "2"]}]}, {
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}]}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}]}, {
         RowBox[{
           RowBox[{"-", 
             FractionBox["1", "2"]}], "+", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}]}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}]}, {
         RowBox[{
           RowBox[{"-", 
             FractionBox["1", "2"]}], "-", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}]}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{"0", 
         RowBox[{"-", "1"}]}, {"1", "0"}}, RowSpacings -> 1, ColumnSpacings -> 
       1, RowAlignments -> Baseline, ColumnAlignments -> Center], 
      "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{"0", "\[ImaginaryI]"}, {"\[ImaginaryI]", "0"}}, RowSpacings -> 
       1, ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]},
  "RowDefault"]], "Output",
 CellChangeTimes->{{3.700572533011829*^9, 3.700572546201993*^9}, {
   3.7005725834782677`*^9, 3.7005725894850807`*^9}, 3.7005728249184437`*^9, 
   3.700584227593356*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Row", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"PulsePlot", "[", 
     RowBox[{
      RowBox[{"ToPulse", "@", 
       RowBox[{"First", "@", 
        RowBox[{
         RowBox[{"GatePulse", "[", "$gaussianQubitGateSet", "]"}], "[", "#", 
         "]"}]}]}], ",", 
      RowBox[{"ImageSize", "\[Rule]", "100"}], ",", 
      RowBox[{"PlotTheme", "->", "\"\<Detailed\>\""}], ",", 
      RowBox[{"PlotLabel", "\[Rule]", 
       RowBox[{"DistributeOption", "[", 
        RowBox[{
         RowBox[{"\"\<X\>\"", "<>", 
          RowBox[{"ToString", "[", "#", "]"}]}], ",", 
         RowBox[{"\"\<Y\>\"", "<>", 
          RowBox[{"ToString", "[", "#", "]"}]}]}], "]"}]}]}], "]"}], "&"}], "/@", 
   RowBox[{"Range", "[", "12", "]"}]}], "\[IndentingNewLine]", "]"}]], "Input",\

 CellChangeTimes->{
  3.700572598701413*^9, {3.700572834569859*^9, 3.700573008059746*^9}, {
   3.700573045664934*^9, 3.700573100996338*^9}}],

Cell[BoxData[
 TemplateBox[{TemplateBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gpO/x5OHSbt9Gk7+H7B7Z+Dk22w5UbZv/iyc/Bqwf+bg5O+Ra30duGMeTv4/
sH8X4OTPO6KwoShjIU6+HTg8FuHk3/sJ8tBinPw6cHgtwcmX07+rwta4FCd/
Hzg8l+Hkx6VYA120HCf/Hzi8V+Dkz5sJAitx8u3A8bEKJ//eue/Bj5euxsmv
A8fXGpx8OZYwPt1Na3Hy94Hjcx1OPgCRYvMH
        "], {{{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-1., 1.}}, PlotRangeClipping -> 
       True, ImagePadding -> All, DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"X1\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-1., 1.}}, PlotRangeClipping -> 
       True, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gpO/x5OHSbt9Gk7+H7B7Z+Dk22w5UbZv/iyc/Bqwf+bg5O+Ra30duGMeTv4/
sH8X4OTPO6KwoShjIU6+HTg8FuHk3/sJ8tBinPw6cHgtwcmX07+rwta4FCd/
Hzg8l+Hkx6VYA120HCf/Hzi8V+Dkz5sJAitx8u3A8bEKJ//eue/Bj5euxsmv
A8fXGpx8OZYwPt1Na3Hy94Hjcx1OPgCRYvMH
        "], {{{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-1., 1.}}, PlotRangeClipping -> 
       True, ImagePadding -> All, DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"Y1\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-1., 1.}}, PlotRangeClipping -> 
       True, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}, "RowDefault"],TemplateBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gpO/x5OHSbt9Gk7+H7B7Z+Dk22w5UbZv/iyc/Bqwf+bg5O+Ra30duGMeTv4/
sH8X4OTPO6KwoShjIU6+HTg8FuHk3/sJ8tBinPw6cHgtweDPfHRz0ZmZ/fvl
9O+qsDUuxeA/9P7Gb2n5bf8+cHguw+A/s/3EaB2tdSAuxRroouUY/I0R9WkB
pYYH/oHDewVO/ryZILASJ98OHB+rcPLvnfse/Hjpapz8OnB8rcHJl2MJ49Pd
tBaDf9r4junT1WIH9oHjcx0GHxaeAE4GQt4=
        "], {{{
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{61, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 
              52, 53, 54, 55, 56, 57, 58, 59, 60}}]}]}, {}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-18.50575354619586, 
         18.50575354619586}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"X2\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-18.50575354619586, 
         18.50575354619586}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gsGf+ejmojMz++33ePIwabdPw+A/9P7Gb2n5zf4P2L0zMPjPbD8xWkdrOdhs
OVG2b/4sDP7GiPq0gFJDhxqwf+bg5O+Ra30duGMeTv4/sH8X4OTPO6KwoShj
IU6+HTg8FuHk3/sJ8tBiDP5p4zumT1eLOdSBw2sJBh8WnnL6d1XYGpfi5O8D
h+cynPy4FGugi5bj5P8Dh/cKnPx5M0FgJU6+HTg+VuHk3zv3Pfjx0tU4+XXg
+FqDky/HEsanu2ktTv4+cHyuw8kHAPK2ON4=
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{20, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 
              29, 28, 27, 26, 25, 24, 23, 22, 21}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-18.50575354619586, 
         18.50575354619586}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"Y2\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-18.50575354619586, 
         18.50575354619586}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}, "RowDefault"],TemplateBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gpO/x5OHSbt9Gk7+H7B7Z+Dk22w5UbZv/iyc/Bqwf+bg5O+Ra30duGMeTv4/
sH8X4OTPO6KwoShjIU6+HTg8FuHk3/sJ8tBinPw6cHgtweDPfHRz0ZmZ8+3l
9O+qsDUuxeA/9P7Gb2nJ5rAPHJ7LMPjPbD8xWkdbOcSlWANdtByDvzGiPi2g
1NHhHzi8V+Dkz5sJAitx8u3A8bEKJ//eue/Bj5euxsmvA8fXGpx8OZYwPt1N
azH4p43vmD5dreawDxyf6zD4sPAEAFZAOCA=
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{40, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 
              49, 48, 47, 46, 45, 44, 43, 42, 41}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"X3\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gsGf+ejmojMz59vv8eRh0m6fhsF/6P2N39KSzeEP2L0zMPjPbD8xWkdbOdhs
OVG2b/4sDP7GiPq0gFJHhxqwf+bg5O+Ra30duGMeTv4/sH8X4OTPO6KwoShj
IU6+HTg8FuHk3/sJ8tBiDP5p4zumT1erOdSBw2sJBh8WnnL6d1XYGpfi5O8D
h+cynPy4FGugi5bj5P8Dh/cKnPx5M0FgJU6+HTg+VuHk3zv3Pfjx0tU4+XXg
+FqDky/HEsanu2ktTv4+cHyuw8kHAKfKOCA=
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{20, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 
              29, 28, 27, 26, 25, 24, 23, 22, 21}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"Y3\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}, "RowDefault"],TemplateBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwA2IQ/Wflx0u+SQn2Mx/dXHRmZv9+BiiA8WHyD72/8Vta
foPyCzD4z2w/MVpHax34VZe1p2RyBQZ/Y0R9WkCp4QGI+gac/GqRde4Pq1pw
8iHmdeDkV75UM+RY04OTD7FvAk6+zX3/3ul5kzD4p43vmD5dLXagBuyeKRh8
WLjt8eRh0m6fhpP/B+zeGTj5NltOlO2bPwsnvwbsnzk4+XvkWl8H7piHk/8P
7N8FOPnzjihsKMpYiJNvBw6PRTj5936CPLQYJ78OHF5LMPiQ9DbfXk7/rgpb
41IMPiS9sTnsA4fnMgw+JL1ZOcSlWANdtByDD4lPR4d/4PBegZM/byYIrMTJ
twPHxyqc/Hvnvgc/XroaJ78OHF9rcPLlWML4dDetxeBD0puawz5wfK7D4DPg
AAAVfIfp
        "], {{{
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{21, 62, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
              14, 15, 16, 17, 18, 19, 20}}]}]}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{40, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 
              49, 48, 47, 46, 45, 44, 43, 42, 41}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"X4\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gsGf+ejmojMz++33ePIwabdPw+A/9P7Gb2n5zf4P2L0zMPjPbD8xWkdrOdhs
OVG2b/4sDP7GiPq0gFJDhxqwf+bg5O+Ra30duGMeTv4/sH8X4OTPO6KwoShj
IU6+HTg8FuHk3/sJ8tBiDP5p4zumT1eLOdSBw2sJBh8WnnL6d1XYGpfi5O8D
h+cynPy4FGugi5bj5P8Dh/cKnPx5M0FgJU6+HTg+VuHk3zv3Pfjx0tU4+XXg
+FqDky/HEsanu2ktTv4+cHyuw8kHAPK2ON4=
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{20, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 
              29, 28, 27, 26, 25, 24, 23, 22, 21}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"Y4\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}, "RowDefault"],TemplateBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gpO/x5OHSbt9Gk7+H7B7Z+Dk22w5UbZv/iyc/Bqwf+bg5O+Ra30duGMeTv4/
sH8X4OTPO6KwoShjIU6+HTg8FuHk3/sJ8tBinPw6cHgtweDPfHRz0ZmZ/fZy
+ndV2BqXYvAfen/jt7T8Zr8PHJ7LMPjPbD8xWkdrOcSlWANdtByDvzGiPi2g
1NDhHzi8V+Dkz5sJAitx8u3A8bEKJ//eue/Bj5euxsmvA8fXGpx8OZYwPt1N
azH4p43vmD5dLeawDxyf6zD4sPAEALOdON4=
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{40, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 
              49, 48, 47, 46, 45, 44, 43, 42, 41}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-18.50575354619586, 
         18.50575354619586}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"X5\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-18.50575354619586, 
         18.50575354619586}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gsGf+ejmojMz++33ePIwabdPw+A/9P7Gb2n5zf4P2L0zMPjPbD8xWkdrOdhs
OVG2b/4sDP7GiPq0gFJDhxqwf+bg5O+Ra30duGMeTv4/sH8X4OTPO6KwoShj
IU6+HTg8FuHk3/sJ8tBiDP5p4zumT1eLOdSBw2sJBh8WnnL6d1XYGpfi5O8D
h+cynPy4FGugi5bj5P8Dh/cKnPx5M0FgJU6+HTg+VuHk3zv3Pfjx0tU4+XXg
+FqDky/HEsanu2ktTv4+cHyuw8kHAPK2ON4=
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{20, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 
              29, 28, 27, 26, 25, 24, 23, 22, 21}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-18.50575354619586, 
         18.50575354619586}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"Y5\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-18.50575354619586, 
         18.50575354619586}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}, "RowDefault"],TemplateBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwA2IQ/Wflx0u+SQn2Mx/dXHRm5nx7BiiA8WHyD72/8Vta
sjlA+AUY/Ge2nxito60cftVl7SmZXIHB3xhRnxZQ6ghV34CTXy2yzv1hVQtO
PsS8Dpz8ypdqhhxrenDyIfZNwMm3ue/fOz1vEgb/tPEd06er1RxqwO6ZgsGH
hdseTx4m7fZpOPl/wO6dgZNvs+VE2b75s3Dya8D+mYOTv0eu9XXgjnk4+f/A
/l2Akz/viMKGooyFOPl24PBYhJN/7yfIQ4tx8uvA4bUEgw9Jb/32cvp3Vdga
l2LwIentm/0+cHguw+BD0puWQ1yKNdBFyzH4kPg0dPgHDu8VOPnzZoLASpx8
O3B8rMLJv3fue/Djpatx8uvA8bUGJ1+OJYxPd9NaDD4kvYk57APH5zoMPgMO
AAD+b33p
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{2, 62, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 
              10, 9, 8, 7, 6, 5, 4, 3, 1}, {40, 61, 60, 59, 58, 57, 56, 55, 
              54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 
              41}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"X6\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gsGf+ejmojMz++33ePIwabdPw+A/9P7Gb2n5zf4P2L0zMPjPbD8xWkdrOdhs
OVG2b/4sDP7GiPq0gFJDhxqwf+bg5O+Ra30duGMeTv4/sH8X4OTPO6KwoShj
IU6+HTg8FuHk3/sJ8tBiDP5p4zumT1eLOdSBw2sJBh8WnnL6d1XYGpfi5O8D
h+cynPy4FGugi5bj5P8Dh/cKnPx5M0FgJU6+HTg+VuHk3zv3Pfjx0tU4+XXg
+FqDky/HEsanu2ktTv4+cHyuw8kHAPK2ON4=
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{20, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 
              29, 28, 27, 26, 25, 24, 23, 22, 21}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"Y6\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}, "RowDefault"],TemplateBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwA2IQ/Wflx0u+SQn2Mx/dXHRmZr89AxTA+DD5h97f+C0t
v0H5BRj8Z7afGK2jtRx+1WXtKZlcgcHfGFGfFlBq6ABR34CTXy2yzv1hVQtO
PsS8Dpz8ypdqhhxrenDyIfZNwMm3ue/fOz1vEgb/tPEd06erxRxqwO6ZgsGH
hdseTx4m7fZpOPl/wO6dgZNvs+VE2b75s3Dya8D+mYOTv0eu9XXgjnk4+f/A
/l2Akz/viMKGooyFOPl24PBYhJN/7yfIQ4tx8uvA4bUEJ19O/64KW+NSnPx9
4PBchpMfl2INdNFynPx/4PBegZM/byYIrMTJtwPHxyqc/Hvnvgc/XroaJ78O
HF9rcPLlWML4dDetxcnfB47PdTj56AAAw9M43w==
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{2, 62, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 
              10, 9, 8, 7, 6, 5, 4, 3, 1}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-18.50575354619586, 
         18.50575354619586}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"X7\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-18.50575354619586, 
         18.50575354619586}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gsGf+ejmojMz++33ePIwabdPw+A/9P7Gb2n5zf4P2L0zMPjPbD8xWkdrOdhs
OVG2b/4sDP7GiPq0gFJDhxqwf+bg5O+Ra30duGMeTv4/sH8X4OTPO6KwoShj
IU6+HTg8FuHk3/sJ8tBiDP5p4zumT1eLOdSBw2sJBh8WnnL6d1XYGpfi5O8D
h+cynPy4FGugi5bj5P8Dh/cKnPx5M0FgJU6+HTg+VuHk3zv3Pfjx0tU4+XXg
+FqDky/HEsanu2ktTv4+cHyuw8kHAPK2ON4=
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{20, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 
              29, 28, 27, 26, 25, 24, 23, 22, 21}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-18.50575354619586, 
         18.50575354619586}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"Y7\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-18.50575354619586, 
         18.50575354619586}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}, "RowDefault"],TemplateBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwA2IQ/Wflx0u+SQn2Mx/dXHRmZv9+BiiA8WHyD72/8Vta
foPyCzD4z2w/MVpHax34VZe1p2RyBQZ/Y0R9WkCp4QGI+gac/GqRde4Pq1pw
8iHmdeDkV75UM+RY04OTD7FvAk6+zX3/3ul5kzD4p43vmD5dLXagBuyeKRh8
WLjt8eRh0m6fhpP/B+zeGTj5NltOlO2bPwsnvwbsnzk4+XvkWl8H7piHk/8P
7N8FOPnzjihsKMpYiJNvBw6PRTj5936CPLQYJ78OHF5LcPLl9O+qsDUuxcnf
Bw7PZTj5cSnWQBctx8n/Bw7vFTj582aCwEqcfDtwfKzCyb937nvw46WrcfLr
wPG1BidfjiWMT3fTWpz8feD4XIeTjw4A/7NC3w==
        "], {{{
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{21, 62, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
              14, 15, 16, 17, 18, 19, 20}}]}]}, {}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-18.50575354619586, 
         18.50575354619586}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"X8\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-18.50575354619586, 
         18.50575354619586}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gsGf+ejmojMz++33ePIwabdPw+A/9P7Gb2n5zf4P2L0zMPjPbD8xWkdrOdhs
OVG2b/4sDP7GiPq0gFJDhxqwf+bg5O+Ra30duGMeTv4/sH8X4OTPO6KwoShj
IU6+HTg8FuHk3/sJ8tBiDP5p4zumT1eLOdSBw2sJBh8WnnL6d1XYGpfi5O8D
h+cynPy4FGugi5bj5P8Dh/cKnPx5M0FgJU6+HTg+VuHk3zv3Pfjx0tU4+XXg
+FqDky/HEsanu2ktTv4+cHyuw8kHAPK2ON4=
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{20, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 
              29, 28, 27, 26, 25, 24, 23, 22, 21}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-18.50575354619586, 
         18.50575354619586}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"Y8\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-18.50575354619586, 
         18.50575354619586}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}, "RowDefault"],TemplateBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwA2IQ/Wflx0u+SQn2Mx/dXHRmZr89AxTA+DD5h97f+C0t
v0H5BRj8Z7afGK2jtRx+1WXtKZlcgcHfGFGfFlBq6ABR34CTXy2yzv1hVQtO
PsS8Dpz8ypdqhhxrenDyIfZNwMm3ue/fOz1vEgb/tPEd06erxRxqwO6ZgsGH
hdseTx4m7fZpOPl/wO6dgZNvs+VE2b75s3Dya8D+mYOTv0eu9XXgjnk4+f/A
/l2Akz/viMKGooyFOPl24PBYhJN/7yfIQ4tx8uvA4bUEgw9Jb/Pt5fTvqrA1
LsXgQ9Ibm8M+cHguw+BD0puVQ1yKNdBFyzH4kPh0dPgHDu8VOPnzZoLASpx8
O3B8rMLJv3fue/Djpatx8uvA8bUGJ1+OJYxPd9NaDD4kvak57APH5zoMPgMO
AADZjX3p
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{2, 62, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 
              10, 9, 8, 7, 6, 5, 4, 3, 1}, {40, 61, 60, 59, 58, 57, 56, 55, 
              54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 
              41}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"X9\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gsGf+ejmojMz++33ePIwabdPw+A/9P7Gb2n5zf4P2L0zMPjPbD8xWkdrOdhs
OVG2b/4sDP7GiPq0gFJDhxqwf+bg5O+Ra30duGMeTv4/sH8X4OTPO6KwoShj
IU6+HTg8FuHk3/sJ8tBiDP5p4zumT1eLOdSBw2sJBh8WnnL6d1XYGpfi5O8D
h+cynPy4FGugi5bj5P8Dh/cKnPx5M0FgJU6+HTg+VuHk3zv3Pfjx0tU4+XXg
+FqDky/HEsanu2ktTv4+cHyuw8kHAPK2ON4=
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{20, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 
              29, 28, 27, 26, 25, 24, 23, 22, 21}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"Y9\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}, "RowDefault"],TemplateBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwA2IQ/Wflx0u+SQn2Mx/dXHRm5nx7BiiA8WHyD72/8Vta
sjlA+AUY/Ge2nxito60cftVl7SmZXIHB3xhRnxZQ6ghV34CTXy2yzv1hVQtO
PsS8Dpz8ypdqhhxrenDyIfZNwMm3ue/fOz1vEgb/tPEd06er1RxqwO6ZgsGH
hdseTx4m7fZpOPl/wO6dgZNvs+VE2b75s3Dya8D+mYOTv0eu9XXgjnk4+f/A
/l2Akz/viMKGooyFOPl24PBYhJN/7yfIQ4tx8uvA4bUEgw9Jb/375fTvqrA1
LsXgQ9Lbt/37wOG5DIMPSW9aB+JSrIEuWo7Bh8Sn4YF/4PBegZM/byYIrMTJ
twPHxyqc/Hvnvgc/XroaJ78OHF9rcPLlWML4dDetxeBD0pvYgX3g+FyHwWfA
AQA454fp
        "], {{{
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{61, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 
              52, 53, 54, 55, 56, 57, 58, 59, 60}}]}]}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{2, 62, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 
              10, 9, 8, 7, 6, 5, 4, 3, 1}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"X10\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gsGf+ejmojMz++33ePIwabdPw+A/9P7Gb2n5zf4P2L0zMPjPbD8xWkdrOdhs
OVG2b/4sDP7GiPq0gFJDhxqwf+bg5O+Ra30duGMeTv4/sH8X4OTPO6KwoShj
IU6+HTg8FuHk3/sJ8tBiDP5p4zumT1eLOdSBw2sJBh8WnnL6d1XYGpfi5O8D
h+cynPy4FGugi5bj5P8Dh/cKnPx5M0FgJU6+HTg+VuHk3zv3Pfjx0tU4+XXg
+FqDky/HEsanu2ktTv4+cHyuw8kHAPK2ON4=
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{20, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 
              29, 28, 27, 26, 25, 24, 23, 22, 21}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"Y10\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}, "RowDefault"],TemplateBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gpO/x5OHSbt9Gk7+H7B7Z+Dk22w5UbZv/iyc/Bqwf+bg5O+Ra30duGMeTv4/
sH8X4OTPO6KwoShjIU6+HTg8FuHk3/sJ8tBinPw6cHgtwcmX07+rwta4FCd/
Hzg8l+Hkx6VYA120HCf/Hzi8V+Dkz5sJAitx8u3A8bEKJ//eue/Bj5euxsmv
A8fXGpx8OZYwPt1Na3Hy94Hjcx1OPgCRYvMH
        "], {{{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"X11\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gsGf+ejmojMz59vv8eRh0m6fhsF/6P2N39KSzeEP2L0zMPjPbD8xWkdbOdhs
OVG2b/4sDP7GiPq0gFJHhxqwf+bg5O+Ra30duGMeTv4/sH8X4OTPO6KwoShj
IU6+HTg8FuHk3/sJ8tBiDP5p4zumT1erOdSBw2sJBh8WnnL6d1XYGpfi5O8D
h+cynPy4FGugi5bj5P8Dh/cKnPx5M0FgJU6+HTg+VuHk3zv3Pfjx0tU4+XXg
+FqDky/HEsanu2ktTv4+cHyuw8kHAKfKOCA=
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{20, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 
              29, 28, 27, 26, 25, 24, 23, 22, 21}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"Y11\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}, "RowDefault"],TemplateBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gpO/x5OHSbt9Gk7+H7B7Z+Dk22w5UbZv/iyc/Bqwf+bg5O+Ra30duGMeTv4/
sH8X4OTPO6KwoShjIU6+HTg8FuHk3/sJ8tBinPw6cHgtweDPfHRz0ZmZ8+3l
9O+qsDUuxeA/9P7Gb2nJ5rAPHJ7LMPjPbD8xWkdbOcSlWANdtByDvzGiPi2g
1NHhHzi8V+Dkz5sJAitx8u3A8bEKJ//eue/Bj5euxsmvA8fXGpx8OZYwPt1N
azH4p43vmD5dreawDxyf6zD4sPAEAFZAOCA=
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             PolygonBox[{{40, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 
              49, 48, 47, 46, 45, 44, 43, 42, 41}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"X12\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGCwBWIQ/Wflx0u+SQn2DDgAujyEX4CT/6sua0/J5AqcfIj6
Bpz8apF17g+rWnDyIeZ14ORXvlQz5FjTg5MPsW8CTr7Nff/e6XmTcPJrwO6Z
gpO/x5OHSbt9Gk7+H7B7Z+Dk22w5UbZv/iyc/Bqwf+bg5O+Ra30duGMeTv4/
sH8X4OTPO6KwoShjIU6+HTg8FuHk3/sJ8tBinPw6cHgtwcmX07+rwta4FCd/
Hzg8l+Hkx6VYA120HCf/Hzi8V+Dkz5sJAitx8u3A8bEKJ//eue/Bj5euxsmv
A8fXGpx8OZYwPt1Na3Hy94Hjcx1OPgCRYvMH
        "], {{{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
            61}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, ImagePadding -> All, 
       DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> 100, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"Y12\"", TraditionalForm], 
       PlotRange -> {{0, 0.06000000000000004}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}, "RowDefault"]},
  "RowDefault"]], "Output",
 CellChangeTimes->{{3.700572847269374*^9, 3.700572932376862*^9}, {
   3.700572963351022*^9, 3.7005730091017637`*^9}, {3.700573047736456*^9, 
   3.700573065610817*^9}, {3.7005730963957567`*^9, 3.700573102293084*^9}, 
   3.7005842281782007`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"GateProduct", "[", "$gaussianQubitGateSet", "]"}], "[", 
  RowBox[{"2", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.700573111421863*^9, 3.7005731238145*^9}}],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{{3.700573117685234*^9, 3.700573124317284*^9}, 
   3.700584228193029*^9}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["GateSet Diagnostics", "Subsection",
 CellChangeTimes->{{3.7005685374921293`*^9, 3.700568541728683*^9}}],

Cell[TextData[{
 StyleBox["FramePotential[", "Input"],
 StyleBox["gs_GateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[", ", "Input"],
 StyleBox["t", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " returns the t-frame potential of the given ",
 StyleBox["GateSet", "Input"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.7005685646319942`*^9, 3.7005685873268757`*^9}},
 CellTags->"FramePotential::usage"],

Cell[TextData[{
 StyleBox["TestGateSetPulses[", "Input"],
 StyleBox["gs_GateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["] ", "Input"],
 " simulates the pulses (with no drift Hamiltonian) and compares the result \
with the ideal unitary.\n\n",
 StyleBox["Options",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n\[Bullet]",
 StyleBox[" GateIndices", "Input"],
 " is ",
 StyleBox["All", "Input"],
 " or a list of gate indices to perform the test on.\n\[Bullet]",
 StyleBox[" TakeOverlap", "Input"],
 " is boolean specifying whether to return overlaps or difference matrices. \
Default is ",
 StyleBox["True", "Input"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700568617488096*^9, 3.700568801766234*^9}, {
   3.700568832308796*^9, 3.700568840948738*^9}, 3.7005693885924797`*^9, 
   3.700573255015461*^9, 3.700824963708358*^9},
 CellTags->"TestGateSetPulses::usage"],

Cell[TextData[{
 StyleBox["TestGateSetInverses[", "Input"],
 StyleBox["gs_GateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["] ", "Input"],
 "uses the ",
 StyleBox["gs", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " inverse function ",
 StyleBox["GateInverse", "Input"],
 " to multiply gates with their supposed inverses. By default, a list of \
overlaps with the identity matrix is returned.\n\n",
 StyleBox["Options",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n\[Bullet]",
 StyleBox[" GateIndices", "Input"],
 " is ",
 StyleBox["All", "Input"],
 " or a list of gate indices to perform the test on.\n\[Bullet]",
 StyleBox[" TakeOverlap", "Input"],
 " is boolean specifying whether to return overlaps or difference matrices. \
Default is ",
 StyleBox["True", "Input"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700568617488096*^9, 3.700568801766234*^9}, {
   3.700568832308796*^9, 3.700568840948738*^9}, {3.7005689283303547`*^9, 
   3.7005689850395823`*^9}, {3.700569040126689*^9, 3.7005690696735086`*^9}, 
   3.700824963748641*^9},
 CellTags->"TestGateSetInverses::usage"],

Cell[TextData[{
 StyleBox["TestGateSetProducts[", "Input"],
 StyleBox["gs_GateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["] ", "Input"],
 "uses the ",
 StyleBox["gs", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " product function ",
 StyleBox["GateProduct", "Input"],
 " to multiply gate matrices together. By default, a list of overlaps is \
returned.\n\n",
 StyleBox["Options",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n\[Bullet]",
 StyleBox[" GateIndices", "Input"],
 " is ",
 StyleBox["All", "Input"],
 " or a list of gate indices to perform the test on.\n\[Bullet]",
 StyleBox[" TakeOverlap", "Input"],
 " is boolean specifying whether to return overlaps or difference matrices. \
Default is ",
 StyleBox["True", "Input"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700568617488096*^9, 3.700568801766234*^9}, {
   3.700568832308796*^9, 3.700568840948738*^9}, {3.7005689283303547`*^9, 
   3.700569052939743*^9}, 3.700824963766824*^9},
 CellTags->"TestGateSetProducts::usage"],

Cell[TextData[{
 StyleBox["GateIndices", "Input"],
 " is an option for ",
 StyleBox["TestGateSetPulses", "Input"],
 ", ",
 StyleBox["TestGateSetInverses", "Input"],
 ", and ",
 StyleBox["TestGateSetProducts", "Input"],
 " specifying which indices or pairs of indices to test. Default is ",
 StyleBox["All", "Input"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.7005691625148973`*^9, 3.700569192754887*^9}, 
   3.700824963786811*^9},
 CellTags->"GateIndices::usage"],

Cell[TextData[{
 StyleBox["TakeOverlap", "Input"],
 " is a boolean option for ",
 StyleBox["TestGateSetPulses", "Input"],
 ", ",
 StyleBox["TestGateSetInverses", "Input"],
 ", and ",
 StyleBox["TestGateSetProducts", "Input"],
 " specifying whether to return full matrices, or just the relevant \
overlaps."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700569175784831*^9, 3.700569224520945*^9}, {
  3.70056936748973*^9, 3.700569369534995*^9}},
 CellTags->"TakeOverlap::usage"],

Cell[CellGroupData[{

Cell["Example: FramePotential", "Subsubsection",
 CellChangeTimes->{{3.700573161757053*^9, 3.700573166140077*^9}, {
  3.700573237969413*^9, 3.700573244158182*^9}}],

Cell[TextData[{
 "Compute the frame potential of the built in gate set ",
 StyleBox["$gaussianQubitGateSet", "Input"]
}], "Text",
 CellChangeTimes->{{3.7005731988510933`*^9, 3.70057322384406*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FramePotential", "[", 
  RowBox[{"$gaussianQubitGateSet", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.700573167569525*^9, 3.700573188270131*^9}}],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{{3.7005731733401747`*^9, 3.700573188477627*^9}, 
   3.700584228207604*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Example: Tests", "Subsubsection",
 CellChangeTimes->{{3.700573247638123*^9, 3.7005732620708513`*^9}}],

Cell["All pulses have unit overlap with the ideal matrices:", "Text",
 CellChangeTimes->{{3.700573281012847*^9, 3.700573293674142*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestGateSetPulses", "[", "$gaussianQubitGateSet", "]"}]], "Input",
 CellChangeTimes->{{3.700573265290827*^9, 3.700573274620027*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "0.9999999999999978`", ",", "1.0000000000000013`", ",", 
   "0.9999999999999989`", ",", "0.9999999999999978`", ",", 
   "0.9999999999999978`", ",", "0.9999999999999984`", ",", 
   "0.9999999999999984`", ",", "0.9999999999999993`", ",", 
   "0.9999999999999982`", ",", "1.0000000000000009`", ",", 
   "1.0000000000000009`"}], "}"}]], "Output",
 CellChangeTimes->{3.700573274915436*^9, 3.700584228259481*^9}]
}, Open  ]],

Cell[TextData[{
 "The following demonstrates the gate product function ",
 StyleBox["GateProduct[", "Input"],
 StyleBox["$gaussianQubitGateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " is working correctly by testing it against actual matrix multiplication:"
}], "Text",
 CellChangeTimes->{{3.7005733270590353`*^9, 3.700573358940207*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"TestGateSetProducts", "[", "$gaussianQubitGateSet", "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.700573300436289*^9, 3.700573320637114*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"},
     {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.7005733169839487`*^9, 3.700573321027521*^9}, 
   3.700584228295504*^9}]
}, Open  ]],

Cell[TextData[{
 "The following demonstrates the gate inverse function ",
 StyleBox["GateInverse[", "Input"],
 StyleBox["$gaussianQubitGateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " is working correctly by testing it against actual matrix inversion:"
}], "Text",
 CellChangeTimes->{{3.700573370392599*^9, 3.700573397481436*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TestGateSetInverses", "[", "$gaussianQubitGateSet", "]"}]], "Input",\

 CellChangeTimes->{{3.700573361534679*^9, 3.7005733666177883`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
   ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.700573366935803*^9, 3.700584228361745*^9}]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Noise Models", "Section",
 CellChangeTimes->{{3.700574087743601*^9, 3.7005740915777817`*^9}}],

Cell[TextData[{
 StyleBox["NoiseModel", "Input"],
 " is a ",
 StyleBox["Head", "Input"],
 " used to store all relevant information about a particular noise model.  \
Such objects have the format ",
 StyleBox["noiseModel", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["=NoiseModel[", "Input"],
 StyleBox["key1\[Rule]value1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["...", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 ". \n\n",
 StyleBox["Retrieving Values",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\nValues of keys can be retrieved by calling the key: ",
 StyleBox["GateNoise[", "Input"],
 StyleBox["gateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 "\n\n",
 StyleBox["Possible Keys\n",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox["GateNoise\nDistortionMultiplier\nDistortionOperator\n\
StochasticNoise\nStaticNoise\nGenerator\nStepSize", "Input"]
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.6344996477785463`*^9, 3.634499648332594*^9}, {
  3.6345002099990873`*^9, 3.634500628404138*^9}, {3.6345007418132677`*^9, 
  3.634500914003952*^9}, {3.63450112157022*^9, 3.634501123890213*^9}, {
  3.634501193768155*^9, 3.634501201142671*^9}, {3.634501989868088*^9, 
  3.6345020089884663`*^9}, {3.635772721205873*^9, 3.635772740285365*^9}, {
  3.700565785736985*^9, 3.700566063894699*^9}, {3.7005660992536917`*^9, 
  3.700566103725062*^9}, {3.700566142548973*^9, 3.700566225811758*^9}, {
  3.7005662806132593`*^9, 3.7005663629158163`*^9}, {3.700567921422406*^9, 
  3.700567930643736*^9}, {3.700574113649282*^9, 3.700574214947003*^9}},
 CellTags->"NoiseModel::usage"],

Cell[CellGroupData[{

Cell["GateNoise Keys", "Subsection",
 CellChangeTimes->{{3.7005774882656918`*^9, 3.7005774910906477`*^9}}],

Cell[TextData[{
 StyleBox["GateNoise", "Input"],
 " is a ",
 StyleBox["NoiseModel", "Input"],
 " key storing a function  ",
 StyleBox["f[", "Input"],
 StyleBox["i1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["i2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["...", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["in", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " that returns an object satisfying ",
 StyleBox["ChannelPulseQ", "Input"],
 " given the gate index history ",
 StyleBox["i1,i2,...,in", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " where ",
 StyleBox["in", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " is the most recent."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700574370981217*^9, 3.700574470938939*^9}, {
  3.700575369151657*^9, 3.7005753793526363`*^9}},
 CellTags->"GateNoise::usage"],

Cell[TextData[{
 StyleBox["DistortionMultiplier", "Input"],
 " is a ",
 StyleBox["NoiseModel", "Input"],
 " key storing a number specifying how many output pulse steps there are per \
input pulse step. This is only relevant when the noise model has a ",
 StyleBox["DistortionOperator", "Input"],
 " set. The important use of this property is that in simulation of a pulse \
sequence, the end of the i\[CloseCurlyQuote]th pulse is calculated as this \
number times the total number of input time steps until the end of the i\
\[CloseCurlyQuote]th pulse."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700574596586396*^9, 3.70057473780046*^9}},
 CellTags->"DistortionMultiplier::usage"],

Cell[TextData[{
 StyleBox["DistortionOperator", "Input"],
 " is a ",
 StyleBox["NoiseModel", "Input"],
 " key storing a ",
 StyleBox["DistortionOperator", "Input"],
 ", as defined in the ",
 StyleBox["GRAPE`", "Input"],
 " package,  to be used on any concatenated pulse sequence. "
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700575177502709*^9, 3.700575232481399*^9}}],

Cell[TextData[{
 StyleBox["StochasticNoise", "Input"],
 " is a ",
 StyleBox["NoiseModel", "Input"],
 " key storing a list of random function symbols along with their random \
functions, for example, ",
 StyleBox["{\[Gamma] \[Distributed] WeinerProcess[0,0.1], \[Delta] \
\[Distributed] OrnsteinUhlenbeckProcess[1,2,3]}", "Input"],
 ". The distributed symbol is typed with escape+dist+escape."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700574779054101*^9, 3.700574856670841*^9}, {
  3.700574942358099*^9, 3.7005749567511*^9}, {3.700575021258769*^9, 
  3.700575044495638*^9}},
 CellTags->"StochasticNoise::usage"],

Cell[TextData[{
 StyleBox["StaticNoise", "Input"],
 " is a ",
 StyleBox["NoiseModel", "Input"],
 " key storing a list of symbols and their corresponding distributions, for \
example, ",
 StyleBox["{{x,y} \[Distributed] \
MultinormalDistribution[{0,1},{{1,0},{0.5,1}}], \[Xi] \[Distributed] \
BetaDistribution[1,2]}", "Input"],
 ". The distributed symbol is typed with escape+dist+escape."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700574869373107*^9, 3.700574932610814*^9}, {
  3.700575052551943*^9, 3.7005750528407927`*^9}},
 CellTags->"StaticNoise::usage"],

Cell[TextData[{
 StyleBox["Generator", "Input"],
 " is a ",
 StyleBox["NoiseModel", "Input"],
 " key which specifies a Hamiltonian matrix or LindbladForm of the system. \
This can possibly act on a Hilbert space larger than that of the gate set."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700575000687212*^9, 3.700575003674*^9}, {
  3.700575068833808*^9, 3.700575112213317*^9}},
 CellTags->"Generator::usage"],

Cell[TextData[{
 StyleBox["StepSize", "Input"],
 " is a ",
 StyleBox["NoiseModel", "Input"],
 " key storing a number representing the step size of time slicing in the \
quantum dynamics simulator."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700575306832677*^9, 3.700575351552236*^9}},
 CellTags->"StepSize::link"]
}, Closed]],

Cell["Example: GateNoise", "Subsection",
 CellChangeTimes->{{3.7005755459558277`*^9, 3.700575563907899*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Protocols", "Section",
 CellChangeTimes->{{3.700582589092091*^9, 3.700582590606159*^9}}],

Cell[TextData[{
 StyleBox["Protocol", "Input"],
 " is a ",
 StyleBox["Head", "Input"],
 " used to store all relevant information about a particular protocol.  Such \
objects have the format ",
 StyleBox["protocol", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["=Protocol[", "Input"],
 StyleBox["key1\[Rule]value1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["...", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 ". \n\n",
 StyleBox["Retrieving Values",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\nValues of keys can be retrieved by calling the key: ",
 StyleBox["ProtocolName[", "Input"],
 StyleBox["gateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 "\n\n",
 StyleBox["Notes",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n\[Bullet]",
 StyleBox[" ", "Input"],
 "A gate set is formatted as ",
 StyleBox["Protocol[", "Input"],
 StyleBox["\[OpenCurlyDoubleQuote]name\[CloseCurlyDoubleQuote]", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " when printed -- do not let this fool you about the contents. Use ",
 StyleBox["FullForm[", "Input"],
 StyleBox["protocol", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " or ",
 StyleBox["List@@", "Input"],
 StyleBox["protocol", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " to see all of the explicit contents.\n\n",
 StyleBox["Possible Keys\n",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox["ProtocolName\nSequenceLengths\nExperimentTypes\nNumSequenceDraws\n\
NumRepetitions\nSequenceGenerator\nSimulationOptions\nSimulationParser\n\
GateSimulator\nParallelOptions\nTotalGates", "Input"]
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.6344996477785463`*^9, 3.634499648332594*^9}, {
   3.6345002099990873`*^9, 3.634500628404138*^9}, {3.6345007418132677`*^9, 
   3.634500914003952*^9}, {3.63450112157022*^9, 3.634501123890213*^9}, {
   3.634501193768155*^9, 3.634501201142671*^9}, {3.634501989868088*^9, 
   3.6345020089884663`*^9}, {3.635772721205873*^9, 3.635772740285365*^9}, {
   3.700565785736985*^9, 3.700566063894699*^9}, {3.7005660992536917`*^9, 
   3.700566103725062*^9}, {3.700566142548973*^9, 3.700566225811758*^9}, {
   3.7005662806132593`*^9, 3.7005663629158163`*^9}, {3.700567921422406*^9, 
   3.700567930643736*^9}, {3.700582620909094*^9, 3.700582720327632*^9}, 
   3.700767995660067*^9, {3.7007681231337633`*^9, 3.700768150313905*^9}, {
   3.700914359461115*^9, 3.7009143614108133`*^9}},
 CellTags->"Protocol::usage"],

Cell[CellGroupData[{

Cell["Protocol Keys", "Subsection",
 CellChangeTimes->{{3.7005827303996487`*^9, 3.7005827329632797`*^9}}],

Cell[TextData[{
 StyleBox["ProtocolName", "Input"],
 " is a ",
 StyleBox["Protocol", "Input"],
 " key storing a human readable string describing the protocol."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700582952423715*^9, 3.700582968907834*^9}},
 CellTags->"ProtocolName::usage"],

Cell[TextData[{
 StyleBox["SequenceLengths", "Input"],
 " is a ",
 StyleBox["Protocol", "Input"],
 " key storing a list of integers specifying the lengths of sequences to \
use."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700582952423715*^9, 3.700582968907834*^9}, {
  3.7005830420075073`*^9, 3.7005830559361343`*^9}, {3.700583735360283*^9, 
  3.70058373544865*^9}, {3.70068396403293*^9, 3.700683966518495*^9}, {
  3.7006841846881437`*^9, 3.70068419469705*^9}},
 CellTags->"SequenceLengths::usage"],

Cell[TextData[{
 StyleBox["ExperimentTypes", "Input"],
 " is a ",
 StyleBox["Protocol", "Input"],
 " key storing a function ",
 StyleBox["f[", "Input"],
 StyleBox["M", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " that returns a list of experiment types for the sequence length ",
 StyleBox["M", "Input",
  FontSlant->"Italic"],
 ". The list can contain any types of values; they are used by ",
 StyleBox["SequenceGenerator", "Input"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700582952423715*^9, 3.700582968907834*^9}, {
  3.7005830420075073`*^9, 3.7005830559361343`*^9}, {3.700583735360283*^9, 
  3.70058373544865*^9}, {3.700683982466826*^9, 3.7006839846035137`*^9}, {
  3.700684072317649*^9, 3.700684136076358*^9}},
 CellTags->"ExperimentTypes::usage"],

Cell[TextData[{
 StyleBox["NumSequenceDraws", "Input"],
 " is a ",
 StyleBox["Protocol", "Input"],
 " key storing a function ",
 StyleBox["f[", "Input"],
 StyleBox["M", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["e", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " that returns an integer specifying the number of random draws to take \
using Sequence generator at the sequence length ",
 StyleBox["M", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " and experiment type ",
 StyleBox["e", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700582952423715*^9, 3.700582968907834*^9}, {
  3.7005830420075073`*^9, 3.7005830559361343`*^9}, {3.700583735360283*^9, 
  3.70058373544865*^9}, {3.7006839688289623`*^9, 3.7006839726424923`*^9}, {
  3.700684219632728*^9, 3.700684272954935*^9}},
 CellTags->"NumSequenceDraws::usage"],

Cell[TextData[{
 StyleBox["NumRepetitions", "Input"],
 " is a ",
 StyleBox["Protocol", "Input"],
 " key storing a function ",
 StyleBox["f[M,e,i]", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " that returns an integer specifying the number of random draws to take at \
sequence length ",
 StyleBox["M", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 ", experiment type ",
 StyleBox["e", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 ", and sequence draw ",
 StyleBox["i", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700582952423715*^9, 3.700582968907834*^9}, {
  3.7005830420075073`*^9, 3.7005830559361343`*^9}, {3.700583735360283*^9, 
  3.70058373544865*^9}, {3.700683974652008*^9, 3.700683978615847*^9}, {
  3.7006843086321087`*^9, 3.700684353166782*^9}},
 CellTags->"NumRepetitions::usage"],

Cell[TextData[{
 StyleBox["SequenceGenerator", "Input"],
 " is a ",
 StyleBox["Protocol", "Input"],
 " key storing a function ",
 StyleBox["seqGen[", "Input"],
 StyleBox["gs", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",{", "Input"],
 StyleBox["M,e,i", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["}]", "Input"],
 " that takes a ",
 StyleBox["GateSet", "Input"],
 " along with a sequence length ",
 StyleBox["M", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 ", experiment type ",
 StyleBox["e", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 ", and sequence draw index ",
 StyleBox["i", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " and returns a gate sequence, which is a list of indices corresponding to \
gates from ",
 StyleBox["gs", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700582952423715*^9, 3.700582968907834*^9}, {
   3.700583075784091*^9, 3.700583179116555*^9}, {3.700583213872574*^9, 
   3.700583247631716*^9}, 3.700584220364539*^9, {3.700817715952558*^9, 
   3.70081771961553*^9}, {3.700817749986923*^9, 3.700817776736979*^9}},
 CellTags->"SequenceGenerator::usage"],

Cell[TextData[{
 StyleBox["SimulationOptions", "Input"],
 " is a ",
 StyleBox["Protocol", "Input"],
 " key storing a list of options to pass to the simulator, such as ",
 StyleBox["InitialState", "Input"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700582952423715*^9, 3.700582968907834*^9}, 
   3.700583001251995*^9, {3.70058303443493*^9, 3.700583036725656*^9}},
 CellTags->"SimulationOptions::usage"],

Cell[TextData[{
 StyleBox["SimulationParser", "Input"],
 " is a ",
 StyleBox["Protocol", "Input"],
 " key storing a function which acts on the output of ",
 StyleBox["PulseSim", "Input"],
 " to return the quantity of interest."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700582952423715*^9, 3.700582968907834*^9}, {
  3.7005832644120073`*^9, 3.700583279560821*^9}},
 CellTags->"SimulationParser::usage"],

Cell[TextData[{
 StyleBox["GateSimulator", "Input"],
 " is a ",
 StyleBox["Protocol", "Input"],
 " key storing a function",
 StyleBox[" gateSim[", "Input"],
 StyleBox["gs", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["{i1,i2,...,in}", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " that takes a ",
 StyleBox["GateNoiseGateSet", "Input"],
 " ",
 StyleBox["gs", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " along with a sequence of gate indices",
 StyleBox[" i1,i2,...,in", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " and returns the same quantity as ",
 StyleBox["SimulationParser", "Input"],
 " would, except that the simulation is done using the ",
 StyleBox["GateChannel", "Input"],
 " values of ",
 StyleBox["gs", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700914390025763*^9, 3.7009145331844807`*^9}, {
  3.700914587809938*^9, 3.700914597293791*^9}},
 CellTags->"GateSimulator::usage"],

Cell[TextData[{
 StyleBox["ParallelOptions", "Input"],
 " is a ",
 StyleBox["Protocol", "Input"],
 " key storing a list of options to be passed to ",
 StyleBox["ParallelTable", "Input"],
 " during simulation."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700582952423715*^9, 3.700582968907834*^9}, {
  3.7005836012621307`*^9, 3.700583626746196*^9}, {3.700822497977167*^9, 
  3.700822498420911*^9}},
 CellTags->"ParallelOptions::usage"],

Cell[TextData[{
 StyleBox["TotalGates", "Input"],
 " is a ",
 StyleBox["Protocol", "Input"],
 " key storing how many gates need to be implemented in total to perform the \
entire protocol. Used for the simulation progress monitor."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700582952423715*^9, 3.700582968907834*^9}, {
  3.700583646454034*^9, 3.700583663399702*^9}},
 CellTags->"TotalGates::usage"]
}, Closed]],

Cell[CellGroupData[{

Cell["Built-in Protocols", "Subsection",
 CellChangeTimes->{{3.700583692653751*^9, 3.7005836967849092`*^9}}],

Cell[TextData[{
 StyleBox["RBDraw[", "Input"],
 StyleBox["gateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[", ", "Input"],
 StyleBox["seqLength", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " is a helper function that returns a list of gate indices of length ",
 StyleBox["seqLength", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["+1", "Input"],
 ", such that the total product according to gs is the identity unitary. The ",
 StyleBox["gateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " requires the keys ",
 StyleBox["GateProduct", "Input"],
 " and ",
 StyleBox["GateInverse", "Input"],
 " to be implemented."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700583788797639*^9, 3.700583863812643*^9}},
 CellTags->"RBDraw::usage"],

Cell[TextData[{
 StyleBox["RBProtocol[", "Input"],
 StyleBox["seqLengths", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["numSeqs", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["shotsPerSeq", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["\[Rho]", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["E", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " returns a ",
 StyleBox["Protocol", "Input"],
 " object specifying the standard RB protocol, with sequences whose lengths \
are given by the list ",
 StyleBox["seqLengths", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 ". For every sequence length, ",
 StyleBox["numSeqs", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " different random sequences are drawn, and each random sequence is repeated \
",
 StyleBox["shotPerSeq", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " number of times. ",
 StyleBox["\[Rho]", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " is the initial density matrix, and ",
 StyleBox["E", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " is the observable."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.70058380104671*^9, 3.7005838039032383`*^9}, {
   3.700583866323764*^9, 3.700583982248109*^9}, 3.700584042788686*^9, 
   3.7005840813343973`*^9},
 CellTags->"RBProtocol::usage"],

Cell[TextData[{
 StyleBox["GateNoiseProtocol[", "Input"],
 StyleBox["depth", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["gateIndices,repetitions,hasGateNoise", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " is the protocol used internally by ",
 StyleBox["CompileGateNoise", "Input"],
 " to take an arbitrary pair of ",
 StyleBox["GateSet", "Input"],
 " and ",
 StyleBox["NoiseModel", "Input"],
 " and attempt to build a ",
 StyleBox["GateNoiseGateSet", "Input"],
 ". This is done by simulating all combinations of the given gate indices ",
 StyleBox["gateIndices", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " up until the given ",
 StyleBox["depth", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " and returning the super operator of the last gate."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700825632383707*^9, 3.70082580374231*^9}, {
  3.700825915335033*^9, 3.700825985789364*^9}, {3.700827939203291*^9, 
  3.700827968015255*^9}, {3.700996834469219*^9, 3.700996839091201*^9}},
 CellTags->"GateNoiseProtocol::usage"],

Cell[CellGroupData[{

Cell["Example: RBProtocol", "Subsubsection",
 CellChangeTimes->{{3.700584236620591*^9, 3.700584241390806*^9}, {
  3.7008258525162783`*^9, 3.7008258553423862`*^9}}],

Cell["\<\
Create an instance of the RB protocol with 10 draws of each of the sequence \
lengths 2,4,10, and 2 repetitions per draw. We initialize and measure the |0\
\[RightAngleBracket] state.\
\>", "Text",
 CellChangeTimes->{{3.70081855027133*^9, 3.7008186277430153`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"rb", "=", 
   RowBox[{"RBProtocol", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "10"}], "}"}], ",", "10", ",", "2", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.700584242490383*^9, 3.7005842795712*^9}}],

Cell[TextData[{
 "Note that there is only one ",
 StyleBox["ExperimentType", "Input"],
 ", named ",
 StyleBox["0", "Input"],
 "."
}], "Text",
 CellChangeTimes->{{3.700818635561886*^9, 3.700818649239613*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"TotalGates", "[", "rb", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ExperimentTypes", "[", "rb", "]"}], "[", "10", "]"}]}], "Input",
 CellChangeTimes->{{3.700584285511221*^9, 3.700584288160557*^9}, {
  3.700818499460402*^9, 3.700818508078504*^9}}],

Cell[BoxData["380"], "Output",
 CellChangeTimes->{
  3.700584288407885*^9, {3.70081848093056*^9, 3.7008185084891367`*^9}, 
   3.700906585125477*^9}],

Cell[BoxData[
 RowBox[{"{", "0", "}"}]], "Output",
 CellChangeTimes->{
  3.700584288407885*^9, {3.70081848093056*^9, 3.7008185084891367`*^9}, 
   3.700906585126668*^9}]
}, Open  ]],

Cell["\<\
Get a sequence of length 10 (plus an inversion) with experiment type 0, and \
random draw index 1:\
\>", "Text",
 CellChangeTimes->{{3.700818677503243*^9, 3.700818718352165*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"seq", "=", 
  RowBox[{
   RowBox[{"SequenceGenerator", "[", "rb", "]"}], "[", 
   RowBox[{"$gaussianQubitGateSet", ",", 
    RowBox[{"{", 
     RowBox[{"10", ",", "0", ",", "1"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.700584302746723*^9, 3.7005843830015297`*^9}, {
  3.700584434734421*^9, 3.700584435835206*^9}, {3.700818493711534*^9, 
  3.7008184938422527`*^9}, {3.700818667696855*^9, 3.700818667791926*^9}, {
  3.700818728426754*^9, 3.7008187291968813`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "8", ",", "2", ",", "3", ",", "6", ",", "4", ",", "12", ",", "9", ",", "3", 
   ",", "7", ",", "4", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{{3.700584309982183*^9, 3.700584387376319*^9}, 
   3.700584436200727*^9, {3.7008184856135693`*^9, 3.70081849525721*^9}, 
   3.7008186681243362`*^9, 3.700818729575655*^9, 3.700818829383792*^9, 
   3.700906587730685*^9}]
}, Open  ]],

Cell["These are the unitaries they correspond to:", "Text",
 CellChangeTimes->{{3.700818777873383*^9, 3.700818788002946*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GateUnitary", "[", "$gaussianQubitGateSet", "]"}], "/@", "seq"}], 
  "//", "MatrixListForm"}]], "Input",
 CellChangeTimes->{{3.7008187311824093`*^9, 3.7008187945685177`*^9}}],

Cell[BoxData[
 TemplateBox[{TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{"1", "0"}, {"0", "1"}}, RowSpacings -> 1, ColumnSpacings -> 1,
        RowAlignments -> Baseline, ColumnAlignments -> Center], "\[NoBreak]", 
      ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}]}, {
         RowBox[{
           RowBox[{"-", 
             FractionBox["1", "2"]}], "+", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}]}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{"0", 
         RowBox[{"-", "1"}]}, {"1", "0"}}, RowSpacings -> 1, ColumnSpacings -> 
       1, RowAlignments -> Baseline, ColumnAlignments -> Center], 
      "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}]}, {
         RowBox[{
           RowBox[{"-", 
             FractionBox["1", "2"]}], "-", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}]}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{"0", 
         RowBox[{"-", "1"}]}, {"1", "0"}}, RowSpacings -> 1, ColumnSpacings -> 
       1, RowAlignments -> Baseline, ColumnAlignments -> Center], 
      "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           RowBox[{"-", 
             FractionBox["1", "2"]}], "-", 
           FractionBox["\[ImaginaryI]", "2"]}]}, {
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}]}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
         RowBox[{"-", "\[ImaginaryI]"}], "0"}, {"0", "\[ImaginaryI]"}}, 
       RowSpacings -> 1, ColumnSpacings -> 1, RowAlignments -> Baseline, 
       ColumnAlignments -> Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           RowBox[{"-", 
             FractionBox["1", "2"]}], "+", 
           FractionBox["\[ImaginaryI]", "2"]}]}, {
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}]}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{"0", "\[ImaginaryI]"}, {"\[ImaginaryI]", "0"}}, RowSpacings -> 
       1, ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}]}, {
         RowBox[{
           RowBox[{"-", 
             FractionBox["1", "2"]}], "+", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}]}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "-", 
           FractionBox["\[ImaginaryI]", "2"]}]}, {
         RowBox[{
           RowBox[{"-", 
             FractionBox["1", "2"]}], "-", 
           FractionBox["\[ImaginaryI]", "2"]}], 
         RowBox[{
           FractionBox["1", "2"], "+", 
           FractionBox["\[ImaginaryI]", "2"]}]}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]},
  "RowDefault"]], "Output",
 CellChangeTimes->{{3.700818755773508*^9, 3.7008187949632387`*^9}, 
   3.7008188310122433`*^9}]
}, Open  ]],

Cell[TextData[{
 "Check that they multiply to the identity. Notice the ",
 StyleBox["Reverse", "Input"],
 ", because by convention, this package always lists gates chronologically."
}], "Text",
 CellChangeTimes->{{3.700818854558832*^9, 3.7008188989897633`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Fold", "[", 
   RowBox[{"Dot", ",", 
    RowBox[{"Reverse", "[", 
     RowBox[{
      RowBox[{"GateUnitary", "[", "$gaussianQubitGateSet", "]"}], "/@", 
      "seq"}], "]"}]}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.700818806020174*^9, 3.700818850308094*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", "1"}], "0"},
     {"0", 
      RowBox[{"-", "1"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.7008188195203342`*^9, 3.700818850610841*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Example: GateNoiseProtocol", "Subsubsection",
 CellChangeTimes->{{3.7008258582058992`*^9, 3.7008258627109203`*^9}}],

Cell[TextData[{
 "Create an instance of the ",
 StyleBox["GateNoiseProtocol", "Input"],
 ":"
}], "Text",
 CellChangeTimes->{{3.700826100879681*^9, 3.7008261074479933`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"gnProtocol", "=", 
  RowBox[{"GateNoiseProtocol", "[", 
   RowBox[{"2", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "5"}], "}"}], ",", "3", ",", "False"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7008258773081417`*^9, 3.700825902814624*^9}, {
  3.700826013086331*^9, 3.700826015967781*^9}, {3.7008303535675373`*^9, 
  3.700830353742326*^9}, {3.700912326856841*^9, 3.700912327082958*^9}, {
  3.70099685871054*^9, 3.7009968647944193`*^9}}],

Cell[BoxData[
 RowBox[{"\<\"Protocol\"\>", 
  "[", "\<\"Protocol for finding gate noise description\"\>", "]"}]], "Output",\

 CellChangeTimes->{
  3.700826034615979*^9, {3.700830344961735*^9, 3.700830354042313*^9}, 
   3.7008314252463493`*^9, 3.7009123277114153`*^9, 3.7009123593436337`*^9, 
   3.7009152692496843`*^9, 3.700915348598763*^9, {3.700996853591826*^9, 
   3.7009968658873253`*^9}}]
}, Open  ]],

Cell["\<\
The experiment types of a given length are all combinations of the gates of \
that length:\
\>", "Text",
 CellChangeTimes->{{3.7008260706591473`*^9, 3.7008260925338707`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ExperimentTypes", "[", "gnProtocol", "]"}], "[", "2", 
  "]"}]], "Input",
 CellChangeTimes->{{3.700826055907791*^9, 3.7008260659086246`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.700826066189002*^9, 3.7008303570955667`*^9, 3.700831426494879*^9, {
   3.700912333023457*^9, 3.7009123617950983`*^9}, 3.700915269767104*^9, 
   3.7009153509131927`*^9, 3.700996868878016*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SequenceGenerator", "[", "gnProtocol", "]"}], "[", 
  RowBox[{"$gaussianQubitGateSet", ",", " ", 
   RowBox[{"{", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.700830358488357*^9, 3.700830389789444*^9}, {
  3.700831415167123*^9, 3.7008314224522257`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{{3.700830370310817*^9, 3.700830390095579*^9}, 
   3.700830443315016*^9, {3.7008314227592077`*^9, 3.700831427489477*^9}, 
   3.7009123657750177`*^9, 3.7009152703657637`*^9, 3.700996869937147*^9}]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Compilers", "Section",
 CellChangeTimes->{{3.700576354546076*^9, 3.7005763600174503`*^9}}],

Cell[CellGroupData[{

Cell["CompileSequence and CompiledSequence", "Subsection",
 CellChangeTimes->{{3.7005763691404676`*^9, 3.700576378379393*^9}, {
  3.70057664502385*^9, 3.7005766479484987`*^9}}],

Cell[TextData[{
 StyleBox["CompileSequence[", "Input"],
 StyleBox["gs_GateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["sequence", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["nm_NoiseModel", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " compiles the gates from the ",
 StyleBox["GateSet", "Input"],
 " ",
 StyleBox["gs", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " corresponding to the sequence of gate indices sequence under the given ",
 StyleBox["NoiseModel", "Input"],
 " ",
 StyleBox["nm", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 ". The gate indices are integers between 1 and ",
 StyleBox["Size[", "Input"],
 StyleBox["gs", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 ", and should appear in chronological order, that is,\nthe first element of \
sequence is the first gate applied.\n\nThe output of this function a ",
 StyleBox["CompiledSequence", "Input"],
 " object.\n\n",
 StyleBox["Options\n",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox["AllowFinalRingdown", "Input"]
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700576392522789*^9, 3.7005765624089813`*^9}, {
  3.700576601393935*^9, 3.70057665074257*^9}, {3.700995249648929*^9, 
  3.700995265227379*^9}},
 CellTags->"CompileSequence::usage"],

Cell[TextData[{
 StyleBox["CompiledSequence", "Input"],
 " is a ",
 StyleBox["Head", "Input"],
 " used to store a compiled version of the relevant information needed to \
simulate a specific gate sequence under some model, as output by the ",
 StyleBox["CompileSequence", "Input"],
 " function.  Such objects have the format ",
 StyleBox["compiledSequence", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["=CompiledSequence[", "Input"],
 StyleBox["key1\[Rule]value1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["...", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 ". \n\n",
 StyleBox["Retrieving Values",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\nValues of keys can be retrieved by calling the key: ",
 StyleBox["Generator[", "Input"],
 StyleBox["gateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 "\n\n",
 StyleBox["Possible Keys\n",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox["Generator\nPulseSequence\nStepSize\nGateSequence\n\
UndistortedLongPulse\nGateSet\nNoiseModel", "Input"]
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.6344996477785463`*^9, 3.634499648332594*^9}, {
  3.6345002099990873`*^9, 3.634500628404138*^9}, {3.6345007418132677`*^9, 
  3.634500914003952*^9}, {3.63450112157022*^9, 3.634501123890213*^9}, {
  3.634501193768155*^9, 3.634501201142671*^9}, {3.634501989868088*^9, 
  3.6345020089884663`*^9}, {3.635772721205873*^9, 3.635772740285365*^9}, {
  3.700565785736985*^9, 3.700566063894699*^9}, {3.7005660992536917`*^9, 
  3.700566103725062*^9}, {3.700566142548973*^9, 3.700566225811758*^9}, {
  3.7005662806132593`*^9, 3.7005663629158163`*^9}, {3.700567921422406*^9, 
  3.700567930643736*^9}, {3.700576693450428*^9, 3.700576868931697*^9}},
 CellTags->"CompiledSequence::usage"],

Cell[CellGroupData[{

Cell["Options and Keys", "Subsubsection",
 CellChangeTimes->{{3.700576902447823*^9, 3.700576907109582*^9}, {
  3.700995275909086*^9, 3.700995277146502*^9}}],

Cell[TextData[{
 StyleBox["AllowFinalRingdown", "Input"],
 " is a boolean option for ",
 StyleBox["CompiledSequence", "Input"],
 " and ",
 StyleBox["SimulateProtocol", "Input"],
 " that specified whether the final ringdown due to ",
 StyleBox["DistortionOperator", "Input"],
 " noise after where the last gate should have ended should be included in \
the simulation."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700995285272897*^9, 3.700995395859869*^9}},
 CellTags->"AllowFinalRingdown::usage"],

Cell[TextData[ButtonBox["Generator",
 BaseStyle->"Hyperlink",
 ButtonData->"Generator::usage"]], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700577615284093*^9, 3.700577630585182*^9}}],

Cell[TextData[{
 StyleBox["PulseSequence", "Input"],
 " is a ",
 StyleBox["CompiledSequence", "Input"],
 " key storing a list of operations to be performed by ",
 StyleBox["PulseSim", "Input"],
 ". This list should satisfy ",
 StyleBox["PulseSequenceQ", "Input"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700576976216125*^9, 3.700577038239419*^9}},
 CellTags->"PulseSequence::usage"],

Cell[TextData[ButtonBox["StepSize",
 BaseStyle->"Hyperlink",
 ButtonData->"StepSize::link"]], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700577647364106*^9, 3.700577663299608*^9}}],

Cell[TextData[{
 StyleBox["GateSequence", "Input"],
 " is a ",
 StyleBox["CompiledSequence", "Input"],
 " key storing a list of integers corresponding to gates from a given ",
 StyleBox["GateSet", "Input"],
 ". The gate indices are integers between 1 and ",
 StyleBox["Size[", "Input"],
 StyleBox["gateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 ", and should appear in chronological order, that is, the first element of \
sequence is the first gate applied."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{
  3.700576958563342*^9, {3.700577084572669*^9, 3.7005771395216312`*^9}},
 CellTags->"GateSequence::usage"],

Cell[TextData[{
 StyleBox["UndistortedLongPulse", "Input"],
 " is a ",
 StyleBox["CompiledSequence", "Input"],
 " key storing the catenated pulse sequence  before the ",
 StyleBox["DistortionOperator", "Input"],
 " (if any) is applied."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.70057705099502*^9, 3.700577069389894*^9}, {
  3.700577108805126*^9, 3.700577111567223*^9}},
 CellTags->"UndistortedLongPulse::usage"],

Cell[TextData[ButtonBox["GateSet",
 BaseStyle->"Hyperlink",
 ButtonData->"GateSet::usage"]], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700577686901629*^9, 3.700577702536708*^9}}],

Cell[TextData[ButtonBox["NoiseModel",
 BaseStyle->"Hyperlink",
 ButtonData->"NoiseModel::usage"]], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700577691355665*^9, 3.700577715218219*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.700577756251316*^9, 3.700577757030229*^9}}],

Cell[TextData[{
 "Compile gates 12,10,2 of the ",
 StyleBox["$gaussianQubitGateSet", "Input"],
 " under a distortion noise model."
}], "Text",
 CellChangeTimes->{{3.7005778003992023`*^9, 3.700577804357457*^9}, {
   3.7005778450660553`*^9, 3.700577853177885*^9}, {3.7005778862403517`*^9, 
   3.70057793810642*^9}, 3.700578033011095*^9, {3.7005780772848597`*^9, 
   3.700578078642733*^9}, {3.700578328478826*^9, 3.7005783289678183`*^9}, {
   3.70058251610867*^9, 3.7005825170155563`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"nm", "=", 
   RowBox[{"NoiseModel", "[", 
    RowBox[{
     RowBox[{"DistortionOperator", "->", 
      RowBox[{"FastExponentialDistortion", "[", 
       RowBox[{"0.01", ",", "4", ",", "20"}], "]"}]}], ",", 
     RowBox[{"DistortionMultiplier", "\[Rule]", "4"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"compiledSequence", "=", 
   RowBox[{"CompileSequence", "[", 
    RowBox[{"$gaussianQubitGateSet", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "10", ",", "12"}], "}"}], ",", "nm"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.700577779322353*^9, 3.700577792782989*^9}, {
   3.700577854365047*^9, 3.700577882231372*^9}, 3.700578034935267*^9, {
   3.700578207836516*^9, 3.700578210794166*^9}, {3.70057829486683*^9, 
   3.7005783205506563`*^9}, 3.700838547942122*^9, {3.7009954990976057`*^9, 
   3.700995499363253*^9}, 3.7009955736043386`*^9, {3.7009961900532627`*^9, 
   3.7009961953900023`*^9}}],

Cell[BoxData["here"], "Print",
 CellChangeTimes->{3.700996271682104*^9}]
}, Open  ]],

Cell["Plot the result:", "Text",
 CellChangeTimes->{{3.700995528110471*^9, 3.700995530314789*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PlotSequence", "[", 
  RowBox[{"compiledSequence", ",", 
   RowBox[{"ImageSize", "\[Rule]", "300"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", 
    RowBox[{"DistributeOption", "[", 
     RowBox[{"\"\<X\>\"", ",", "\"\<Y\>\""}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7005779423951483`*^9, 3.7005780641978188`*^9}, {
  3.700578106956203*^9, 3.700578149792557*^9}, {3.700578190495635*^9, 
  3.7005782237855883`*^9}, {3.700581972267877*^9, 3.700581988652564*^9}, {
  3.700582035288273*^9, 3.700582048186648*^9}, {3.700582079269347*^9, 
  3.700582095241849*^9}}],

Cell[BoxData[
 TemplateBox[{OverlayBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJx11W1Ik1EUB/AlIhGRfYglIdMilhQxRETW1M0PIRGxLCipUBEriWgSvVjJ
VlRYVKw3slVsqS1bLl/XWrW2ZZZSoRHBkMphYiIRYqFS+dJzz+X2ocv/gSE/
HHqec8//3KWllk0741QqlV/5sJ9TnrH3G0pLjCrw/P977gro39Y9wQNXKqH5
949DH1vUlD9w9BQ0/3tnoI+MaNPnes9D8/93ETo7Zr5Qs+8ydBXVcxU6uG5+
3Krqa9BTVO916Gxf96GQ6wZ0Fb3PLeig5vS3goATeobe9za0szO1ZX95LXQu
9aMOuv8Xe6F6aCv1645kx5e+urcOe1ij+7w84YRb8sD6iUS9fiIcon7elfw1
58ccw/aVkaIyg1JRg+TWQtuujQfTIzPU73vQTgd7PNC5dB73oft7JjcPuhuh
rXReXmhN/JYFq9seSH6T8SlzqFEdCdF5Nknm/XIZi/SsoGbJvF8Jplk67xbJ
vF9rTOass3klQ7J5PXkmF81DK/RoQUCpCNtI89IGbd87/Mczhh2jeWqH1lWr
+3omZfN+aU02mjefZDGPvbVr/T+nsVNoHh9CW5RpSor3Q4dpXrETo/UVOfMe
QRfTPGM3s+NcGICepXnHNrNy1I+hXZQH2SKvo2yck59IFnk1Ul5ki7zalWl7
t+ypZJGHGOUJW7fD3jGeFoS2Ud6we5VqluieQadQHrEtl75XGTNDkkVew5RX
2f/O25u8rcwQhi6mPGNvHXTf7EyNQPO8Yzco0xatx+b7AHty+kPliPY5NN8X
2PnnWOCx+T7BrkliB9IBzfcN9jBrVws230fYWRnseQHN9xV2deS1snGw+T7D
jippL9R3QvN9J1vcFys+soJki/uC70PZ4r44XM4G/qVksY/5vsTuGk9TEovN
9+kr6MUnWcOw+b7F3q10y9ctW9wXfB93SRb9FPex8F/WOwGQ
        "], {{{
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{182, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
               52, 53, 54, 55, 56, 57, 58, 59, 60}, {121, 100, 101, 102, 103, 
              104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
               117, 118, 119, 120}}]}]}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{182, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70,
               69, 68, 67, 66, 65, 64, 63, 62, 61}, {160, 181, 180, 179, 178, 
              177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165,
               164, 163, 162, 161}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.011000000000000001`], 
            AbsoluteThickness[1.6], 
            RGBColor[0.368417, 0.506779, 0.709798]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 182, 61, 62, 63, 64, 
            65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 
            81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 
            97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
             111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 
            124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 
            150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 
            163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 
            176, 177, 178, 179, 180, 181}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.22000000000000017`}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       ImagePadding -> {{40, 40}, {40, 10}}, DisplayFunction -> Identity, 
       AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
       Axes -> {True, True}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
       DisplayFunction :> Identity, Frame -> {{True, False}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> {Automatic, 
         RGBColor[0.368417, 0.506779, 0.709798], Automatic, Automatic}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], ImagePadding -> {{40, 40}, {40, 10}}, 
       ImageSize -> 300, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"X\"", TraditionalForm], 
       PlotRange -> {{0, 0.22000000000000017`}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, {{{}, {}, {
          Hue[0.67, 0.6, 0.6], 
          Directive[
           PointSize[0.007333333333333334], 
           AbsoluteThickness[1.6], 
           RGBColor[0.922526, 0.385626, 0.209179]], 
          LineBox[CompressedData["
1:eJx12Xlcjen7B/DTglBT2lQqp/1kifbSqec2tknjq6yhIcso21izJjs1RErK
NFkmxk6TrXL03EKMtQiZhko1SkyFolJ+57nuZ/74vS7P+cfr/Xp58Wz3fV+f
67KZsXDMj5oymWyxlkwm/Pn/f+XKz8cbH46aQbivu1B0sISLla0xc1XLkkIl
/N/fD5dwpXKN8ZkRFatnSZiK/16kpFfVOrrqnJovZRX7/xZJuESpLBsdn/LT
EgmXK6PhepZJuFCpCtTV7LttuYTVzxOud6WkledvLc87sFrCMlk03E+0pFXW
W+pCsmMkXKjqgPtdL+Fy5f7r8swlkRskLJMFwPPYKOkXLcINbZJwgzIGntdm
SVsPeG7fecMWCctkefA8t0p66iw/9RVtk3QHPO9YCavvd5/wi5OyKgDex88S
Vt/v/Y9jK49sl7D6fuF97ZCwTGatPeGb/lnxks6D97lT0lN9hQvaJekv8L4T
JNygHO0dNzi8Wsoy2QH4HnZLuj4kW31F0ubge0mU9K75r9qON0q7DL6nJAl/
Ug7YZvrs/kcplyvXwfe2R8INygeHhl183y5lmaw3fI/JEi5ULlRfjJn2Xknz
8L1KuVyp/zRjkX+3FAnLZNPge5b2WeF1GqRKuEb5BR6XlGWy0cLlmO6T9AFY
D1IuVNYLn7PlLxIuV3GwXqRcotql/toKbdMkXKgqg/UkaeWAsF35TYpfJVyu
WgfrTdLKB+qrsRiQLmH1+4b1KOUS1cLdb6M5z/0Slsl4WK9Spir9U5aTZ/kd
kHC5ahqsZylT1UT1w7guPyhptt6lXKg6qv7anmZIuVzF9gMpZ6o+thevrHU8
JOESFdsvpFyoGrFdWPBSLlex/UTKVJViJryQ3yT8RsX2GymXqF4JjytTyn+r
2H4k5WKVt7vwy5AwVbL9SspVqm30tnrHkfIbFdvPpFyleqpe7aG+hyVcomL7
3VccHuz4e/V3vFOpcEFf8bGBd3xHhvJsP/yKv3MZV1UwnV8RKXzwR7DNDl2b
bBvBs/0SmyrHhU5zy+JvNinUKxZ7fVx+Po28yrP99HdkckDj153Bf/I9NwkP
DDs4Y2tY8dxCnu232DKvNKeixDd8hPppnb+FnTB80PnWTx95th8fRY5+0xz2
IEVGL6XXHy0Iwg5u3BmQ3qJN2X6NrbroMm1CcTfapa/wQrG/Ufa+0eZmQNl+
fgx5j+vNkzrPDOlEYTmEYP9v8Zp/taaaULbfY3c/rb3g52s96VHhdRZj/2/l
2Cr77haUnQfHkfWqXtV+52VJPwqXE4o9mWv+a9Jwa8rOC+xxXRvLxlnL6Qhh
uy/FrlsVbOivZ0PZeXICeW7piKUxDTY0Rdhup2LXvbCOPnHLlrLzBpuUPY4P
2mtHX60WFgT26l9yA6sn2VN2Hp1Entt8ovqDkQP11hE2bOxw6hfdeN2BsvMK
+/7F5tDvFzjSbclD1DsetsnJcrJYz4my8+wUsrli+aWCI070qa2wYLGbC0aS
M14Kys477G3uUembqYI6CdXcW2yHJ/XdfhviTNl5eBrZwsF4xWTqTFcIx8Ui
7Ngb47LbvfpQdl5inwodlLg3xpneFLa799gX53+50v+BgrLz9AxyasOud2MU
CtpTWK7LsX0Lr4anxTlRdt5i66SNqvwww5FGCJ9bC7bHkTMDTo90oOw8Posc
cV9ZakDs6SXhcUVjR68N94v61o6y8xr7WMSFkqbutlSLnZvI/7wK6pVWJafs
PMdelT61anRKb3qyIEh9ImM3pdR1LVpvRdl5j13D9XZZW2ZKx6pPQ8NN2Dda
W2oaEgwoqwewx1mfihhm24m2CdXYdey7M9P4t4ve86xewP7RKuHIXJ2XXIaF
cCD8gXxPZ/fVTt01CasnsIe5+c778PobElQhLFjsqYM9AwyTTQirN7AtJpxY
4hXZi7w/Kjww7K57udPBq+SE1SPYmgeLV9T3siNp6qdFb2NXdKlefDTdgbB6
BXu0WewsI5mCDPGcmhuom4UcW2BgkDu0D2H1DLZXzgBH/QX9SF2b8EKxdce/
9F622oWwegd7+a7KO5beA0lSvnDgYo/ucz71gb0rYfUQ9qnhWidfd3YjfsLr
LMTmlef4juduhNVL2HcG7dqcfMKdVAqXY3gOWXfEggbXBR6E1VPYhtVaKcGO
nmS7UA6NxT6oc/xTxBNPwuot7K0z+t+vWetF3CHOYZO92iEBVt6E1WPYbnE1
6+6f9yalQjnwFHv0Zbvw1qE+hNVr2J/fxOs9P+xNNgnHsdl55Jqk/fd26noT
Vs9hdwwMtzmzxov0FY7Dydhbt8uDXjR6ElbvYT9oSjtfUeZBHkGcwk6Qm7we
XOpOWD2IrVvbZhJa6UbWCMfBc+zQ6OwtWz66ElYvYse/Mh7q3tOV2AnbsfUF
ZKVGWnbR4IGE1ZPYxodCUjLfupA7wnYXju3pqWH987z+hNWb2Dp+vo99Pvcl
S4Xlegj7VZRtWtH+PoTVo9jZfyXfWDbGmfQSPrdK7N8u1CeOMlUQVq9eRJ4z
68Wh3bWO5JrwuOyxu4b/MnPDHQfC6lnsP/eszJl12Z7Mmy38sD8UTFkan21H
WL2LPcCtvmx8vi0xUofZ+qPYwSXejlElNoTVw9hEHr30c4ucXH4vbMjYWx7O
mfqDo5ywevkScqRyWZk815rMzBUuCLvPlZ0nSogVYfU09tw3379tftaLdN8g
FEzYq+X+b5I3WxBWb2MHBbrJSzlzcm6EcGBgywIn/NtZz4ywehz7XcvZJOda
UzJF6AbUY5es6+8X+8iEsHo9G7nvpZn9Ft8xJlqP1ceZK7bZwtuT/AqNCKvn
sXU7bfkwrMKQnBS24yXYBlZLOn1q70FYvY/9KoF0pw49yFjYTrBTa0amG4Ua
EJYHsF+vaHN4odAnbcJyaMKu2yGfduK8HmF5IQdZtTQrI32MLskQXqc3duxn
s+DHGt0JyxPYLlYz7q+62pUECZezEvs37cG6eQk6hOUN7Kl3f0wPXtCFvBfi
Qi72VsuQy+ahnQnLI9iJgXmNEcGdSJpQrrdh5+d+Wpo4XpuwvJKLXDcgafGy
vzXJEKFc9seOHtTyNDdKg7A8g13TOrfTermM1Anlagz235dDTR9daudY3sEm
VvL0jdrvuCSh3KPYqbmTvfq4lXIsD2EnJHY9VtF6n/cTyhXNy8ih84ZX6+q+
4VlewtbdtNLDS6+NrxSO2yHY+X9Nn/JDnpaYp7A9cq4bxRzrSrcLx8UW7ACD
WxsKvtMX8xb2kx+HjY4MMaTuwnZXgB12M+n6xBfGYh7D3j80wGlhUE9aKixX
HRXyyXtGuspfzMW8hp2Q3Zrhc7cX3SS8zUDsC1r+j/v8ayXmOeyzvznnRTf1
pn2Fx7Ude0jYv7OvNMrFvIftciJqf+bfNvTRXeGHbTbj+dmAPFsxD2KHLrE6
fHePHV2TJBSkV5C97BweVYbbi3kRuzze+mVnOwdqN1nYkL/iFv2eWaUOYp7E
fmk859iU7Y70DowjsMc2ntFZ5uYk5k3sSOUKl9lFTnSpUI4+xE7gy0tSIhVi
HsW+rXGhcM4nBe0llFPGecgDc8McfTY4i3kV+4tHZoD5Xwp6TSgHJmDvte9U
Kff7L89iz9YcElyb4UTnwTgAu71fSU4P4//yLvZ8xfenQz87UCNhO36G3fvv
F92GvrMX8zD2viOPY5yb7OhlYTux4JG1zLtpR2jbiXkZ29jcPXpGb1s6U1gO
Ydi6T5Sj4obZiHkaO3/HIq3g5XLaHdrx2AnV0xpmzugt5m3szRNMW6fXWdFz
wuWUYc+fOPlw0BpLMY9TZDLi5xaFVS96Gs5z7Jw1G5+aF5qLeR1b71x0t8Ak
M6oB5z32+fdRx5eF9xTzPHaX2402KUpTOh7qAWxy6Or+JkcTMe9jd2hNi3hh
bUyPQ72AveO600/H7IzEfgC2ZaxjVZaHIW2HegK7/ifbh7NCeoj9AuycD+cu
9ltlQEOg3sD2u0DGyCbqi/0E7NXN6zQuPdCjR6AewZZnLNDYNEWXsn4DdlhM
ov7ylm60BeoV7PAN7rGn1ecJ60dcRe4c4/84JFKHjoJ6BrvDcmhVsncXyvoV
2GblfhkXTTrTQ1DvYP9PnrapVaMTZf0M7ACzRK0/2rRoE9RD2Nnv9PzdNLUo
63dga8YGrH5hrEkDoV7C7vdl0gMrdw3K+iHYpCwsZ1qYjKZDPYWdkGGwyVP+
hWf9EmyDywUjU9Pa+UYoZ7DpDr3O9c6fedZPwY5taTMcdbuVHwb1GLZBkPHk
ojUtPOu3YKeu6Z93xP8Tvw/qNeyS1TOTOr75yLN+TD4yybpoaVHfxL+Feg5b
Ma6LAXn+gWf9GuxyAyv51ZL3/GCo97BDzy7c0Vz+jmf9HOzsrMiLg5sa+WSo
B7EVOc8udzdp5Fm/B7shcbbpDa6Br4V6EXv9xpHrbtf+y7N+EHaC/pJzxRFv
eX+oJ7FlI6dn//Gpjmf9Iuzw11Vxy9Ne87thO8HOHJTzg8foWp71k7BLxiZt
czSq4auhHsUuPPzDxY3//MOzfhN2tmX78thb1bwv1KvXkAuvdcR4nKviWT8K
O3bt790iTlby8VDPYpcUxPmtyHzJs34VdnBk+sLrVyv4Cqh3sTPpLn//P8p5
1s/Clh8aOEQjrIz3hHoYm/bRGVv003Oe9buw5SFazWf2lfJxUC9jH9z6KH1O
7jOe9cOwyeASs83vnvLPoZ7Grnk4Z/df5AnP+mXYOrs2Lph4uJh3hXobmxp1
T3/X6xHP+mnYqe5FDZm/F/FboB7HTph8ZVXGkEKe9duwZVV5Zfcq7/HPoF6/
jix/9HLw8Ol3eNaPw06YW3XHuOMW3x/qeez18zS4rOwCnvXrsMOXD118Ytd1
fgPU+9jB2oHT0jbk86yfh91QkB7oEU/5x5AHsA8+iMydM+MKz/p92ETHwOPb
qBzeGfICtnzzje/lORd41g/EXpSv+Higbxa/FvIEtszlU0fTntPiPBm7cC/1
jtW7xBVB3sBeOapctm3rPY71E7E3nzWecWvMU84B8gh2sb5zwrwVZRzrN2K7
3brc1236Z24V5JUbyE3r1pqU/NNF7EdiByaOL3q924DcgzyDrTvS5NGVZmOx
X4mdB/NeC2IDeQebzXvlYj8Tm817bUkU5CFsNu91EPud2F1h3utE/oS8hB0C
894+Yj8U2wDmvf2IFeQp7Ckw73UR+6XYE2DeO5AshryF/Qbmva5iPxWbzXtd
yQ3IY9ivYd7rJvZbC5DZvNedmENew46Gea+H2I/Fng/zXk+yAPIcNpv3eor9
WuwHMO/1Ilch72GbwrzXW+znYlvAvNebmEAexGbzXh+x34u9Fea9PmQO5EVs
R5j3+or9YGw27/UlVyBPYsfBvHeQ2C/GPgPzXl/SA/Im9gWY9/qI/WRsNu/1
IT9CHsX2gXmvt9hvvon8870YA9VML5IDeRU7IDTokev3nmI/Gtt13M1Lgd96
ED3Is9i/NmZvnTTMXexXf8XZphP4cW5kOuRdbLfP020qFrqK/WzsC1P0I/rt
HUguQB7Gnjg/OrnvzgFivxt7tl7nla7aLqQr5GVsXeueQ36K7yf2w7HPtt01
eKfoS36API3N3Y46U/LYWeyXYxtA3lWQPyBvY2dB3nUS++nYLO86kk6Qx28h
s7zrIPbbsdsh79qTSZDHseMh79qJ/XhslndtyWnI49gNkHdtxH49tgryrpxo
nBAuCFsJebe32M/HXgt514qMhzyObQN511Ls92NPh7xrQY5DHseeDXnXXJwH
YOtA3jUj7VAOYGtYCXm3pzgvwJZD3jUlIZDHsVneNRHnCdjDIe8akSOQx/9E
vgR510icN2DrQt41JC2Qx7EHQt7tIc4jsEdC3jUgoyCPY++HvKsvziuw7SHv
6pFDkMexCyDv6orzDOxkyLvdSBPkcWw55N2u4rwD+yDkXR0SCHkcm+Xd/+Yh
2GMg73Yi6ZDHsT0h72qL8xLsGsi7WqQR8jg2y7ua4jwF+ybkXQ0yDPL4beTe
kHc1xHkLduckIe/KyD7I49jRkHc7ODaPwU6FvNvOvYU8jq0DebeNY/Ma7PmQ
d1u5wZDHsY9B3m3h2DwHuwby7icuGfI49l3Iu83ivAe7GPJuE1cLefwrhrz7
QZwHYWdC3n3P+UMex74FefedOC/CjoS828jthjyOvQfybgPH5kl3kBWQd+u5
asjj2KmQd99ybN6E7QN5t47zhTyOHQp5t5Zj8yhsH8i7r7h4yOPYqZB3/+HY
vAq7cKeQd6u4Csjj2Isg71ZybJ71FUPereA8IY9jD4W8W86xeRd2eaWQd59z
cZDHv+KHQt4t5dg8DHsR5N0S7jnkcWwZ5N0nHJuXYTdECXm3mHOFPI4dqyXk
3Yccm6fdRVZA3i3ktkAexz54X8i79zg2b8OWib//A/QNuyQ=
           
           "]]}}}, {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.22000000000000017`}, {-27.787697498262375`, 
         27.787697498262375`}}, PlotRangeClipping -> True, 
       ImagePadding -> {{40, 40}, {40, 10}}, DisplayFunction -> Identity, 
       AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
       Axes -> {True, True}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
       DisplayFunction :> Identity, Frame -> {{False, True}, {False, False}}, 
       FrameLabel -> {{None, None}, {None, None}}, 
       FrameStyle -> {Automatic, Automatic, Automatic, 
         RGBColor[0.922526, 0.385626, 0.209179]}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], ImagePadding -> {{40, 40}, {40, 10}}, 
       ImageSize -> 300, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"X\"", TraditionalForm], 
       PlotRange -> {{0, 0.22000000000000017`}, {-27.787697498262375`, 
         27.787697498262375`}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}],OverlayBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJx11G1Ik1EUB/AlEhHR+hBLQqZFmBQxRETG1Gd9CImIZUFJhYpYSUST6MVq
bEXFior1RraKLV3LlkunTVu1NrOVUqERwZDKYWIiEWGho/Kl557L04cu/wfG
+LGxnXvu+Z8lleaNO1JUKlW7/GLvk76xd+srKyQVeP7/nLsG+rd1d3j/5Vpo
/v1j0EcXNhcPHjkJzX/vNPTh0aycOf5z0Pz/LkAXJEzn6/ZegrZQPVcEOz/3
N7xxOqTw2nkpK+1XBQ+um1Dr9RPSJNV7TfCXwh+zDNtWGAuCPQcj7uuCW0tt
OzccyDFa6Dw3ocPaU19LQi7oaTrvLWhXLDOwr7oeuoj60QA98IsdyCP4de7H
vOEmjdFK/botWOmnVvdp2ezjXugI9fMOdFmVQa6oEXqa+n0X2uVkjw+6iO7j
HvRAb3LTkLcJ2kr35YfWpm6ev6rtPnSE7rMZukzPCmqBnqH7DkCb8s+srhjG
dtM8tEJ/LwnJFWFLNC9t0I49I398Y9gJmqcH0Dq7pr83iW2jeQsKVvLaV7+m
4+eUaCWvGTSP7YKVvJrlaUpL7RCs5CFK84qtjntqCuc+hC6necZuYde5IAQ9
Q/OObWLlaB4JVvLqpjyI/nffbJzTH0NLlBdshzxtb5c+gU5QnrB12x1d49lh
aBvlDbtPrmax7il0BuUR23zxm0XKi0BHKa/Yan/61ipDFLqc8oy9Zch7I5bZ
Cc3zjt0oT1vcg833AXZy6n3taNYzaL4vsIvPssBj832CXZfGLqQLmu8b7BHW
rgA230fY+bnseQ7N9xW2vfOVvHGw+T7DjstpL9XHoPm+w17+gRWEzfch9qFq
NvAvoPm+xO4ez5YTi8336UvoRSdYw7D5vsXeJXcr2IPN93E39F9h118q
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{20, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 
              29, 28, 27, 26, 25, 24, 23, 22, 21}, {80, 101, 100, 99, 98, 97, 
              96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 
              81}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.011000000000000001`], 
            AbsoluteThickness[1.6], 
            RGBColor[0.368417, 0.506779, 0.709798]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 
            66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 
            82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 
            98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 
            111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 
            124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 
            150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 
            163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 
            176, 177, 178, 179, 180, 181}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.22000000000000017`}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       ImagePadding -> {{40, 40}, {40, 10}}, DisplayFunction -> Identity, 
       AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
       Axes -> {True, True}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
       DisplayFunction :> Identity, Frame -> {{True, False}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> {Automatic, 
         RGBColor[0.368417, 0.506779, 0.709798], Automatic, Automatic}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], ImagePadding -> {{40, 40}, {40, 10}}, 
       ImageSize -> 300, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"Y\"", TraditionalForm], 
       PlotRange -> {{0, 0.22000000000000017`}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, {{{}, {}, {
          Hue[0.67, 0.6, 0.6], 
          Directive[
           PointSize[0.007333333333333334], 
           AbsoluteThickness[1.6], 
           RGBColor[0.922526, 0.385626, 0.209179]], 
          LineBox[CompressedData["
1:eJx12nlYjekbwPE3NTTRlGxNkoRkjFGWMXjzPKYxpDEYW9Ioe/Zl7JJ9aSwN
WScRya6JSHJwIsnaiZCxlJGx/xKKZPmd57mf88dct7s/Zq7Pdc01Tuec93nv
7/2qN2jcL0MraJo2wVrTxL//+2M0vNtVfLnrIM4+7Tzl7oQ17W3ESMOk6EDC
lv8+lLDJMLN6Yqe7M4aQhv9fGOE8w/RHnj62e0cTNqk/bzxho67nd1u+buxE
yoZw+XomES4wGPyrVGiyeAphk/5Ovt5phI0G/WDWlOObZ1DWw+XvE07Y/Oe5
LXzSIzWCsNHwQf6+cwhr2qYM96SJYXNJt5fvxzzCJsOdMvELzSds1CPk+7WA
tFuz2w0qzl1I+rh8PxcRTjIMGNLO/IoWEzbqH+T7vYSwSd+0QfxEEjbq7eXn
8TthTbtz6XXPewlLCSfpEfLzWkbY/Pva9Pmi6YHlhLP04/LzXEHY/Pu2ES8o
inCe/lF+3n8QNundWkd2CL1POVffLL8PKwln6UU9Us2viPItncnvyyrCJj1q
9IPyXcWUU/V8+X2KJhxnaLa45o1Lrylf1mfL79tqbO/untvvd2bZWzqmvHz/
Ce/2Pt+mSyCrK7+Pa7C7fdOrMHMgG2d+Mc42a7Htt5wK8hjOTsjvK/ZDvVdg
SPMDzOF6/Hhfu3XIkyJPnjSGpbMQ+X3G9tpstXFF97PsL/FxOq5H/ip+UXDu
SBP7KN8u7HetYhrlrHrKuomXU3MD8uof2x58++Y12yyvB+xFT0uDs9dpvEh8
nV3/RO5WvKJ9bJkNZ/J6wTakfBPSJ9eOR5m/bSaPGOQqet3T5c0deb68nrBX
+5zZY3vDiTcLjjpZ4rUR+ecJM/9nPaAGny2vN2y7fTZjfj9Vi2ebX41Ls1jk
7tN6Fjao7MLryusRu2rhg0edv3Xl41Y+C2etNiEHs9K/+/3oxk/I6xW7z+fF
+b3c3LnDXtegIe02Iz+d3t3J174eD5HXM/bIm51+i3hej/c1vxkZ7nHIj++4
he/O8uBwvWN/n391ecDa+nyH+dt2PR47/M80//v9GnA4D7BHl+6+/6paQ/76
fe60R55bkEON7cKLMxpyOC+ws1NKA38a48k7LRUXPHbNPQV8gn0jDucJtovX
lMOZCY34OmfxgWxFfp3ZhSd+68XhvMFe1GJy7AKjF38g3q4kbM9rRXZb/Rpz
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
           
           "]]}}}, {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.22000000000000017`}, {-27.787697498262375`, 
         27.787697498262375`}}, PlotRangeClipping -> True, 
       ImagePadding -> {{40, 40}, {40, 10}}, DisplayFunction -> Identity, 
       AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
       Axes -> {True, True}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
       DisplayFunction :> Identity, Frame -> {{False, True}, {False, False}}, 
       FrameLabel -> {{None, None}, {None, None}}, 
       FrameStyle -> {Automatic, Automatic, Automatic, 
         RGBColor[0.922526, 0.385626, 0.209179]}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], ImagePadding -> {{40, 40}, {40, 10}}, 
       ImageSize -> 300, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"Y\"", TraditionalForm], 
       PlotRange -> {{0, 0.22000000000000017`}, {-27.787697498262375`, 
         27.787697498262375`}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}]},
  "RowDefault"]], "Output",
 CellChangeTimes->{{3.7005779525780163`*^9, 3.7005779790979443`*^9}, {
   3.7005780093960114`*^9, 3.700578064618286*^9}, {3.700578122928776*^9, 
   3.7005781547555656`*^9}, {3.7005781924628572`*^9, 
   3.7005782246326427`*^9}, {3.700578296941077*^9, 3.7005783228775167`*^9}, {
   3.700582032619801*^9, 3.700582096328006*^9}, 3.700584228457716*^9, 
   3.700838551479988*^9, 3.7009955041906357`*^9, 3.700995576005937*^9, 
   3.70099568871288*^9, 3.7009957293701563`*^9, {3.700996209962825*^9, 
   3.700996214041483*^9}, 3.7009962728861513`*^9}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["CompileGateNoise", "Subsection",
 CellChangeTimes->{{3.700661393365766*^9, 3.700661405148055*^9}, {
  3.7008261217577677`*^9, 3.700826121834498*^9}}],

Cell["CompileGateNoise[gs_GateSet, nm_NoiseModel,depth] ", "Text",
 CellChangeTimes->{{3.700665244376052*^9, 3.7006652652441387`*^9}, {
  3.700665493951645*^9, 3.7006654956931868`*^9}},
 CellTags->"CompileGateNoise::usage"],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.700823470558799*^9, 3.700823471265133*^9}}],

Cell[TextData[{
 "Compile a distortion noise model into a depth 2 ",
 StyleBox["GateNoiseGateSet", "Input"],
 " object."
}], "Text",
 CellChangeTimes->{{3.700915626889331*^9, 3.700915651884355*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"nm", "=", 
   RowBox[{"NoiseModel", "[", 
    RowBox[{"DistortionOperator", "\[Rule]", 
     RowBox[{"FastExponentialDistortion", "[", 
      RowBox[{"0.001", ",", "1", ",", "20"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gs", "=", 
   RowBox[{"CompileGateNoise", "[", 
    RowBox[{"$gaussianQubitGateSet", ",", "nm", ",", "2"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.700823472528864*^9, 3.7008234758473673`*^9}, {
   3.700828162657674*^9, 3.700828171878953*^9}, {3.700828229754594*^9, 
   3.700828241569491*^9}, {3.700832633701305*^9, 3.70083267759446*^9}, {
   3.700832717057557*^9, 3.700832723357191*^9}, 3.700838103579818*^9, {
   3.700909826566321*^9, 3.700909854673307*^9}, {3.700909914456113*^9, 
   3.7009099218657722`*^9}, {3.7009101345252028`*^9, 
   3.7009101867619667`*^9}, {3.7009129381866217`*^9, 3.700912942660808*^9}, 
   3.700913339333932*^9, {3.700913791387591*^9, 3.7009138117209673`*^9}, {
   3.700915621240292*^9, 3.700915621301545*^9}}],

Cell["\<\
Check the average gate fidelity with the ideal unitary when a gate is \
preceded with gate #7\
\>", "Text",
 CellChangeTimes->{{3.700915666889501*^9, 3.700915718497623*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Outer", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"AverageGateFidelity", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"GateChannel", "[", "gs", "]"}], "[", 
         RowBox[{"7", ",", "#1"}], "]"}], ",", 
        RowBox[{"Unitary", "[", 
         RowBox[{
          RowBox[{"GateUnitary", "[", "$gaussianQubitGateSet", "]"}], "[", 
          "#2", "]"}], "]"}]}], "]"}], "&"}], ",", 
     RowBox[{"Range", "[", "12", "]"}], ",", 
     RowBox[{"Range", "[", "12", "]"}]}], "]"}], "//", "Chop"}], "//", 
  "ArrayPlot"}]], "Input",
 CellChangeTimes->{{3.700832737573015*^9, 3.70083274355943*^9}, {
   3.700837800963561*^9, 3.700837819645132*^9}, {3.700837963773767*^9, 
   3.700838090477025*^9}, 3.700838518411509*^9, {3.700838567496525*^9, 
   3.700838610506982*^9}, {3.7008386435148983`*^9, 3.700838716009123*^9}, {
   3.700838748186592*^9, 3.7008388530477657`*^9}, {3.7008389482992153`*^9, 
   3.7008390277341146`*^9}, {3.700839304942461*^9, 3.700839305068981*^9}, {
   3.700910040998983*^9, 3.700910041340233*^9}, {3.700910197848524*^9, 
   3.700910227583064*^9}, {3.700913377587985*^9, 3.700913381834599*^9}, {
   3.700996899631868*^9, 3.7009969004172792`*^9}, {3.700996956123706*^9, 
   3.7009969603355217`*^9}, {3.700997011357463*^9, 3.7009970116812477`*^9}, {
   3.7009971995321608`*^9, 3.700997200421273*^9}}],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmViYGDggeJLGZP1s0Ke2otsnS+dqfzAPiwUBJ7aX5t64ITuzvv2
N6A0TB4mLgrlw2iYOph+hoQJtjtSZOF8ZgYQQJj/4z8I3IeLo/PRxWE0AxTA
zJmxd6fnDsEH9lWywWC+nvKDVY137tu35XjJ7weKW0DVtWR8jJUC0ivSt5SD
5HmmHWjuB9KrRX4ngfQzMGQLba7+a2eyudsCpC/g95QAkLz1Eo4bcUD/2cl9
c84B0iciVk4E0UqrfMDmfmu3WeME9Lff1rgGNSBdonggBhSexiGwcGDfIxwv
a6/svEc1HqjvmNBteXWgOpvPB3hA+joenk9mBvrz0YII1Z9A/7WvCc4F8der
Q/yTpxCQCuIvyr2cDaKDYOELBAW5G21h4cDhnGAB0j9DIVIDRIccjjcF0TDz
YebAzIfpg9kL0w8zF2YPzB0w+9HNP7LiwPZVSOF8wfMt31xguMm+unoBJP7N
EKKfoeGyV77fX7sdgmbLVwHlDyVJ35kDpDdHN+ZuBKoze1yxAxQ//L3T2kD8
JV4pJSB1CkkTX4DUud2x7QbJF6+fFQOKr68JaZ6QeEu4zJP6124f1J1r1rzQ
B8WbVVQVP8gdi6RfTAOZ5wJ1X9Xei2Eg+ZMHNjeDxBP691abAOOBT7r6XSow
fr7ErcyTBPIZEqYWp2TJ2v8ou3ROAsi3WztZ2hRIG0HjtanSigkUz8unQtLB
rUuBMsVA/XuOGmSBaLnDsxeAzJtdbwSWLzhVnxitDHLv9v5jwHxx/qOyZxnI
vqsn9ngAzY022P8QxNeaIvMLpG7bGZZvnqB0pV7VLAikc0x27hEC0ps3OoPz
69cAiDtg4QMLB1j4wPwNCzeY/2HhAgsnWDjCwg89fBhQACLdwPik0jD9MBoA
mjkB3w==
   "], {{0, 0}, {12, 12}}, {0, 1.}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{{3.700832740104272*^9, 3.7008327439531927`*^9}, {
   3.7008378019275208`*^9, 3.700837820469399*^9}, {3.70083795760534*^9, 
   3.700837990074791*^9}, {3.700838022001842*^9, 3.700838115735858*^9}, {
   3.700838518598899*^9, 3.700838533955752*^9}, {3.700838568000411*^9, 
   3.700838613319701*^9}, {3.700838670070609*^9, 3.70083871618423*^9}, {
   3.700838768018549*^9, 3.700838853290596*^9}, {3.7008389497610617`*^9, 
   3.700839028454103*^9}, 3.700910043979249*^9, {3.70091014347775*^9, 
   3.700910227956628*^9}, 3.7009133828456917`*^9, 3.7009138164695177`*^9, 
   3.7009140098721113`*^9, 3.7009155427933407`*^9, {3.700996890220024*^9, 
   3.700996901159049*^9}, 3.700996960838788*^9, 3.700997012043571*^9, {
   3.700997194204596*^9, 3.700997200802184*^9}, 3.700998251860931*^9}]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Simulators", "Section",
 CellChangeTimes->{{3.700582783372263*^9, 3.70058278662013*^9}, {
  3.700661604885981*^9, 3.700661606346571*^9}},
 CellTags->"SimulateSequence::usage"],

Cell[TextData[{
 StyleBox["SimulateSequence[", "Input"],
 StyleBox["seq_CompiledSequence", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["OptionsPattern[]", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " simulates the given the ",
 StyleBox["CompiledSequence", "Input"],
 " ",
 StyleBox["seq", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " generated by ",
 StyleBox["CompileSequence ", "Input"],
 "using ",
 StyleBox["PulseSim", "Input"],
 " and its provided options. The output is the output of ",
 StyleBox["PulseSim", "Input"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700661451880248*^9, 3.70066157933114*^9}, {
   3.700664709830126*^9, 3.7006647206936893`*^9}, 3.7088674940928087`*^9}],

Cell[TextData[{
 StyleBox["SimulateProtocol[", "Input"],
 StyleBox["gs_GateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["ns_NoiseModel", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["protocol_Protocol,OptionsPattern[]", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " simulates the given ",
 StyleBox["protocol", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " with the given gate set ",
 StyleBox["gs", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " under the noise model ",
 StyleBox["ns", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 ". The output is an array of results whose shape depends on the ",
 StyleBox["protocol", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["; if the properties ",
  FontWeight->"Plain"],
 StyleBox["ExperimentTypes", "Input",
  FontWeight->"Plain"],
 StyleBox[", ",
  FontWeight->"Plain"],
 StyleBox["NumSequenceDraws", "Input",
  FontWeight->"Plain"],
 StyleBox[", ",
  FontWeight->"Plain"],
 StyleBox["NumRepetitions", "Input",
  FontWeight->"Plain"],
 StyleBox[" are all constant, the output will be an array with dimensions ",
  FontWeight->"Plain"],
 StyleBox["{numSeqLengths, numExpTypes, numSeqDraws, numReps}", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[". Otherwise, the output will be ragged, but with the same index \
types.\n\n",
  FontWeight->"Plain"],
 StyleBox["Additional Options\n",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 StyleBox["SimulationExportName", "Input",
  FontWeight->"Plain"]
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700664596625371*^9, 3.7006646971406*^9}, {
  3.700664742631546*^9, 3.700664745024555*^9}, {3.7008223463683434`*^9, 
  3.7008224482606373`*^9}, {3.708867501560278*^9, 3.708867504309717*^9}, {
  3.70886776082659*^9, 3.7088677836718397`*^9}},
 CellTags->"SimulateProtocol::usage"],

Cell[TextData[{
 StyleBox["ExportSimulation[", "Input"],
 StyleBox["fileName_,gs_GateSet", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["protocol_Protocol,data", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " exports the data from a simulation of the protocol and ",
 StyleBox["GateSet", "Input"],
 " ",
 StyleBox["gs", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 ". It is exported in the HDF5 format with a file extension \
\[OpenCurlyDoubleQuote].h5\[CloseCurlyDoubleQuote] appended to the given ",
 StyleBox["fileName", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 ". This function is called by ",
 StyleBox["SimulateProtocol", "Input"],
 " when a ",
 StyleBox["SimulationExportName", "Input"],
 " is provided. The following things are saved in the \
\[OpenCurlyDoubleQuote]Datasets\[CloseCurlyDoubleQuote] group:\n\n\
\[OpenCurlyDoubleQuote]SurvivalData\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]ProtocolName\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]SequenceLengths\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]ExperimentTypes\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]GateSetName\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Size\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Dimension\[CloseCurlyDoubleQuote]\n\nThe survival data \
is generally a 4-dimensional ragged structure equal to the output of ",
 StyleBox["SimulateProtocol", "Input"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.700664596625371*^9, 3.7006646971406*^9}, {
  3.700664742631546*^9, 3.700664745024555*^9}, {3.7008223463683434`*^9, 
  3.7008224482606373`*^9}, {3.708867501560278*^9, 3.708867504309717*^9}, {
  3.70886776082659*^9, 3.7088677836718397`*^9}, {3.708869485912631*^9, 
  3.708869695689084*^9}, {3.7088697309255333`*^9, 3.70886973137033*^9}},
 CellTags->"ExportSimulation::usage"],

Cell[CellGroupData[{

Cell["Options", "Subsection",
 CellChangeTimes->{{3.700993863071014*^9, 3.700993864024479*^9}}],

Cell[TextData[{
 StyleBox["PulseSubset", "Input"],
 " is an option for ",
 StyleBox["SimulateSequence", "Input"],
 " indexing a subset of the provided ",
 StyleBox["PulseQ", "Input"],
 " objects to be simulated."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.7009938677792463`*^9, 3.700993927899466*^9}},
 CellTags->"PulseSubset::usage"],

Cell[TextData[{
 StyleBox["SimulationExportName", "Input"],
 " is an option for ",
 StyleBox["SimulateProtocol", "Input"],
 " specifying a file name (without file extension) to save the data to. The \
extension \[OpenCurlyDoubleQuote].h5\[CloseCurlyDoubleQuote] is added \
automatically. See ",
 StyleBox["ExportSimulation", "Input"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.7009938677792463`*^9, 3.700993927899466*^9}, {
  3.7088675705498466`*^9, 3.708867657743101*^9}, {3.7088677102530603`*^9, 
  3.708867720861382*^9}, {3.70886806227707*^9, 3.708868064429893*^9}, {
  3.708869728082992*^9, 3.708869759265551*^9}},
 CellTags->"SimulationExportName::usage"]
}, Closed]],

Cell[CellGroupData[{

Cell["Example: SimulateSequence", "Subsection",
 CellChangeTimes->{{3.700994064817618*^9, 3.700994070518118*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"nm", "=", 
   RowBox[{"NoiseModel", "[", 
    RowBox[{"DistortionOperator", "->", 
     RowBox[{"FastExponentialDistortion", "[", 
      RowBox[{"0.01", ",", "1", ",", "20"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"compiledSequence", "=", 
   RowBox[{"CompileSequence", "[", 
    RowBox[{"$gaussianQubitGateSet", ",", 
     RowBox[{"{", 
      RowBox[{"12", ",", "10", ",", "2"}], "}"}], ",", "nm"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"PlotSequence", "[", "compiledSequence", "]"}]}], "Input",
 CellChangeTimes->{{3.7009941454398737`*^9, 3.7009941804979267`*^9}}],

Cell[BoxData[
 TemplateBox[{OverlayBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJx11GtIk2EUB/AlIhGRfYglIdMilhQxRESWl80PIRGxLCipUBEriWgSXazG
VlRYVKwb2Sq2dC1bLp06bdXalq2UCo0IhlQOExOJEAsdlZfe5zy8fujh/8KQ
Hw497zn/c5ZXGLfsTlAoFB3Sh/2cco9/2FRRrlOA5//fc1dD/zHvCxy6VgPN
v38S+sSS5qLB42eg+d87B31sVJ0533MRmv+/y9B5McOlugNXoU1Uz3XowIaF
CWtqb0BPUb03ofN8PUeCjlvQJnqfO9AB1dnvxX479Ay9711oeyTde7CqHrqA
+tEAPfCbvZAT2kz9uifY9rW/4Z3NoVNpvqxMOuUSPLhxMlmrTdIHqZ/3BX/L
/zkvd+c6fWllrlRRo+DWEsuezYcL9TPU7wfQdht73NAFNI+H0AO98a1DriZo
M83LA61K3LZobdsjwW+zPmcPN6n1QZpns2C5X6VaVlCLYLlfszRvr2C5X4ac
84Xlw6LlehyUh1bosWK/VBG2jvLSBm3dP/LXPY4dozy1Q2tqlf29cdFyvyyU
N59gOY999es7f01jp1EeO6CNUppSEjuhQ5RX7OSoszp/wWPoMsozdgsb52I/
9CzlHdvAylE+gXbQPojmebOGxlicU58K5nmbDOloX0TzvK0OW6W0vV/xTDCf
Z2Y4RvuErdll7ZrICEBbaN+w+6RqlmmeQ6fRPmIbr/ww6bKDgnnelOEQ7avo
uXl7UndU5oagy2ifsbcPuW5H0sPQfN+xG6W0RZ3Y/B5gx6c/1oyqX0Dze4Fd
dIEtPDa/J9h1KWwgXdD83mCPsHZ5sfk9ws7JYs9LaH6vsGvDb6SLg83vGXZU
2vYSbQSa3zvR8r6u+sQKEi3vK7+HouV9PVrFAv9K8Ny+0L3E7p7IkDYWm9/T
19BLT7OGYfN7i71X6pavR7S8r/wedwuW+/kPKsX9Pg==
        "], {{{
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{121, 100, 101, 102, 103, 104, 105, 106, 107, 108, 
              109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120}, {
              181, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
               172, 173, 174, 175, 176, 177, 178, 179, 180}}]}]}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{40, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 
              69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 
              53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 
              41}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.011000000000000001`], 
            AbsoluteThickness[1.6], 
            RGBColor[0.368417, 0.506779, 0.709798]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 
            66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 
            82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 
            98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 
            111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 
            124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 
            150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 
            163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 
            176, 177, 178, 179, 180, 181}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.22000000000000017`}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       ImagePadding -> {{40, 40}, {40, 10}}, DisplayFunction -> Identity, 
       AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
       Axes -> {True, True}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
       DisplayFunction :> Identity, Frame -> {{True, False}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> {Automatic, 
         RGBColor[0.368417, 0.506779, 0.709798], Automatic, Automatic}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], ImagePadding -> {{40, 40}, {40, 10}}, 
       ImageSize -> 400, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, 
       PlotRange -> {{0, 0.22000000000000017`}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, {{{}, {}, {
          Hue[0.67, 0.6, 0.6], 
          Directive[
           PointSize[0.009166666666666668], 
           AbsoluteThickness[1.6], 
           RGBColor[0.922526, 0.385626, 0.209179]], 
          LineBox[CompressedData["
1:eJx91nswlWkcB3BrWswyiWgxckSd07I6Smet63lUxrRqzbGmq8XYhLZSW7uU
UtYtU63LFlY2Gwklt+QW3genXLbVFrFWUYxkbGOPLjbk7Ps+z7z/7G/efWfO
mM+MOX7v8/y+v59lwRG+IZoaGhqP2Q/387/PXLHqwebgIPn/+4CgZ2L2NBz+
MUrQ9PdPCjraqNTr6dF4QdPvOyXoI+Pi1TolZwRN/16qoF2HfM5m7k8X9DFS
zzlBN2zU07RNyhD0HKk3S9CuVe3fNeVmC/oYeZ8cQTdYJEwoai8Kep687y+C
vqi0LP8m7JKg3cl55Al68C33QvmCjiHndRk4X1GLd5tFyi2kj5drxRYAG97v
iZGGPJE3kfO8AtwZmesROmWEAna5sBUVAiuNAvdd27ICzZPzLgLuvRYapnJZ
hS7+xD3FwJW6p7bKWtYgd3IfV4El2alZ3zbK0GDX9BcjBdeA/S94uu9c9SmK
IfdVAhzmlpAxY+eMLBZsWWhXeR24169hMC7WETWR+ywFvtzjbWuLHFCAE1dQ
GfBh8csbDzbYIzW573LgxHUJG42t1yAfx2SPoFFo5zBZg52LDOWSfqgAfo4y
9CpaHdGkopatCFrc3m5zpdcJyUm/VAKndd5x8092QSl7x2aLVdBTRVnpni9c
0RDppxvAk6HPB64uckfSpCX9XdPQ2Z5Py0fLnNEJ0m9VwFoV3urofhm6d8mz
+uU76KiH9q0/jKxGItKPN4Frd3Yf7P/MDkWw3WSyoBr4+rLdw8mzEsSQfoVe
62D/OjvPGun35R9w+6AGWKftyIJNBpYokPQzdKN1xV9KsRkq465zUS1w+D6n
4v0OxkhN+h1a/KxlcfcKA+TDlbOkDnjm0azsQpEuyiV5gC6So9zbDlpokmtn
83rgnKVGyfOH1HI5yQt0smLp6X40waSw3fa71S3gM2l+xyfd9PEQyRN0sCp1
KOesKZb6p7S8XtkAnNqY8raz3xKfIHmDNg+/vPeJx3J8j63GTNoI3K3+PD3K
UIJFJI/QwaI9mQeDPsIRaS+OyWVNwCJ50k3LV2LMkLxCnzwe/fXAqBXWLzHf
scuFAU59L0szQyLCgSTP0OcfqWPza0zx1pGCC0pLDFx6S1e3XGSMad6hZx4q
yw94G+BCttv68qF/U2lublXoYToPoIub/ziXLdXG0+96osbFzcDbPtmkKJ7V
xHReQK/1M7X93ljNeJ3mAg9tlihJW3joLUPnCTSSB3Yv7n3FZJpwF9ICHFKS
t/1jfRVD5w104jnl3OLJCWaMO65y6Blpd33X4DOGziPozvEd1r51w4yjA/e0
AlsNxw8VJA4ydF5B5y1qbfKt62OScCc7caDja8MZm6b7DJ1n0C34qxFRRQfT
x6Z9m5MS+E11njikpJmh8w464KpJyva/qxnJAFcQ9LrWR+OG67sZOg+hv9z1
Z0W99vs4Moxr+NvAdN8aYzovoem+tcBtr1eyiYWm+9YK03l6B5ju2xX4wzju
wKDpvl2J6byFpvvWBoeyp1XVDk33rQTTedwGLOoYiq9zt8Y1P08W3vGG7lP/
E+Ebx+aVzGtoSYfz1Ju7pljblrtQaD6vdJ63A/N53crFQQHN55XOe2g+r4Xc
dfZA83ml+6ADmM/rNFfONmg+r3RfQPN59eLG/QA0n1e6TzqB+bxmcuM2AJrP
K9030Hxex45ygYDm80r30a/AfF4ddbiBDc3nle4raD6vSefXsxMPms8r3Wd3
gfn/p/8F9jxQwQ==
           "]]}}}, {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.22000000000000017`}, {-31.869013527769212`, 
         31.869013527769212`}}, PlotRangeClipping -> True, 
       ImagePadding -> {{40, 40}, {40, 10}}, DisplayFunction -> Identity, 
       AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
       Axes -> {True, True}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
       DisplayFunction :> Identity, Frame -> {{False, True}, {False, False}}, 
       FrameLabel -> {{None, None}, {None, None}}, 
       FrameStyle -> {Automatic, Automatic, Automatic, 
         RGBColor[0.922526, 0.385626, 0.209179]}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], ImagePadding -> {{40, 40}, {40, 10}}, 
       ImageSize -> 400, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, 
       PlotRange -> {{0, 0.22000000000000017`}, {-31.869013527769212`, 
         31.869013527769212`}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}],OverlayBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJx11G1Ik1EUB/AlEhHR+hBLQqZFmBQxRETG1Gd9CImIZUFJhYpYSUST6MVq
bEXFior1RraKLV3LlkunTVu1NrOVUqERwZDKYWIiEWGho/Kl557L04cu/wfG
+LGxnXvu+Z8lleaNO1JUKlW7/GLvk76xd+srKyQVeP7/nLsG+rd1d3j/5Vpo
/v1j0EcXNhcPHjkJzX/vNPTh0aycOf5z0Pz/LkAXJEzn6/ZegrZQPVegw2vn
pay0X4WepHqvQRcEew5G3NehLXSem9Bh7amvJSEX9DSd9xa0K5YZ2FddD11E
/WiAHvjFDuSBtlK/bkNrdZ+WzT7uhY5QP+9Al1UZ5Ioaoaep33ehXU72+KCL
6D7uQQ/0JjcNeZugrXRffmht6ub5q9ruQ0foPpuhy/SsoBboGbrvALQp/8zq
imFsN81DK/T3kpBcEbZE89IG7dgz8sc3hp2geXoArbNr+nuT2Daat6Bg5+f+
hjdOh9RXv6bj55TowXUTar1+QsqgeWwX/KXwxyzDthVGszxNaakdgltLbTs3
HMgxRmlesdVxT03h3IfQ5TTP2C3sOheEoGdo3rFNrBzNI8Gvcz/mDTdpjG7K
g+h/983GOf0xtER5wXbI0/Z26RPoBOUJW7fd0TWeHYa2Ud6w++RqFuueQmdQ
HrHNF79ZpLwIdJTyiq32p2+tMkShyynP2FuGvDdimZ3QPO/YjfK0xT3YfB9g
J6fe145mPYPm+wK7+CwLPDbfJ6KVvNalsQvpEqzkle8b0UpeR1i7AqKVPPB9
hJ2fy57n0HxfYds7X8kbB5vvM+y4nPZSfUywkle+70Qr/Vz+gRWEzfch9qFq
NvAvoPm+xO4ez5YTi8336UvoRSdYw7D5vsXeJXcr2IPN93E39F/nI18q
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{80, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 
              90, 89, 88, 87, 86, 85, 84, 83, 82, 81}, {140, 161, 160, 159, 
              158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146,
               145, 144, 143, 142, 141}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.011000000000000001`], 
            AbsoluteThickness[1.6], 
            RGBColor[0.368417, 0.506779, 0.709798]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 
            66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 
            82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 
            98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 
            111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 
            124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 
            150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 
            163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 
            176, 177, 178, 179, 180, 181}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.22000000000000017`}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       ImagePadding -> {{40, 40}, {40, 10}}, DisplayFunction -> Identity, 
       AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
       Axes -> {True, True}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
       DisplayFunction :> Identity, Frame -> {{True, False}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> {Automatic, 
         RGBColor[0.368417, 0.506779, 0.709798], Automatic, Automatic}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], ImagePadding -> {{40, 40}, {40, 10}}, 
       ImageSize -> 400, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, 
       PlotRange -> {{0, 0.22000000000000017`}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, {{{}, {}, {
          Hue[0.67, 0.6, 0.6], 
          Directive[
           PointSize[0.009166666666666668], 
           AbsoluteThickness[1.6], 
           RGBColor[0.922526, 0.385626, 0.209179]], 
          LineBox[CompressedData["
1:eJx91n1M00cYB3BCcBgxoigOmaGKGyWia4xToih3zhiyOEOKRsAXMAqCxg0y
3XRKUAcUF7cgDkXRwYQhVioWxFqwlreqgA5FGJ1ztplECXGm1jcmoux3dzn/
2JPHX9KQT0LK/e6e7/eYuj4tJtnTw8PjrvJhP///DOndt5atX0fe7XTUg5mb
Ldt+2oFa/P4e1LsmVEX9vTMbtfi+fai/7Q+ZNdLwA2rx9w6gXuCM/rHwy4Oo
M/h6ClBbPhvtGZZ7GPUQX+8R1AtqW7+xlhShzuDvcxy1JSjnodZcjPoNf99f
UBfbphi/Sj2BOpLvRylqx0v2QmWoM/l+/Yo6SHP3w/f2lqO28v08iTohKUJZ
UQXqN3y/T6EuPsoePepIfh6nUTs6Bpb3lleizuTnZUAd5LVyzMyaM6it/Dyr
UCfMYws6i3qYn7cRdXT494vW3cddwuehGrVLa1ZWhJvwealBnbel75XejdvJ
5+kcak3uxNsdA7h383mrBS7Tmhs3BqaQGyeWmJ6+hvbr7M7UJN8kKj6P54Hb
t5csSnniRdOUaQrwMgHbJiR+UbnSnzbweYXuqUxJdUcEUV97WfrCUReAa3z2
xc5pDqaJfJ6h1UUHjnx96SN6lh3nWDPwmmNLIld/HEqH+bxDpy7MOTw4czqN
ZsuZWAfcs8LiyNqrpiU8D9CqNmd2XeQ06mLjPLke2D78b1pMlooSnhdoddv8
Jy+uT6J5yrTdDL4IXHXRx8eo8qdOnifowd9txvSl46hmTV7z81AL8G9uz2Ut
2tF0N88btL7pj4IijTe9oawmUHMJOG7u51r9K0+q4nmE/mTFpLDv/IdJWv6j
DDLHChyoU+eP2fqSNPC8QlOS2DW+5xnxNUxelRTRAJxsKI2f4esmiTzP0LoC
29B410MS21t+zDalEXhQ01Xf4XhARN6h2/tXTYupu0cqlGmzl0EH38t2lusc
RPQBdOnYFmtMnZ0MvO7e0R/SBJxt3tQw3dpJRF9ANzdu6FVVt5Go/Szw0C9M
pSHJhiYi+gQ64XRAXvxjEykMYAfSDPxpy1/9fou7iOgb6LVJf1bXe4+gfWy7
jNAyr6KPoGVew2ezpwVY5lX0FbTMa25ju9I40DKvos+gZV7tStrj5tmAZV5F
30HLvKrvsAVBy7yKPoSWed2eygb+MrDMq+hLaJnXq89DlcRCy7yKPr0CLPP6
fhbbMGiZV9G30DKvKcpu1bZCy7yKPr4KLPN64WdXxZWl0G/zyvsaWubVO4wd
KLTMq+jzVmCZ11gWBy20zKvoe2iZ1wp2nN3QMq/iPmgDlnkdYMuJg5Z5FfcF
dGefX7wu3ESiWN3fgdblk7gPXCeJuE/agbcd/Gd++vIcUsjqNgH67f8b/L7B
3beTBQK3uI+uoQ4fyQobt7ivcOceWqw0Hm5xn11H/R8y2Fi2
           
           "]]}}}, {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.22000000000000017`}, {-31.869013527769212`, 
         31.869013527769212`}}, PlotRangeClipping -> True, 
       ImagePadding -> {{40, 40}, {40, 10}}, DisplayFunction -> Identity, 
       AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
       Axes -> {True, True}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
       DisplayFunction :> Identity, Frame -> {{False, True}, {False, False}}, 
       FrameLabel -> {{None, None}, {None, None}}, 
       FrameStyle -> {Automatic, Automatic, Automatic, 
         RGBColor[0.922526, 0.385626, 0.209179]}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], ImagePadding -> {{40, 40}, {40, 10}}, 
       ImageSize -> 400, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, 
       PlotRange -> {{0, 0.22000000000000017`}, {-31.869013527769212`, 
         31.869013527769212`}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}]},
  "RowDefault"]], "Output",
 CellChangeTimes->{{3.7009941463018703`*^9, 3.700994180752602*^9}}]
}, Open  ]],

Cell["\<\
Simulating the sequence tells us the unitary following each pulse (and at \
time 0):\
\>", "Text",
 CellChangeTimes->{{3.700994193759748*^9, 3.700994210563685*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SimulateSequence", "[", "compiledSequence", "]"}]], "Input",
 CellChangeTimes->{{3.700994107440383*^9, 3.700994109492025*^9}, {
  3.700994150705907*^9, 3.70099415296023*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Unitaries", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"0.6083972820529666`", "\[VeryThinSpace]", "+", 
           RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ",", 
          RowBox[{"0.`", "\[VeryThinSpace]", "-", 
           RowBox[{"0.7936326273475425`", " ", "\[ImaginaryI]"}]}]}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"0.`", "\[VeryThinSpace]", "-", 
           RowBox[{"0.7936326273475424`", " ", "\[ImaginaryI]"}]}], ",", 
          RowBox[{"0.6083972820529671`", "\[VeryThinSpace]", "+", 
           RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "0.6807482329794265`"}], "-", 
           RowBox[{"0.10259136038550726`", " ", "\[ImaginaryI]"}]}], ",", 
          RowBox[{"0.6589801850114336`", "\[VeryThinSpace]", "-", 
           RowBox[{"0.30298840214096756`", " ", "\[ImaginaryI]"}]}]}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "0.6589801850114334`"}], "-", 
           RowBox[{"0.30298840214096734`", " ", "\[ImaginaryI]"}]}], ",", 
          RowBox[{
           RowBox[{"-", "0.6807482329794268`"}], "+", 
           RowBox[{"0.10259136038550704`", " ", "\[ImaginaryI]"}]}]}], 
         "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"0.29868914407585717`", "\[VeryThinSpace]", "-", 
           RowBox[{"0.24246602399241637`", " ", "\[ImaginaryI]"}]}], ",", 
          RowBox[{"0.7558131830554173`", "\[VeryThinSpace]", "-", 
           RowBox[{"0.5298504078890383`", " ", "\[ImaginaryI]"}]}]}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "0.7558131830554169`"}], "-", 
           RowBox[{"0.5298504078890385`", " ", "\[ImaginaryI]"}]}], ",", 
          RowBox[{"0.29868914407585767`", "\[VeryThinSpace]", "+", 
           RowBox[{"0.24246602399241615`", " ", "\[ImaginaryI]"}]}]}], 
         "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"0.48154358151735677`", "\[VeryThinSpace]", "-", 
           RowBox[{"0.4509749579098933`", " ", "\[ImaginaryI]"}]}], ",", 
          RowBox[{"0.6271915702053529`", "\[VeryThinSpace]", "-", 
           RowBox[{"0.41396630382309185`", " ", "\[ImaginaryI]"}]}]}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "0.6271915702053521`"}], "-", 
           RowBox[{"0.4139663038230921`", " ", "\[ImaginaryI]"}]}], ",", 
          RowBox[{"0.48154358151735704`", "\[VeryThinSpace]", "+", 
           RowBox[{"0.45097495790989317`", " ", "\[ImaginaryI]"}]}]}], 
         "}"}]}], "}"}]}], "}"}]}], ",", 
   RowBox[{"TimeVector", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0.06000000000000004`", ",", "0.12000000000000008`", ",", 
      "0.1800000000000001`", ",", "0.22000000000000014`"}], "}"}]}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.700994153542016*^9, 3.70099418547012*^9}]
}, Open  ]],

Cell["\<\
Plot the trajectory of initial state |0\[RightAngleBracket] on the Bloch \
sphere:\
\>", "Text",
 CellChangeTimes->{{3.700994281196652*^9, 3.700994308369671*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BlochPlot", "[", 
  RowBox[{
   RowBox[{"States", "@", 
    RowBox[{"SimulateSequence", "[", 
     RowBox[{"compiledSequence", ",", 
      RowBox[{"InitialState", "\[Rule]", 
       RowBox[{"TP", "[", "U", "]"}]}], ",", 
      RowBox[{"PollingInterval", "\[Rule]", "0.01"}]}], "]"}]}], ",", 
   RowBox[{"BlochPlotJoined", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.700994217085515*^9, 3.7009942746728287`*^9}}],

Cell[BoxData[
 Graphics3DBox[{{{
     {Opacity[0.2], SphereBox[{0, 0, 0}, 1]}, 
     {GrayLevel[0], Thickness[Large], Opacity[0.5], 
      Line3DBox[{{0, 1, 0}, {0, -1, 0}}], Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
      Line3DBox[{{1, 0, 0}, {-1, 0, 0}}]}, 
     {GrayLevel[0], Thickness[Large], Opacity[1], Text3DBox[
       StyleBox["\<\"|+Z\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {0, 0, 1.15}], Text3DBox[
       StyleBox["\<\"|-Z\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {0, 0, -1.15}], Text3DBox[
       StyleBox["\<\"|+X\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {1.15, 0, 0}], Text3DBox[
       StyleBox["\<\"|-X\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {-1.15, 0, 0}], Text3DBox[
       StyleBox["\<\"|+Y\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {0, 1.15, 0}], Text3DBox[
       StyleBox["\<\"|-Y\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {0, -1.15, 0}]}}, {{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
       Dashing[{Small, Small}], Line3DBox[CompressedData["
1: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
aZ3nLndR/f//7+xmU6H/fWev/J//H/XtZOI=
        "]]},
      Annotation[#, "Charting`Private`Tag$843#1"]& ]}, {{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
       Dashing[{Small, Small}], Line3DBox[CompressedData["
1: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
d3iqKYHXvWC4xC1pTYIb3/oU+Wjvc8gSLvdoF8EFmFksBldCoOjDalIb4bt0
T2dqCs2GQb4e0ucTBK8I1z70pCES0h6el0ol7BPzROacIb94SOUr7pYkuIDg
u0Bzh0So/9VnMYewD2/N69mtvEmC7TnVZlGvkSvfk4mwTE2BL4es3bkI+7za
p9ldyCMDKkrHmicTzp17f7+E05k8KMcSqBhHOKcemw53x9XyYXWumERwPPKQ
xdfTqZIUuDafqK0XSzgX2ur+P2UKoJyH5cjTl8j/3eVkd1frDXyqJmJACkTu
43J38rh7CUzakp5ZY0V4rrbo50E9EO5oZX+caoH8npQHeUWqEiaS3MwdzZCr
Qv2eZLtKqJw23sxqinxiZthsZrUSVh20D602QJ62AFKV6avg4rhgTNBF5PlT
O/h+ctdA+dzheT8eQtzItdWkl6uH098fxXpzI38RfehP+ON6GPU+MMtpF3Ja
40Du/qJ6uOecyoLmdkKc7+74Jiz1Gb6YE5eK3kR5ROD2UvSYcAMU8iyXrB5D
fkhwsu4QRxN0+HOD2YKQ724LHy15PNAKWzaupwJ+5O1CGTf0Cr/A0V9OF1q8
UR7fZKK/NvmiF167+ieK9wnK+yf47ZPLzIbhs3FezR4hVCdcvV/sruozBvfR
n5Y/K43qCoZrTq9Vnk/CIjPx+ny+Edz/atJKid2Yhh1eYTmHk1DdMmG+Q22O
bg7W1sbaTq+hOqfALdTHpngecoiPNoX2I0+pqWjo+jAP9z1g+3qsEvkM63yr
/Md5OGubRH/PG3kf93ae6cZ5uPkmNDOUA7mmN7MzdWge5uZduU87+BX3S27W
NrEsVCjE8lZmx4UO3Od+rwXY61Jh2ohSRM0GqvdktzPLzn3H3m/dMauyMuQr
46oj9T1UKLd5hi3HCbm2ullx3AAVOs1cG7FbQfUkY/NQp/gEFU5/7mZPnm/A
nZ4rebh7GVvP5PH1kJ563OPmD4mFctJgE9nbSDG/BuWFeOnay8rYfvK4k3/F
EvmgeU4Z+zkarFeaEzYWR/7vywFYe4EGZToz2mxSUZ0sa/P3BI8GDR5k+nn2
ErkKxX8/kHD1Gg1GN72+v+FaiXu2cRbvPuy8PThD/ro9FNXzx0z/rpzwpUFB
Jr23v3ciZ6hzIlv402DLxRvhE+HoXuCuHRc8hdUHpyvFa1+Ti1He1LrY2xBE
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
        "]]},
      Annotation[#, "Charting`Private`Tag$923#1"]& ]}, {{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
       Dashing[{Small, Small}], Line3DBox[CompressedData["
1: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
6j11u43q//9/Z7cYD//vO3vl/wHesGTi
        "]]},
      Annotation[#, "Charting`Private`Tag$905#1"]& ]}}, 
   GraphicsComplex3DBox[CompressedData["
1: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
    "], {{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], Thickness[0.01], 
       Line3DBox[CompressedData["
1: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
i27Rww==
        "],
        VertexColors->Automatic]},
      Annotation[#, "Charting`Private`Tag$45375#1"]& ]},
    VertexColors->CompressedData["
1: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
XssdNvnYs9E7S/ybInNlsmmTttE/fPQ8TIi4qcpBVNNT5xFnCu8zpzNZPXzY
9pQ12k6uRWzUuogCMm9frW4J9F42YE3l4oSkT7VYFm0y7ewJClmzO6yaQLi5
tHiyKp2LHKv92d5hFPpy9KKscggXtM1tpj+pQ1DI/I/br1HoMOlzvqHQiA/+
SolvQ+sxt8vn3qQkCt45u6fIBjZCUvXbjrGVh8wfn/YJM0mPYMVrFvU0wqGo
qXqWIR8sT9HF3BcU1srMSz1kTTxNp204cUoDWs9LSp4yKURRe8860Zowa1NT
f9RQA7QWxV172kThGl3u3RxlITQbp4+t8CK8k/BbD/VQWHo+cNU/oUJ4TzTV
W8gXwOeYqaHtZwrcjw8HtMVCOF9y38SybMRssxmfV/2hoOQ//9f/HEX4yE0y
nZzTCJHWeNJ6eQn61zns5JeJ4PeFtXaOahOyLKkJrSskiNN/1ZYU3YySJ6cu
eP5ugsOK9V/ZJhLYvmvTW/O9GR6FguBoXyFWxWhefm0tQcklj6mFe1qgss/1
u2q7EANqWfH+LhK8UkwT7qS3IOjmO42ajSIkHXPNs/WUgGfzRNpQpxXhs7xN
F78UQeWw6qjWSQle63bfXRLXipnfpv5VXdIM+j+d+2Zqi+Hvo9X33Koccvoa
J1bPz8UKnvOu7WvFiC09syzy3WvoCT3KvKzzYeXc+rR4E8lh3vEMTmQlPkcd
mtcqRYP2gvczNFzFeJ0W7sNKoONLwvfZna8Loe/bH23uL8Z6vZexRv95zNYU
efHil1C9b6sSHyHG4MAmz5u/GXi+si6C9rYE1VFlUjI3xJgxI9s1nV+N3fLF
TsvulkHBRqfjfYoYvl+eDb59wkS/ZsPOO/vLId/cm7Awh+xjkczZvEAWpHuT
rdWVK1Cilp0WWCZG9lsDTTObGqyLXxq7u6kSq19857RxxAgwyDa4osRGGy+p
dBabjr3/uNp4tIpRKBndGSNhI32LlFvdkyoY6xSVOH4UY/Wh7qVF1Rz0DIXN
lY5hoEztf7KJ/90DQFfrO51QC8+e7dabj1Tjs0guV2oShewwI/YPLy5GNsst
ObiJiS/8jUeDFEjv8Lk70dikDku8JvHsNVj4fPR+tcNiwv3U5fXeUvWgTzeM
vvOLBb2IjLhkXdIH3aUPewjIPniveaz4hrxHh2Hw13UUUrfqu895xIP84Yho
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
z0lgHH9JY+54K471aDo9vt2M/wMr2run
     "]], 
   {RGBColor[0.742077, 0.0624857, 0.00605783], PointSize[0.035], 
    Point3DBox[{0, 0, 1}], 
    {RGBColor[0.8280513333333334, 0.37499046666666663`, 0.3373718866666666], 
     Point3DBox[{-0.23066327714289764`, -0.9643810170905442, \
-0.1294747328752185}]}}},
  Boxed->False,
  ImageSize->{360., 360.},
  ViewAngle->0.34,
  ViewPoint->{1.3, -2.4, 2.},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{{3.7009942298872213`*^9, 
  3.700994274959937*^9}},ImageCache->GraphicsData["CompressedBitmap", "\<\
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
DO9SDXdjBu619Et1Bu7I3khYxfSb2PIH9ymOCOw37KqDx5edYsifx/91nv7/
ef5HZ3ijgv0okDN3fQGu2iXS8QsUyZQRqqyHZaMaeWONMKn8oBrTf7vflEZR
sutolIWKp6V2MZypmUfRvS/JiNaoTpBA6UZU6zrRUtwuodolSNPypEgKmt95
TynvSSJMxuJ2Igf28vEToPb3rwueW8IotndztbjpnZ0qljs/V4Lknz76CCHf
gmG91Q7rNpjxyDL8czWNu/cTnBnSrgL2/ocfHRXsg1CNj6sfGK/ArUtI/9ot
Fr4t6T0Waj+ohc1rjpn+J62OrT1xGn7zm1nw9lvbaGBVxPfg+Ne/CqHfPUtO
cDwlt9U8madXoPX4MX3ttmoXps8/gLtRoNgiu2hORML5oFbTfs1mR+4z/JzS
JqMiN8F2mEA5gvcGRzwN0sERaK5tQHS/wreE9vP0mvOD9B68CxU/vImM4tQP
b+Jd1G5C7UrAJpPXDwwHCd54jwP6+f5htCFtiHoWWOd1jOcYfq6PNQ1Jch3c
VTCXWF6iYnl/0ZzMcI/AXY+uWlaC8YlA/t76k7BsXQsseBfl2NoG1DFZbowg
0NVpeX18USSJ2zlWLroL2MMIz6maMstR2yN445FI2E5BNizW9Pa7V0e4oLxm
xetYTp6GyYuOMcI//vAjFaedn6kFyiy5Q82jhQvrFlrNyyAPc8TOhiOQjUSg
9tmnPxHfLkHb8finSIvB7amiUq5bJVe9LOXAvXn1EXhx+UGWLUvmb4Ikne6s
2tYUHbat2QAvznoBDy2MoH7GgxNf/yov7enxl/Z097I3AgxuXhXEk2w5jhyC
7BxGEwvZDOcSq5MsBZ8fdYd9zUCwkoA7OOKa8HyWgavtPBnuOz94Fv+lINcC
NaFR0Dx4lhFdOERddcL0GCgc3Mf7tG3Y1YCgPs0AP0//9zwnCg7e/JLhYqgz
pFmsD/1/EuvUODnbc5Uw7qrp9OK1UyLOpb8t+E62tEH50UpUKhWM8wG9sEHP
LQY4lvcp66WY3surSIw61+pEUI4gz1J1acXxMSxOGOldKZ6maXjrHUugTBR9
EmSkl98/HubMWse6pHz/8WKU/znEEOFUWCZQlCQ7NMo7TRxPK4hnFMSzkSg0
7TlAUIeK6dMCPrRL+QdoFbRNv0Sut8Vtv1RasF3ChcmWNUcR0xth6qwdUFne
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
sSYSXBzYVQVPLNgHDfUxe25aTk9DdUUStpIME2b3IVoncZEnYEdlS63eWNYd
IKa+9LJmqjQATfa54DNzxCermoo2LRjOjDoLWs0XoSjLVGTg+cs6a1JevIzD
+RHuQj4WkRWfYXoyU/Hj+DX+vnOyj8nMjwK8xWHHmE8E1nYhkWRyq/rUVY1R
7oDiEVK7QzNcBEFATYHr5KvW+wZHkZqJ7ehT3P31iyocGu3r2SWkWUAy6uo/
+uqGPCOnL/djFr+bue+gxXW1aDHfJ8qXmqfSNNWcd7muDI5avciUZ6oXsLST
NSQy78190zhJXy1/s8j5eub82h0qDRdz3iXC47eJtkdhyrj7Dd3bbv4u/PHj
f6T8q36K3aMcbOa/ReqWwoIFC/g9U6dOhVWrVpm+KkpgxW36Uelq3v/rX/+a
woeUrGoG/Rru/4RbJAGT8o23+xTX9F61bINL/MaDaKkPaYY7muLS/rmC4nKZ
uNEUz/LvKMryebpYiqa4XviI1M4yvR1/VZfP7xHht1JUAeb4Ou7/7KG+q6eu
43pQ07shpk7T5pkoWohE83zIbPwE5DbuC8+bq1OwmZSQ0zN4qaDD6pBWZfnt
ILYDO/dZbFeTZyb3+iz3FK2v4LavegO2Ej5/2VLCJfz4I2OarJeJ05eJscWc
593MdwkMQXn9eW0cAIj2ReS/mKQfaEWq00m0R4/yPlXrekothJri8OzKKryN
SR+JDpdzOOdy2kdV+Yc89akn4n1Ta16k2rXXILgmpbt6ttXK60WXcuGW3lAx
5/0LuZxRYDCX6O1WF8WjGrdfs53nEfv4GqZ6iqTXX9avlvb38Ux8mk4p1lUu
zZJ0JwtWkTvWL3JjJLizWOTWQyaSkSJXmI7fGnmOr92GRW7VsSrO7NPUz8Ed
eHQatN78HfjHrvb/Bc09GB4ehvvuu49f4arX7d2717xOF8QoAuCee+7hz+/p
6Smi+qeU1m4VqmMmj2utrah+et9xmPPs65zJW+pCtM45zuucE9bcfpLWOSd5
nbOsce6Np9TsSkatjfEM1fXv3/pULxRlcjkhX1PdMxcIGyn0OfaZxxTI12+j
H21GolPXqe+Mv9ZJLdokvj+xYL/g5YJsqP/YfegQp/HK736DTIHtEq+IKV4P
fE7PIQyruTvOX0z0xS9DHx4vr/y6zF0eyejWShUlq00T96LK2TavLzumkNV8
LOL25QDz2uP8vUI47bhqn01hn+hXJnZrn07syG35x0El1X07k6Wh/u3KKlRS
0im+YDPbenze72zJguthrqhlJZtnBDp39lRZY/Q52ZCabjl3lUvO6HaV/j0n
tUytn+c4FYGFu3SWWp/FXS6Ye/niQiLOrXrZkVnOT6nVaQUR5mopAPE3r/mr
OEyt4DQtqEECY25MYqLesfEIPPpKGVM41hGD/8nae0bZdR33nmfdc253I1CU
LId5M/bH+fA882YUKdmWwzyPZFu2KCrQkuU3frbsJ8kKlsRMgmAAQBA5MEeA
IImc0Q0SGY0GGp1zzjmhE7ohaXkt2d6zK+1d+9zboN+b8VqnaTVio+/vVtW/
qv71w+//EPHa9+QziO/Q81tFW9LFchFz+eqrrzqJCopmWzxbFujnv/baa/j5
Bx98UJJuQbWxohJRxYjMqBKmPiofOXreVJRVQkksqDpMNaqJx5RQjZlS1Yth
SlfwNGiOuwxQGlj4TQih8s1iRDES91AXBh3VWR8GMn/4xBE3EowG2AgmRuKP
RX4Bcg41Yir6nBwMys3yIJ0+uv+w2bjmWeJS8miCMnEpaiDaZp3I66pY5iVR
DCGLyzWHz25BDgtVzIWfvmh/6iJQuDgNYC3Kp/CZMyMlxfZ3h6hqY+ufQhrd
IX8iThAgiPi3mDXvHKkEBE1VeSsDF7ZsWPEOp91uSA9UAFQOBOFMTuKK40gs
B2QcR3zQEnZ28g6ZvBhHUXO8FzNlM9o7hOIw9jl7Bl2vUyrjADzKkX8VyevD
krhXSmJPHstVGDmbOs1L+6vMpavtZu/uU+Y7Gyx2uwC7Vosd6bbPfeuvM6b6
Dz+1NHMJaLuOuUcffbSQP/2LX/wCc2P4dGNjIxP3WfzPf8jNg6HUrfXBsaNe
hKgWnnxrpcm3JhUdm9tVravCYyv2Ql14HPZbDjh+QG1QBx0pwPbLGU+Jv6FX
zTAN5xSi/tuDfZmRICJOo6kErTG4ETd6aMhgGTP4MXMJnrs+ZgZOnOBBA12h
0fJMsArALQ1+WVoOuZrlEIIdE8geOb31XU0n5maZtXmdn0YZyVDd5+eBFYKx
kmCstzCuBN7sb23Z0+QhzrG59qeQy7ate1piIFAmae+IjR+Qz0LYSFzYnpHo
FnnUfBNUTWsX6lU73th28wU0o43etWrjzg/2uEMTwezbaMZbRKUK1sJ8BSsK
xqO91AHF2Gcx9OLUAI8aWATBiJPSVrCSae11QwZSnwJ/wN6198vMdzeeN6te
uoL8AXvr3iw3rfWt5kfM3rtf+Ly5dt99Fr9PQnGayYOghLb5+Xlz7733Bglr
RUWFS1hFX961axf+2p/+9KfSjiEgP2JGBwZNU6XNVi2MLltVQHplmIAkGAMg
I+icQgAEIAc8kNKWcTdo23klzwXCJCU6sQdIFmNh2JORW5NZxJJEp2HpzeA7
7EhEq0XTAZN+CUKNn1Krwf6YAOmgVFLJHPYOXQjIhDRC6mpfzRAWN6591hw7
cESgxBe7FJuuMHRqUKKAnGd1lxLPGfrUIvIJH220s59bnLlp6hWT9GMxfn6R
f/4yCpEuW81aKtcAn+7h+Et/KT/BQE0iEY8nZ3BAQqenaumCFePpsMh0owp6
o0ItM9KUlW6pjmhLklzLUDkI4+eBxFVhOBCRcRM2g9lqAaHK2apEzGHUlrpg
BHzIZaxYZWYcr1Bm9ka/woISL1EArBwsD+wpQWAfs8C+/M4Vc+jEdQtrm4f1
Tz5vLu14GWEden6LwArNml/+8pcqDy0EIRh/yTe+8Q3z2GOP4f//7W9/G8Si
SLo4//zP/2y++c1v4o/V1tYGrNp09TqkqzWOVeriNJhV6/aZjTuPUuuUWe1p
pHTVqUcqaA60dJB6lEjMlOnWDECKh88QUzXb6irKyPv0aJu3CbxGpS3egM/S
0kbNKZssSe8UFtSWmA+fxWXQWXzxwAtKIEVQT56kEVZRhTNcJGEokTk3GtYZ
6nF8uiAUDB+IRuPrOPzcCmLJ8ofRDyi7yQ9/Ostg1potBCZ+Fn7sZpKH0IJU
eUl5K0RQiKOfx3ark4fhrzAr7x5Tc5jKUkILLdgZmTXi4O+asDcnXBNW3q14
KDaKeahIba677g4/I+4wCPpPTo+M6aV1vqs66pwsw4V1XUyqMErFZKyFIBjg
6wYf+BEdSZHPAUhq9cgsrTrB2ANQ+mFXUAZhlUdmN+w8aTbsOIHVJMi+SOkP
iNK3/vZvzd7vfNemtH/wyRUIU5Hp7e11Is7u3bvN0NCQ+982tZXQuWfPHplw
kJm+z+B/7oTTlLaCrEIkdS575lCJeeQn21DguX6lwiLJobORctmeprZIY0mi
bofH8kOI5ZAeOnehM1jUdVyO0qw5LRQmfqGQZmjFSQBG+l6zxeMPVh0wpVea
hMZBd5NrWKKn2J+48XJSDCUFmwXDUYui/fSluz6utZ2EuzR+U2/aqZYyFldg
hnsGzKa1G8zxA0f1OF0iGauXYCSA2m8YAcnp6E0OjfjE8AmisoihEzK3YuiU
MEo/jdnkT83cjPLxmjC1FD8/j0+7jalQc9oMOHawzvrkd2oOW7FJmku1+5Ee
ThI2c4aT2KMowzPsKWNhHkpSkxFTQ+wym/E3eWI3kMQRtA9CJUdOenyW64f9
BqUTyyNJRYKm78LyXC1NRnAQjXXFaX+phTNajnhCxdnZZLFs7DDlV2vN1bIa
h+aeBx8y5758N6IJ34KGWpe9UqG5zNx///0ucEJ1Cf/3zDPP4OdgAGl2dpYl
3ASmAnE6EH6ssrIyIHa5GekfoGS3ipPdmnrz/qFis/qBHUhreWkFBFGwrm8h
sQecUyXRtZR6Wl37pTU19Q6kqh1gORqLpHalPSeS9O5vjKgmNnA2IKY/AJ0H
/oWB0hVB3elmArHdMm5OHLpifvTkEVNe3iZeCjQUyK+m/hMn7eeI2suf+bhW
Y6VzGPZRUYmMYpfTQo/O/m03rbPgHjwq9R73OdLUznvFJ0BOJ7gYLIMfuEkB
1P67Kj49zhsQZ/o5GQe9+59prguY4dGSYnPtzz7vnpn2DunuzMnffrRn2Ny3
7TJqQwusLLuMQQRat9dVoKd4WSC6sdSAfI5hpZvcJc/w8Sjl1UcFLN/birUz
uBtKUydWnHsrbML2OZ7pwXgr1etA3uq1nwSkX3dN1rSIFEi3FueqskpTfKTY
/M0P1ph7/uFp88Jzbzmcz5acM+fuudvmxC9Zoj9hhp7bsozRLC0tdXqRLUiF
WGi63HPPPfjpdevWSQZ96tQplJHuu+8+2fb6DKfBDde9ausbLA3m2R1HgjSY
9SMCuSiQjyTk9qer1YIQ5NCsrzclIGX8CGGsx3sjHXBff5sCbrf9F71BsxGD
vK1SSNGW+fUMHzXXrrdHPJdKk3HQK+23ee9li28G8AUtuK1D90sptKQhnuFt
RAcxDvF5kA8cjd2ckRZoqT5N0lRNI6/T83GArsMNP9fAqNr/QrMMP3dLYYnk
QoANEY8l7voobEntjE35n30e4lJxsVTMrpAdYWjtE/kR/TmdH0sb1evWZBlA
A8OJU53AwFYLTmpOgifuM24sMbgVQ5Nnvl0aufMwfqGMFacRmYaiQjbIlNOF
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
p9m0/kVzZNdWeZr8X+dBs4renG3tm97m7k0tQS/gs2GANIwDpei9v/jiW2bl
szvNCmpDHbu1H0ii5wdI9vwcXi6umgfW+YvhAf5Ke+Yxned3PTN0jNg6jo6h
LjkhXZPq8rrGdQ8idrovkM6Zz2KGj+nK2TZk7r79e3zi89Ch3THbWYVhJow5
G9a+GuGwjffGnaWfcZ4wgjdtOnds5l90xdcvN9MYEfDQalKH9ps1L25CRkBq
dgv9+LD9L/T3Rg7tRSAaZg8wzJ01TxaHNtwBJUafYbqb4Nn55lvmhRc2UrrZ
Th3Xbzsu9rj00pPageih3/yCe4klznEct+r1Uh29NNotvZTuYYjECAUi8Wfo
LO6wOD+2uG4a7GiXrsujDaHHhrifhqSvCsOYxC8MWxvlvuOv6LHFfm2+d5Nc
Vvbcow/ja/TlEHfwMPVdlxnp2BM+TTL/Tek/tDUvvolvwy8U6c+vfGYH/cEV
z+ygvnmDwKIAlx/g/qnn+2wfrZYuelozSgRVdNHZ2gR1EME0cly6KHVCu6iL
S87dLP9sFzFMmT6UTTPk+bPS7r79Vu2XXbC3ATwMctY/IH0kqKGf+IF7bPAC
dBiP+ZDZ/7bcUHjVFV83M/xX6HvwaewByVLaaeDxNvnNYgHKIBbY450W+umd
bzcrnt5uHnr6XfP8c6+Z2VyvI+MZedvP21TuF2eVjKP8tmeJDUS3E1wFPEGt
Cw1vPd0Nw0HEo/cdvscDO7gH4GLAyRsvyH0Wd3z3JtZgA5xJD5hV9y3TOwDw
2GauueoK7Q9pt3z7Rv5/Lz7+CL7GuxxI4jOsxkZxfOfGN/AZNeIyR6GW3lQ9
2xvHO3tB3tRL+BDHe6I/fXamTO/oKL0XelcjxxFoTmA9ccq9KXP3bd+V97D/
XX5nGMsePPTSi974wpP6Rr7DwPdhFPs49PTTu7nLezcXyLvBLhlssKLW/tbL
cln1lTR+mR56H5hqppeO1cR9MF68enkH1HrMe3NVeiPvm7//5fuxtfJuXgnf
zRLz9zRG4bs5ZpZ9/xb+AwP73nHjVEvRuxzvRUb28lM/42/ffvO36e+W+zqp
Q6r03+foT9F7NHveXG+vZPjRA8tMuf+w1zrNxMBhKEHcdPidG6+XK9NW/wTv
IItgzd+oZyjwUKNXTd+g1/2qvOw3VI6uWPEQ/8dyIcuv/u9/+Z557ZlHW/XW
zTtu+Vt54Wlpjzx4dyyud3Hu3bSenutC41U2XXH+tMW884pcWXjD9debD94/
g79KUP8/b/p/OTArV67kn6rVsA9PntuzZ0/TlZ8XmHvvvYfZt+2XZ0+ZW26+
SW6Su/Yas1jHNkCJwL/61a/c/UTT09ObPvwvJpv+4n333ae/JWlmZmbM1/Wy
ueXLl5t//ud/pnclP79+/Xq5OePee2Ob/8d+fZu+SO9Nmm3btiX16d/85jfm
Kr0BL5PJ/A/+8gv0t/zwhz/k5772ta+ZarWa0B/dsGEDP7106dLYlj/8m+kd
m9+Sq/3d736nvzlpPvjgA3PjjWL+N910k/nHf/xHHbeE+Yd/+AdzzTXXyBVp
IyO/5y98RJ/D/8BoUaPfgseE6e/v57t48LOrV6+2UGzcKF72zjvvjG39w7/5
8ccfb2Koxdxwww2seek1EzPXik0ODPxP/bak+227d+/mEVu2bFns7eivoo7j
DsRX3fIt/i/f+/8////C57H/5f8FVTFF0w==\
\>"]]
}, Open  ]],

Cell["\<\
The option PulseSubset lets us pick out a subset of the compiled sequence \
pulses to simulate:\
\>", "Text",
 CellChangeTimes->{{3.700994334940275*^9, 3.7009943707684526`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BlochPlot", "[", 
  RowBox[{
   RowBox[{"States", "@", 
    RowBox[{"SimulateSequence", "[", 
     RowBox[{"compiledSequence", ",", 
      RowBox[{"InitialState", "\[Rule]", 
       RowBox[{"TP", "[", "U", "]"}]}], ",", 
      RowBox[{"PollingInterval", "\[Rule]", "0.01"}], ",", 
      RowBox[{"PulseSubset", "\[Rule]", 
       RowBox[{"{", "2", "}"}]}]}], "]"}]}], ",", 
   RowBox[{"BlochPlotJoined", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7009943190993567`*^9, 3.700994328963056*^9}}],

Cell[BoxData[
 Graphics3DBox[{{{
     {Opacity[0.2], SphereBox[{0, 0, 0}, 1]}, 
     {GrayLevel[0], Thickness[Large], Opacity[0.5], 
      Line3DBox[{{0, 1, 0}, {0, -1, 0}}], Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
      Line3DBox[{{1, 0, 0}, {-1, 0, 0}}]}, 
     {GrayLevel[0], Thickness[Large], Opacity[1], Text3DBox[
       StyleBox["\<\"|+Z\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {0, 0, 1.15}], Text3DBox[
       StyleBox["\<\"|-Z\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {0, 0, -1.15}], Text3DBox[
       StyleBox["\<\"|+X\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {1.15, 0, 0}], Text3DBox[
       StyleBox["\<\"|-X\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {-1.15, 0, 0}], Text3DBox[
       StyleBox["\<\"|+Y\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {0, 1.15, 0}], Text3DBox[
       StyleBox["\<\"|-Y\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {0, -1.15, 0}]}}, {{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
       Dashing[{Small, Small}], Line3DBox[CompressedData["
1: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
aZ3nLndR/f//7+xmU6H/fWev/J//H/XtZOI=
        "]]},
      Annotation[#, "Charting`Private`Tag$843#1"]& ]}, {{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
       Dashing[{Small, Small}], Line3DBox[CompressedData["
1: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
d3iqKYHXvWC4xC1pTYIb3/oU+Wjvc8gSLvdoF8EFmFksBldCoOjDalIb4bt0
T2dqCs2GQb4e0ucTBK8I1z70pCES0h6el0ol7BPzROacIb94SOUr7pYkuIDg
u0Bzh0So/9VnMYewD2/N69mtvEmC7TnVZlGvkSvfk4mwTE2BL4es3bkI+7za
p9ldyCMDKkrHmicTzp17f7+E05k8KMcSqBhHOKcemw53x9XyYXWumERwPPKQ
xdfTqZIUuDafqK0XSzgX2ur+P2UKoJyH5cjTl8j/3eVkd1frDXyqJmJACkTu
43J38rh7CUzakp5ZY0V4rrbo50E9EO5oZX+caoH8npQHeUWqEiaS3MwdzZCr
Qv2eZLtKqJw23sxqinxiZthsZrUSVh20D602QJ62AFKV6avg4rhgTNBF5PlT
O/h+ctdA+dzheT8eQtzItdWkl6uH098fxXpzI38RfehP+ON6GPU+MMtpF3Ja
40Du/qJ6uOecyoLmdkKc7+74Jiz1Gb6YE5eK3kR5ROD2UvSYcAMU8iyXrB5D
fkhwsu4QRxN0+HOD2YKQ724LHy15PNAKWzaupwJ+5O1CGTf0Cr/A0V9OF1q8
UR7fZKK/NvmiF167+ieK9wnK+yf47ZPLzIbhs3FezR4hVCdcvV/sruozBvfR
n5Y/K43qCoZrTq9Vnk/CIjPx+ny+Edz/atJKid2Yhh1eYTmHk1DdMmG+Q22O
bg7W1sbaTq+hOqfALdTHpngecoiPNoX2I0+pqWjo+jAP9z1g+3qsEvkM63yr
/Md5OGubRH/PG3kf93ae6cZ5uPkmNDOUA7mmN7MzdWge5uZduU87+BX3S27W
NrEsVCjE8lZmx4UO3Od+rwXY61Jh2ohSRM0GqvdktzPLzn3H3m/dMauyMuQr
46oj9T1UKLd5hi3HCbm2ullx3AAVOs1cG7FbQfUkY/NQp/gEFU5/7mZPnm/A
nZ4rebh7GVvP5PH1kJ563OPmD4mFctJgE9nbSDG/BuWFeOnay8rYfvK4k3/F
EvmgeU4Z+zkarFeaEzYWR/7vywFYe4EGZToz2mxSUZ0sa/P3BI8GDR5k+nn2
ErkKxX8/kHD1Gg1GN72+v+FaiXu2cRbvPuy8PThD/ro9FNXzx0z/rpzwpUFB
Jr23v3ciZ6hzIlv402DLxRvhE+HoXuCuHRc8hdUHpyvFa1+Ti1He1LrY2xBE
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
        "]]},
      Annotation[#, "Charting`Private`Tag$923#1"]& ]}, {{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
       Dashing[{Small, Small}], Line3DBox[CompressedData["
1:eJxN2Xk4Vdv7AHBJhhQSRajElaFIkyFaaDR1UyRXRSQZIkoZI/M8ZDg45qkM
h0NChVWGyBRKhszzeDZyKYrfuc/z++61z5+fP/ZZe633fdf7PlvYxPaKGSMD
A8PlTQwMmxnQz+zCkDNPPgYOVXG+/cr27PT/3Pn1SDIX3csFu6QvqhmB//kx
aRnOLXRnUatTYFCzxX2X58f6BQoGZthuGFvaPcF9i0l+0ze6S66oYy2q7rgf
MZrbU0z3d++tF3gDvHAXnAl6FfCfawvmADs/3Du/cdcI0b3+ZdTWZ6phuMu7
8Cr15mGghPOTWWNUBO72cnnrz+le83x+vc0/Evc4kQHTqVwMpCk7PWp9QML9
0rYaqkIOBtIDHgr5qCSj9YRVu7/Npq/nxB7FI/EpuJ+/sCf+GN0jkvd/549K
xZ0p4Eohx0sM3HXs2jrol467Qt7a/XuZGEh8puosa/sC98GJD+dzkjCw6h1n
/kqpAHeyUFF/QSL9fZubl4UFqLjXVUzUUBIw8JtsfGmchBzc3O/2PB4D54rr
PphEFOL+rkkgYyMaA7eHss0Per/CvXaQabtFEAb0p5pFau+V4m41z/nK+QEG
3v6wUH16GOI+JJOTbGyDgUKdW65/XiFnKagJVbbGwFT7UruC0HvcW8Zpj3vN
MdBo7ciblo6c07PTI/8WBn6Fnh2Vp37AXdrTeEeGBgairfN7beqrcc9l4DPq
EcCAcVD6wcdLdbj3nantyUyngaWj7LWmAq3ovKK1jw2ZzYGyqYO+lIRO3EVU
K0F0+QxQXl7Zuy+xH/fIg2uHDZ9MARO7Eg72rmHcD9uO3ZFYGAdJ6hFfGrvG
cOfzYmr0+zwCktxvrFaUTaLnc8ZPxZoOArI9heoqOIP7mKlEs8hQN9ixtvG8
bHoWd4ZZhb7Jf9uA6YH555a3abizgu1SmZ1tIP3hsfABM+SeWVe33XzTBjzD
FzZrWyLfdePMC+jaBnKHXTR2PESenCK9Q2dzGxjIfHYCeCN3EqFq5XK2gsUV
ZZJMJnIN1amsUY0mYLUWHWQ4hPyH7Wcjo+1NIESc40bfKHIVS17RL58bgeYl
by/9SeSzAc3sWbqNIC3015fjGPLF7qzNazcbwKcMQ9PI38hVF8R/2tjWAxel
794DvBjuA5p2RtMhNWD23JBbvhry6qL2gb7LNYAh5ujMoXPIr8oM+zftrAF7
hZZG0y8g5yxUDSPHVYMayQcuLlrI7YcqmBgzq0CwooZomx7y/N07dP+8fQ+C
X2vO8Jojv6Id6Hew/g2w0DjZs8kbudv1HLBD+w3IbH/zNdwH+XeWm/NLbWVg
Jk5Pi88P+e8fX6g530vBQohJIVcg8v2N9SPttNdgdIZD/UUY8tYTPDUyPEXA
0MLprlUccvnnsfUfYwvBd8airZ7xyPvO5JANhArBLt0tByPIyH1nBEQeilGB
o/vax9hE5OP7F/sWHuQBMSnfRO1U5DWsQ4/bSzPAX+WrDtovkFtPijyJyE0H
0tvek34SvMesaVEjOQ1oWh/sin+JfNOAfkC+bwrwaRAvrskm7Jvnlz6PnFiw
xTf2KyUXOYtcJXtpRAyovb8xviOP8PyivtFxxyjAvnV4132CR17k+3HiQjjg
Di5pYaUgZ61rzMm7EQyYql2vqRP82ESc85ikP6BdNl/zILhlkPmQX6g7iHG/
n9BBcOWq2eFOySfgg4ld7CLBh/pMP6mF3gfvhS0LmfORU5Q/M5FDDMAF/isT
OwgeTHG7R2FUgaqiYoo8BJe1Ob5bpP4ObCOPZW8nePPDOfeGOnt4Rf/5yXXC
/4qsB8k8lXKB1/KODI4RfHT+977oumcwzaYuq4bgY1m3pO7+8oFH540C4wn+
Malgm6xUIDy+iTnInOClB4Ra9C9EQMGAkpFxwj5Xmsc/JeXEwdTmb0vOhPMy
ixEduVZNhv8srVSxEZzrnzE3jt5EWDzZnx+WQ4hn6/E/hcypULk4YNCDEA9K
21nbGuUy4YOS/IKfWYT8VUpfaomlwC4GNfHTKchnBTdzN2fkw7QilcnTycj1
jr6JqaIWQB1O3U8nkwj5TqrUVR+lQvbMEYw9gfC/YaK3BtaKoHr0zU5NEvK2
jle2jJKlUGAp+eaBYOTkuMvFb7JKIefKT2kqIX+jwoWPWomUwcCfUlonA5Az
vg0zKhd8AxmYI62kfJG/eKl0mIfzHaxnXrr4xh25jvHyv08XK+Eei7QuUzvk
JtZpuiUG1fAX5YzXyiXk7wqBrQ97I5R0Wx2T/4HqqtrPvbZftBvhMF+4QjSh
DmcM7IrjD2+EVMX7eZMzyGXvgH2hPE3wx1n5pUeEOh9i4DLIK9QM3a3lJEU6
kF9yTEwKO/QZ7o42lugsRi7jcGD8alob5PGKqs28jzzcO3ZLdk4HbN/6QUW8
dg7li8MkaYt6Hwxx5hBv2Y3ux+JP7ix/VoagpuSFAL3d07h/CrHQYzs3Bju0
ezvMnSdw1+7qv6+5eRIuVlXFbcoZxX01oXNeLGIaKp3TFh5RHUL5tZubOZM8
C8s+hta3yX1Hec1S6aXCRYM5FnPZQmtfcLflZnrxnJcGLd7PsK/1IB9pmTzW
u4cGfX9vVLW/RV5o6Oet9xcNZiiK6Nk5I5c/bNc5qECD/N8rtlr/akf3oELz
+vXbNPhYKb/RaLkNxVXHWm5tNg0K+MnOMXZ/Rvd1yJnzjPk0+tXfXP2YhPx7
Z9bek0U02C81HD2kh1zl7LK311safHpC/0lCewuK54eQ+XUDDUZaKitlNzbj
HuZmPWA3RYMRleZKMuWNuG/ov7PW3I/BODNFJjsS6sd2VrOWyotgcGKOv/mK
AfLk292qe8UweNIx9aO0APKcnaK72qUwaJfpFdCR9BHl4+WczN6TGDx4eGhj
ILMW1eEa8U+umhj8uDiivFyE+sP5R+tNozYYdGnaYi8RifrS3/5ZE10PMOiV
1qb5mhf5zg0PmVp7DL52cbNQiK3E/SLb2FnfxxhUbLgxJ5lYgfbZ5qlTjhsG
G8DKs5Ksd7g32DJmOwdikGvgimJQGeqfeVVEPOSSMPg9yuHINirq54fENLKl
kjEY0y0wnFaWj+IzyV6NLwWDrY1jikc/UHDPKp+o7knFYPSv+JZT7bm4f72U
8YcpE4PVTsMrDEtojlAs25ZaTnc5xwVD099ZaN+oo0XWWRjsa36j8p4JuQhF
SbjkBQZXI244WfJm4D43bCpKy8Zgr4OjsN9JNO/o7d0pZ5GDweY9FHZ/tyTc
j1fsLO2l++bnBQGrIQmof3iSsJ6Xi0GD1hj3xvxY3PurF2vZ8ujr0fIblYQx
qJ58Pbl6i+6CZzq6vD9Hof4zTD57ke4CQlR1yflw3J9MtYvIUjBoqJx1d44h
FHeaKQ/7Pbp3KW5scxcORPHQh90i0f0wu+/DrWq+uO9g/mcfpLsDs75fuIkn
ui/+UdcaoLtx9D4rUWY3lL8SJWMrdN/PnPRt/wUH3PXD42dY8+n7UNF67QiX
Fe6xbos3ueleqr3GISuqj/Ii/50SvQ+AUR+6b3MZA4ivn/qvHwfdK+Q7CwQs
TXHvHUoFm+iuv2qhz/fIDvdEm2rTWfp6hDmv5+w95oS7iq7R0me6v+I/5cLp
5IF7tpHrQi7d7/BVU4Oue+MeKXlLVpvuJrc+Rj/aHYw7W6TCI266C7GyWQ0s
h+F+8GG1SCv9XLqnsrWFZyJwF+gR+XSc7pWROoeeNETjjj08J5NOjxPLZNa8
Qf9E9L4CJd1SdBfa+ybI0jEZd4Ovvgt59Di8Nadvv/wqBfe2vGqL2JcYVDWX
i7JOT8M9ZtDGg4ce59W+zR7Cnlm4K8uSLVPpeefR1yfpfDofdwW2IOUEep56
bjjeHdMowL2aIi4ZmojBsIWXU+lSVNxX55J19Mn0vNDRDPgpV4ie42k9/DQG
g/9yO9vfvfwK96caYoYiQRj0db07ccyjFPeUTZnZNffp79UaFxzSA3Hf/pnj
cboVBs1lPEnLMu9xTxZxt3SywKA6NOhJtUeumjHWvNUMg+PTQxbTK8irDjiE
VxtiMGMepKsyVuG+MLY3PuQCBgsmtwv85K3BXZEyNOfPR68bFDttRoV63Ke+
PSL78GLwedyhP5GPkce+Dcpx5sYg1thP2VeMfNdZtXntbfQ6393eISrzCffn
sxIycRs0KHR7MW5UtAF3Ya8KqepRGjy0d6LuEGcT7o5/brBa0e+726JHSh/3
f8a9Zf16OhCkwTbhrBv6RV9wH/nlfL7FZxZusDBem3j+HfdrV//E8j+ZhscF
HVLLLYZwfzbGr90jPAmv3ivxUPcdxX0P4ynFM7JjkOma80u14Anciy0k6gsE
huFfTZfTyOtTuLd7R+QdTumD45bbNWYZZnGvrSXbTa12wEL3cF/bkjncOSVG
msL7OmBaTWVD1zvkex6wfz36vgNOb537rPgB+YxdCqO5Twfs5d3GN9WIfONV
eHY4ZwfU9mF1oQ0ip+RfuYcd+AovutvYktloaJ/ZXsttP98OZ3+vBjroIc8Y
VomqWW+C8ttY5We/IWeoO3q/vLwJLo+pD9f3IFfYOM2e59wEdTQtShL6kTtP
Xxu2X26EzM2DnRLjyKc+dXOkzjVARp7Uoe4lwnomjq2F9dTDhLlD4uFcGO5N
JB9j5YIa2JcoW3tJFTmD552CK9Y1cMAyr5zjLPJ6lVlRE4ka+G9MP6w9j1yu
M6vVNr0aytv+Pc6nhfwAy88zF0lV8LA/SLp6DXlc08t7627vYa5JDv8eC+QP
TpO+bgsvg0fN/n4/7od8L4v+6987yiBTnTPJKgB5y4UbkeORpdBDJyF0MhD5
qfcStS9JJbD58oXvDSHIhdmr7aaTiqHlCZ3RI5HIA6KmPJ/mUaFdv6a1ZwJy
+1aVP4LSVBixJXxPQCJyE1HPHhujAthrUzPil4S8Xej39Q9mFHjdc9PH+ynI
L0e0yXHZZ8Nf9lere9KRf1b0rAoOSIWOGVseKWQjtzqjxnI3OAVSXzSWfiC4
/k+g+3hvMozJfbRTLQe54qgUR7EEGa44LuyQykW+HKjmflEmDtJ2BhVHEjwo
1zjr23ESTL4SabNEcK2eCK5hEAnFdkeIJ+Uh58okXTY+FwGXFG+ITxD89gWe
Z8XRofDJaVUgTkFep9lYkZISCCsGZe7fJviv/ku6vrm+0K2Hv+g5wUsPk1Xv
lnhCwf7F7eUE10g03OLl6QbzSVSPPoKLcbBLHI11gD/zNLauEPz+Pv/WUkMr
aF/xNue/vuB/PqkjtMTKoQ8vmfy+zU3w4Nda/348qQrspbcf4SH4Zs+4obsH
7gCX/FkeDoIz3TB2D1qzA5X3ErgYCD6taso1MOYELvbtE5kmrGfl9TTPrkkP
8N3HVauJ4EELLH567f6gUHFoxJHgGTvt7K3rgsHqnnWdMwQni3HsPn0rHOh2
CnVuITjJVXKH6tUoUHg+U+wh4VxOkz9JMCsngFqt9V4aIU6KhAcWnQ4nAbNA
QVNXgnuzdp/+wZECtuz3+ZuR4Mypa3+ubqQC0X/yDFdeIn93OvnTwEAm4DVa
Peubhfzco0Mus8kUEC3e+FSOEP9Rw789W0n54JPaRRfNZOQujUzHKGEFIOUa
HNQn5JHEh+GWF5AKLuz1mzAg5KOjxi0O/oIi0MSlN8MYi5xj9W6/YEgJMP2e
xjpFyHezq+XHP7KWghkvkWKvYEL9MX632dK7FBwR2N+8Kwj51rbN0SkuZSBJ
ae6imD9yz53i5z9avAVMfP12088Idc9reLH7bCWYbT83wPII+RPruqzs1SrA
c7lSPv4K8qupF0pOKVeD/SFOf3NdRi7zauxavXs1GL/iFOqmjVzT7jJDG1MN
UOKT9Ve+SNi3IvbxRI5a4PPiiftVZeS7zTsjeYXrgMBHcLjrL+Th5PSgXyqN
ICL/op/GPLoXfkUdiVItbgPDrbbG7FbIudmdSKTd3eAsZYf8xi50360VHbJ9
ojsIVgYz3RL+msFdmkWo90zVCMiQcXQ0qJ5EdTj7bYFY1jhoIdcJ+YqN476u
vVC5fmcKRJVNn6iaH8bd0qU3mztkBkSJnuIbOT+AeydDH4eyyhw46Hm2tle3
C/f92Yzh2+JpICwbHIKmrbibsnld2pVEA/9MS6c7nkNu6c8WzpdGA7IaN/ZJ
H0QeVXk6ljmHBgxYJQL3dKD+Z7RUPc3/DQ3UV2lJKQ63oPrwYqxBpJMGrMtc
SdxrqI/aO8UIqNswUPZ1j2v4QdSP5fXEk+s5MeAbyPJceBr1b/f1LI26uTGg
2b41PC8PuR9rEf8oHwYKfzl4UGWR33poeDZJFAPd1F1ddqfqcE8Pmv6SoYiB
wN0T4RPatbhvyQjRWjbGAH9F6BCr7Qfcz1/vdTYwxYBy/R/yOwnkp21U+V6Z
YUCr0VDAYhT1t99VHiWqW2Lgkde9imID5DzmYpWbH2LA6KFVhbB/JepD7FLq
cj0xUBQ3ebxf5i2qM361JAdvDDgn5glSM97gnvN+qumELwaMi8qPOfMjL/uL
605cAAYqXRzjVhjLUP46JMjNhdH99PAEueM17hgllL0unr7OreHvCpzQvPBr
hHlxmYwBeXt2Dz4ami9+Xtc9KZSIgdflaQKuJsiVjrN3aiVj4Cp7IZNFDJpf
1KPabeXTMaCkKm/VJ5+D+iL+hlMCGXRf1HptJpyN+o1MAdMluutwFl4bZ3uJ
uwhTXVVAFgakh0WW2noycY/ZeAtVsjGwEq8zY+iaivui8rTRt/++h2rbqFLv
oLlMxKjYwCQHAxEzHLIbcUm485HsDG7mYmD1mbay8Kl41C9J8xk10f2w1vX5
TPZY1Ffkvq+QzcPAt8Trf4v0ovnxb2qSzwDdDQcuv9vqhuZNbbVk2kEKBnRv
FSnOxoei+t8kR71L94IqWs6bU4G4/zis10Cm+5KcraB7rw+qb/ITSnV053G+
NKrs9gzVW8ogyxTdM+KuFNBOOaM6ryonRZ/HQdJBJZKBG5rHKaSRLE6666XJ
6j11u43q//9/Z7cYD//vO3vl/wHesGTi
        "]]},
      Annotation[#, "Charting`Private`Tag$905#1"]& ]}}, 
   GraphicsComplex3DBox[CompressedData["
1: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
rO1UYjDSPS5CdsbqzLtsLPV8ZBI8JxJtiNh94rWcaZX7m0H14Kpl7//vtY8X
ODmskxCu8n45QRKANvLJVjqWZ+QjFU3z8ERoOuVvWM1JQXtGIw59z8Zy9fR0
wonhWRBZ/212WHMaXoZd/LiD1fNI719iyP+8I0jY4+WZBXu9MiO3JAjw1fZk
ekUrGW1HpT5IU4kG4uZblRebU7C9MHBqy4CIUNA9Ac3b02DL2iQedJwfaHpM
YyIG3KHonHrzNi0VMT6+3MKn4gkfoql/PLL74fYPbrYKjPtKhJTNcvxCIVjI
ZFGddwrcvu7c1kBUdIJwTTz0Kg6I+xyrqQvzoPA20jGKYQ3teXWDb/EyxjXE
WLwGeQmEx7QfvighowdS4iUL70PBQrxbYR8NGZwaxLh7lJdRT3OXyBDFD8jv
9jivt6zC4zkhFvkrC+jbvvEcXlZXkFJltDZJosCZa+9fsLtNI+VHfZPcn1Xg
ydbomPZNCuikH5zguvYVkTY0mGPV7ZDxGmuQpvkqFF+lm8p71Y52PoqZ3LgW
go6wsB25x7sM13lOvSxiboNyYUlTh4BwFFsg3eOrRIQfESa8bd3DUKoVueiZ
iUNHnRVPzBTPgr8KdqYfTYPWBL8J01oYYn/E6dayhocyvEVmvM8CnMx8fLaY
3R/p8g++krHGuCbuvfqaEQlYVLmyLjbfQms7GflSGp0wk1h1TwxbPDTs5Df+
XAGQFg5bW4cqIUjlKDmFgwpaG79vuYQlQfxDh6XbIS/QbUP+snaMa8p2edd/
rMyDxwwz7OfFW9BwdWZFJWkNjD5yhATbjIBessObl5Mr6Cv+gLXZ2heQEhBW
ZS8bA5aI43ZdnGQkccVjz0ZGHzTVzK05FEwARXM23xfTZ1jkuqu6fQdwhx+2
FOXAw72snGQ/ZTK6I8TtVa7eBAr5TfLc+whQJt7kV11HRqn30qpuXnoLF71W
uIYxTmHmOchYiHFNcqtW1pXNF3Ap2t35J6ZP870enzMxfc7vTWx92ZYJt7+u
BV/DOKjOfzTXEeMaUbo7OrdlEmDmwdyxDYxrBEpkfr3HuKZ6wpqSfiMajl/b
lXBoGw9GoZdGdseT0d9J/gd1lU9B94y9pWEr1vdL8cYBiIzSdksE26fmAc8y
fQsJ45qKzcYhhhGM7/rF2e7LloHejFjLCMY1lZryH3dZriCr2+7ytNerQJMN
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
    "], {{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], Thickness[0.01], 
       Line3DBox[CompressedData["
1:eJwl1nfA1VMcx/GnoaFoSFZDU0sT0V7aS1tpR4RIe+80VNqLhjIq7WG0p4om
SoOibKW9i9eXP97PZ5xz7/3d3znnd59sbV6r1zFRQkLCwMQJCaHH/WmE3/gJ
aIRiSGy8pz4VVss9kUc3Sy6CYzEHJ/jG+J2vpdjKT+Qf4xfyHWlp+hz9mvai
jY1nohPkXKjP76L79BX4z/gaeExOIvfiU+MTuRfy6mbLRfF9zMGPfBP8wU9C
EzyOpOb21t+FT+Xe0eEn+Vn8yU+OueZ9LJeJXs4sT+RzowH/Jd2vr8h/znem
NWlbeoT2o08Yv4P2kV+id9O69Av6mbGS/HK+EvrI+eQ5fDH8EK/FSb4p/uKn
oCmKI5m5ffVp8LncNzqckpvhND8VzfAkkpvfT58Wa+R+0eHnWAuc4afhOTyF
FOb316fDWrk/8uvei3XA8ZiDX/jm+JufjifMWSSXjZ7/hvamzY1loZPkDvQR
2pB+RQ8Yq8Sv4WuhhJxSHsCnxzp5QHT4VW6Bs/wMtIj7iDvxm74lzvHvoCVK
IRVS43djrXCefxetUDpe67MG6u/B+jgLuAt/yK1xgZ+J1shq7mRdHnwtl4n3
1w2SM2BDfKa8gn8ag+QC8lz+8diT/F56Ql+FX893oXVpO3qU9o+9YvxPvg0u
8rNi3fWL5XLRyw/LU/i8+EYuG99TN1i+FxvlwUiDv2Jv4hI/G21RDmlxOj4b
l/k5aIfycQ+81xB9RmyShyAdzsjP4wr/Xuwv85bI5aOXs8lT+XzxLOF30+70
W2NP07VybVSQ75aH8vdhszwU6fG3/AKu8nPxArKbO02XHwfj7MV30w2T78eW
WE95JV851po/RIfpH+Xn8a/EuYwzTffRHvRH41XpBvmZ2AfyWdoe1/h5aB97
NO6XeW/qH8BW+U1kwDn5RVzn38eL8V1xLzLiPtyPB/AgHkKmeK7EuYh9hfPx
nMAN/gO8hMqxzrgQ5wY3+Q/RIfZPrIfrGa5/ENvk4Sioe18ujp9iPXCRfxm3
+NrGt/EfxVnnl/Kv0QpxtmKd4nlEXzaeg06P19ICtDHdQw/FtfHr+DqoGusm
j+AfivvI76Db44zwq/hOtEqcKfodHWGsEP8B/yROxhrjUqwTbvPz8QqqxbUg
Jy4bexX/8AvwKqrjHu81Up8JX8gjkQtX5P9+5LCQdIz3MXeG/Ci+k2vEOupG
yZmxI86TvDq+G0bJheUP+afQlN9PT8W18Rv5rrRenAF6jA6guY1fjfsb+yN+
Y+N+0e20W/zGGC9Bl8mv04rxDKMH4zVx/fw7fEEclmvGntK9JWfBTvktPIJr
8R5IjEXy68ht7rtyIRyRa8V+1I2Ws2JXPAfkT/hqGC0XkT+Ke0xL0Gb0AO1J
f457TTfJ9eOM8t/TPPrrscZIgsVyp9hrsffNGaN7GF/KY5AXN+Q3kBRL5DdQ
B/lwU9cZd2Cp3Bl1kR+3dF2QDMvkLngmzpfPGavLhq/ksSiA27E2SI7lcte4
X+bOlAvjqFwvzqbubTk76vE76e54FvKfxrXS6rQNPUz7xnzjRel8uSR+ib0k
b+YbxP6S/4m1RgqskLuhfjwHzBuny4E98rg4u4h/pLrrUmKl2B0N4qzEHoz1
ia1sTg/jd2KV3AMN47miH6/Lib3yeBTTLZBL4dfYQ/IWvmE84/gfEv3//19R
Y/8CC9MkCw==
        "],
        VertexColors->Automatic]},
      Annotation[#, "Charting`Private`Tag$45420#1"]& ]},
    VertexColors->CompressedData["
1:eJwV23c41e8fx/FSaRglKlFGwyykoRQvSVS0l8hIoVCihIw0vhRFysguZZO9
97E5OMMhpbLPiJLd/t2/f7iu09VxfO77ft/Px9WVrJXjCWu+OXPm3CVf5pHv
qm9q9olXsiHq/E1Z5m8maE7VpuI0N9RIHjn9hcrGtZhIvWXB2fgdrv81tvgR
Su+3rOR8YCPIoOZjr14uJEL0Q/+KhaD930jYMJeN6jMJc2gf8rC8yb8zlxEJ
h24qLXaGjec67+Nr7Apg6xf52KDwJa6+jivx4edg3VhIpp9kEQI72YIcozfw
v7vy4iUxDijzF+vbZRZjfXRdrGFCEgSO+ZQ6redA5jOfwVrrUvAFRi212p8G
Mc/k1p3qHEiFHG3oWF6OvQ833A3oeIvdZTdj5+pwsOntaXrq6wq4/Zbi2yOa
jbqRrdKTRzj4XT8Wr6BchYlm+VyB3hzYbwk355znwO6K6DqB6SokdsyO7AnM
QxSz6GyYHQeK7p97v5VV45HV+qSZrQVQsWmdc82dg3r7rx1lIRQ842+mBfwp
xCdB38sGfhyMLHsvtNq8BoyhnffvJhdj7PUWn0NhHIy9WORptrMWOz6sTzjm
WoonL6KOL0zgQC+wV/GNcB1aTl02SNEqh/6rlL66HA5kd4Suud1ZhxeLXZwv
DlXAKjJV9m01Bz1Vj/V2ZtZDj+ft62FchcikozIv2snz+WuZ/Z97A4yvyotP
q1RjRwK7Le0TeX8pt5Olpxrh/evJBbNVFJyfo63hPspBQdrO7RPKTSgzlLV/
9IuCWMed5gd+cZD9hWVaMtmEF8Xiu2xoNdjXvnH73iVcBAgXFF5pa8YD9bYK
1cJazN9X2LxbnIvRAWfj5IgWCDaxF6UG1uGY2EKJsY1cxMl17+RaUpEuqyLK
vVCPv6yDq9u2cbHF6N6R5btaYfmfOkvMoAFNaWpdGbpcHNqwKKWZrw1v+aNM
v69pxIzTkv2Fx7nQ/Uzbaf+xDcLPqyNK5jchMzTe4bYlF/4L9y0SzmvHwz6x
Fwc4Tbjf+ukErnGx+fsBYRltGqIPU038yppROiXE3ezFxXyayNaMVBpqa/ey
cuJbsFS9T0sqgAvZRQd/zl1Gh+85SbEgdypGWpyNGl9wMTh9qu/sDTqssmRF
1YxasfnMzJLoJC5WneUbkP1Mx5Hlw03lam0ImJR+6JTPReAyKb/cfQx0Bgvv
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
5e/wsOPZf3Ir/3bBvlfx2OtQFv4HPyibJw==
     "]], 
   {RGBColor[0.742077, 0.0624857, 0.00605783], PointSize[0.035], 
    Point3DBox[{0, 0, 1}], 
    {RGBColor[0.8280513333333334, 0.37499046666666663`, 0.3373718866666666], 
     Point3DBox[{-0.4998927504584702, 
      0.6960380937103969, -0.51540101876409}]}}},
  Boxed->False,
  ViewAngle->0.34]], "Output",
 CellChangeTimes->{
  3.700994329178206*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
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
cdZJ//W9OAGTITv6LH/dhqOvHxaQyyL5V5aUU9o4Wk6WSCqr8dIIlYVpfbNY
M2ucOj2uYxqL5D8iqpUpLy7pvNinmhSsKGLGc+qX2yLqVHdGbVl3UN32HPBs
LfIsBTzjiu3RA0cuzbMAFnQNzx5//PFm2f3rX/+aBDHujsViwrL/Rjd/fKH4
xVR30A+EePlqLkQlpfUtxa1vcSsSJjJWrmuFwhQtf5pQOOqftEDtBrzyaYjG
ZV/8KY+Gim/9RWFGuSmnmYq+RVqNGauLfn6faBMluSeu+VNKcJFwU/DROfjh
BSV1A46dkvG5L3Vd/bJ4ITAEokkaKzGCF0A8I2f9BUxTuw0Kmc7ZetRxtSI1
+88hN5htYWZbFNh2ORKKaHXWppaHtMKabCbbkNA2WwRjG4NAgfoV40PAhOgz
Oow5PsX8dU+rL7vZPkNOTqM2/QTcjU3XerVOlPO7eMxvMtT1uo27/hWXGjLV
5otlqlQqHi/xoicFOaCfX5mqSmsBUA+vWMky1fkkcK5kmgp0Yoq8Q871HO1S
C58/oZ78ZSfxDjm3Yk2vSkVT6m7NuYNH8cIZgYvwTsewc+fOqR/96Ed1ijQU
ChlFql+7du1aeu3999+vF16YhX+oxqs1FQ+DHAUGGjlqsdAvBzMLmYF1LHRw
kRQjHbKw6rNQL8CYn4DNyFl1JuIFGipNcumNIAW9+tUX/ROPQeIiV5rMVQjI
o46RlJnQFzV19Go3YqK0h8nYBmRs+8ynuMJUd/0iSYrO0tIgr8HPuvUElE5p
DHXPL1+l9m7frXlIuNb5pMn9DCkCFgfPSRWX9eQZ3vURURK3QfUR7PvozHkV
tWjIz3m0/yM5fr7sw9fPgdLvvfZbcBxuA5JSntUfJaDrT9wYRMqY0mJdKZ4+
Qz0Qtu40XamyfmO6EXQSaboR7HMlrHMRuX/KXjQds68DcuElNfVvpfj9PvrS
BqN1FWM6YdUlGdrE1BQZqiPjKBWR8tjrPWKkKGWRruEnppEl5xNSOZLTI5Cc
EhS3bzhEBH0CCPr2pk61c38fkDNtyNkK5Pzo/EeaYLgi89vf/tYSmM1Y7aVD
r7/+evXEE0/Q/ZtuugnLQI5eqvnHf/xH9eMf/5ieGxwcrOMm6NA+1KEDhpu8
VDOsnlyxVT3/2h5eFBVuFmOsQ01dyIqM1WSW60IBHRh166qLpKQfCSNaWo2r
JkV0/Mvh2BdNm6LfabIvmIZ87OiI1V0dhK9bNCuLM9jvbc46mrQJqaKPPeS4
l1ykCTQu0siCKCc/FDmmz5gWAMDxSNFw1MScuiYDXZA9Vx+/LuOkDjioteTp
82KyOyjkHFQvMTlpLz53PnARljbxGyItIWhe+20SphKBT58NijKl9gb6IDNn
SaeyWsUV1jN2G5FnrbGen6pvyvPbXB1PmoWss8rN+o3YmPlhDLpm4+mxCfuE
cvnd0nFzMc/6k8nt1NCKlZwaenZ1B7vyCnhx9DE7XBIpq6hY7SZYPnMJuxmY
mjo9rIud0gT73GsH1HOr91NuiEVdouadQs2WVjXcP/wxItE8VSqVTDVm3bp1
amRkxDwG3aoZvGHDBt2zoHv0/oJu/gB/zhFSwghR0RaqrTsPqcfue4UqNX2d
IaCihMgYC9ViPO3YdOQybdan48eJjiN2J7kJkXUn1fq/js4N5HxeYMA/L5Ab
YvUJ/tiihz/NdeeT21VHZ1yzsGZ+nmpUR8lJDQB01G3Ix88wH8t79/IVLucm
TLNeQ6kmICsxJk5QszgXInWzW5MaLVbVC8ufU/u279GNqUhFUwjxKyo6WsGc
MQlFeZ6XkEjm4Q5m4jwhmmbjyxQydfjkw4SPsuvMeWY1bn2OogVU37VY/OOH
Z9lm0XTdNlAvbGfO0lJroJGV1ukcjR1HmpkXdBzJtYFc6UlvuOCudBpZbQ8z
I9way/HSXnaxfommjNFRgiWbL2T9Fr6aXmmVPqN5mpj+Kqu0ynLbg8RNz04m
4aVATWcBkROTyVwcSBnLqt7uQdXdNWCIeazlmIr1x5iY89WDDz5o4iNmivi3
cuVK2ocdRHNzc1J6DWBfH/X34XPhcLiOoAvUWKXKGjYiGnYgqo7ubFFLHlpN
5OztCGGsxOu2J7lYg5cb1foVSOmT06yfpBo61pGY1pm7Rap1CTHzjVeDCDSe
sesRMwMQH4eJlXdinQZHE0n58bocUtdscPYRBbve2aPufnq3evP6O4iZE/AF
z3AKpJWXrJkQwlx9dbaGhRNmp99sKlVFxzX6Fdfc4FO/sALIumOPLpII/BuZ
es6v2NTRzBazFBTrnjjPgRLG1+KkT+HniMJ8jGuIbh42ctmjfc1q/OhRpK8x
Q2KJ6lyl1d9jvDiqHnilnYo+H0qZ2GgEvxneMZJ/um4pRQ/sxTreL7j4o+nG
5Stpm9NH9enXnKHKb0159vWyTZ+Z9Zsj5jKo2F5dNmxmo1ir09PqRdPTiq4M
6eXTxupQXREWyBzpCquW3S3q53cuU9feslS9+fp6n8yHjqv4QBxF8GVC0o6O
DlMFgoxTcxeXTa699lravWLFCr2acvDgQSoOPfDAA/rcrb8Q3Tvc59df/SWS
YbVq9e463StVIab0vLqikI61lcZ0tKme0vWXxys1lIVcvxvQs1t1HTvSvr+R
I20BRnKWOx7wMmBY6JvPYVaY7LN5j2Ezl2D1eohfcHXqT6P9/1h7z+g6z+TO
8z33vRcAg9TJdtue9sf9sN9m12Fmd2dndz1nZ84ZH3eUWlLbbrlzUre6lVuU
uhUp5qQsUaIoiZJIiWIWcwIIAiCIHC9yJkAiMMj+0raffSo+9bz3QvL4bJ/z
gi0wg/d3q+pfVf+iWFIoN+GQpIFgHMkLFL+3O9XBIauuUiGazyJ1hZFKI26J
tQr+XAtz6r+FThd+7oZhErHF+BrxnXIyPCmofo2eWV+4Xkc2Q38l0pMgSBGv
/qGiVSTlzHR9khrxObhnkLMMKUrgA2vFJDP8wAP0OR02jA6mYPg1Jt6J3kgJ
m2GsJo3LmBMVrVGCnC1ax7VoHY6L1jB8OMzUkqhUEXBlYenwhwfdqy+8lnMr
VjzhX24rHn7C/c2PH8fS9Vfrj2KvpNVTShOHbW7cvz7/o4XtppDZNvL8wadL
sEm5InOok4NnIQzHhwCa6D2Hnmhz300W5Z5DXq6cyCAgFZnLzAzgKM8AjiNs
umo8oj1I+MdCKyxbZ0Juu+8n97g1v9rkHv/ZOnfy3//POQ2fqRg3Tslb+2Xq
qi1Cm+wJXw2VGSorcyL1NJ2/4NY+tRq/VfhCh5BFHlNlzmqFCZ/Ja2i7qlBV
MGgl8BWUzTia8q/FkdOD5n/y+a992UfKjwT6IOte1lQ3hyEzdW9/0ODu2Xga
ZFusRCnX1XJ0VoYKc5z46sSBDB7JGnN2opBWt0uxSwJ3lyx3ceeE/ZGzU4bZ
+aNLQ+O8tcLjB1iXQs7LTRQRiTjnXZ4dMwLouFE5qHHy6J7D7rUXX3ePPvJk
zj3yyJP+dfnIiifcK89vdQd3H3Dvbj/ofrzmuPvNi2fcc++cdx3NndhAabvY
DjmvQPcXHOGkpNSMNTME0BtvpQRlR6TWQXEvoyfF2LYcaRvLGjTpxO1gdqiP
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
b/Ep5ReXpva6dnR7EuMd7mEOFCeQKf9QXpnXt/F5vcF4zRx/RXVkXl7Nl0Ud
z4wWShQTMxJgb9QHMWANutg/p+Sy4BEzqFHw4rnKCjfd1Q986cNRLFpbULiI
t6yACC86Bi3RxV2axlb1J6SR5h7QAnNnm2J9Po8E8PxjfYh4thgxm5EjyrPx
3Um23uD0ZGxSjIuT0Blj4KYZuJwCh7xpMjnKw8XwsQJ7Yb/2wJ28MMDAmSQy
77Z41h588Sw+I7CXM+JRu9lErgEW8svhRkmk4OaTyE+g7Sb2sX3//ffxc/C8
9dKrGMGAuAsnq93Xvvo1/Pz3//47PqFsZXEEtMh29z3/Ofi+TavWklcRCPqp
O7ZnPxZxPpGEGExu7l2l4oi6uadqpzmFzb+pfjs7YuZHEjV0GM4YOuQzl15n
yU8zWEuPh80rX7wlgNoSSEjrz3MFN8OuAlOXc6JK4iWTS2SpWX2u6J/eMrRp
6ZangCAnF8IkZKoGuFEWWbAiRTQWucSN+i89qCN99/vHfwv/DT8G8kcir5Ex
Lbjhj44Rbd+jZ7qzj8WOisxvqeE0ddFNEkoKUXxj7lRpDNhlFiNmWGuc4cuu
4r9t3C/7WvtFd0xyi6j8hr3pEva4KqBoJxpJRezUjoMi43R1Q+V+XVDF7NFE
uwJWccWBCVUitXPmv+pbth5V8urO1GPSOMJJI5dw0JvGGo7w6yuDX7d/ulxv
Rydsjn8qfsvdP//zP7sf/vCH+Plvf+tvfeC74Lp90PvtQw/j577sn6O790rQ
y6FjUd7t2v42fvc3b70VlgGQPvBQ6U6WuQ8/PBtsbMPslrUschO9A2Z8ZFl5
w74gnpRah9mAZ0+cxx3rlDs21tV2DtRkAnD41edKAExSe/YkdF9Db8BGvUKQ
T8qeXchp45r72YYH3V8JnTerGdKA8FIlB2m8/y5P5F1IJIx5QAzcsh6JzEf1
HP2Knd+9IwUqo9GxaAgyQBrWF+aDU0VldKMEHrCRAUwv1jYgnPpWFDZsUjGP
phbAbIRm8I+2sgp++TkazqI5mFmz0SpurOSy0NikrIBQITfOb8ozNvMcp+wT
XzkEJJwGiNRKGhRZ6j/6YCjdAP/Un21gHhswE+VCjka38h7JkHwOQkDxPPov
KdDY78u4Ps09u1xPe/t//LTU80vu4sWLGgy3Pfeiqzt60n31K1/F/37onvtc
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
+j8Nflxf\
\>"]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Example: SimulateProtocol with GateSet and NoiseModel", "Subsection",
 CellChangeTimes->{{3.7006647749292707`*^9, 3.700664793014469*^9}}],

Cell["Set up a noise model and a protocol and simulate.", "Text",
 CellChangeTimes->{{3.70066518367332*^9, 3.700665196829412*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Run", " ", "this", " ", "for", " ", 
     RowBox[{"parallelization", ":", " ", 
      RowBox[{"LaunchKernels", "[", "]"}]}]}], ";", " ", 
    RowBox[{"ParallelNeeds", "[", "\"\<RBSim`\>\"", "]"}], ";"}], " ", "*)"}],
   "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"nm", "=", 
     RowBox[{"NoiseModel", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"DistortionOperator", "\[Rule]", 
        RowBox[{"FastExponentialDistortion", "[", 
         RowBox[{"0.01", ",", "4", ",", "20"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"GateNoise", "->", 
        RowBox[{"IndependentNoise", "[", 
         RowBox[{"Kraus", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"Sqrt", "[", "0.01", "]"}], 
             RowBox[{"TP", "[", "X", "]"}]}], ",", 
            RowBox[{
             RowBox[{"Sqrt", "[", "0.99", "]"}], 
             RowBox[{"TP", "[", "I", "]"}]}]}], "}"}], "]"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"protocol", "=", 
     RowBox[{"RBProtocol", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "5", ",", "20", ",", "100"}], "}"}], ",", 
       "\[IndentingNewLine]", "30", ",", "1", ",", "\[IndentingNewLine]", 
       RowBox[{"Projector", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}], "]"}], ",", 
       RowBox[{"Projector", "[", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}], "]"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"out", "=", 
    RowBox[{"SimulateProtocol", "[", "\[IndentingNewLine]", 
     RowBox[{
     "$gaussianQubitGateSet", ",", "\[IndentingNewLine]", "nm", ",", 
      "\[IndentingNewLine]", "protocol"}], "\[IndentingNewLine]", 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.700664993987941*^9, 3.700665066995852*^9}, {
  3.70066510326081*^9, 3.700665107533292*^9}, {3.7006651500190783`*^9, 
  3.7006651585210667`*^9}, {3.700821471698897*^9, 3.700821473117477*^9}, {
  3.700821661565982*^9, 3.7008216617178307`*^9}, {3.700821743465642*^9, 
  3.7008217457331123`*^9}, {3.70082184351973*^9, 3.700821852268368*^9}, {
  3.7008222781878653`*^9, 3.700822329603306*^9}, {3.700906665811378*^9, 
  3.7009066919137707`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "0.9801976016652646`", "}"}], ",", 
      RowBox[{"{", "0.9396252097654221`", "}"}], ",", 
      RowBox[{"{", "0.8949183372696932`", "}"}], ",", 
      RowBox[{"{", "0.8949183372696932`", "}"}], ",", 
      RowBox[{"{", "0.9632567835675735`", "}"}], ",", 
      RowBox[{"{", "0.9737567980787614`", "}"}], ",", 
      RowBox[{"{", "0.9802022328287388`", "}"}], ",", 
      RowBox[{"{", "0.9737567980787614`", "}"}], ",", 
      RowBox[{"{", "0.9396252097654221`", "}"}], ",", 
      RowBox[{"{", "0.8949183372696932`", "}"}], ",", 
      RowBox[{"{", "0.977144440621522`", "}"}], ",", 
      RowBox[{"{", "0.9634740005817409`", "}"}], ",", 
      RowBox[{"{", "0.9802`", "}"}], ",", 
      RowBox[{"{", "0.8949183372696932`", "}"}], ",", 
      RowBox[{"{", "0.8949183372696932`", "}"}], ",", 
      RowBox[{"{", "0.9613422427738801`", "}"}], ",", 
      RowBox[{"{", "0.9632567835675735`", "}"}], ",", 
      RowBox[{"{", "0.8949183372696932`", "}"}], ",", 
      RowBox[{"{", "0.9632567835675735`", "}"}], ",", 
      RowBox[{"{", "0.9396252097654221`", "}"}], ",", 
      RowBox[{"{", "0.977144440621522`", "}"}], ",", 
      RowBox[{"{", "0.977144440621522`", "}"}], ",", 
      RowBox[{"{", "0.9802022328287388`", "}"}], ",", 
      RowBox[{"{", "0.9585496929740057`", "}"}], ",", 
      RowBox[{"{", "0.9634740005817409`", "}"}], ",", 
      RowBox[{"{", "0.9737567980787614`", "}"}], ",", 
      RowBox[{"{", "0.9801976016652646`", "}"}], ",", 
      RowBox[{"{", "0.9801976016652646`", "}"}], ",", 
      RowBox[{"{", "0.9737567980787614`", "}"}], ",", 
      RowBox[{"{", "0.9802022328287388`", "}"}]}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "0.9281385467817065`", "}"}], ",", 
      RowBox[{"{", "0.8745701009548351`", "}"}], ",", 
      RowBox[{"{", "0.9051913521833905`", "}"}], ",", 
      RowBox[{"{", "0.9186067850725611`", "}"}], ",", 
      RowBox[{"{", "0.6761663111097468`", "}"}], ",", 
      RowBox[{"{", "0.9575023804378942`", "}"}], ",", 
      RowBox[{"{", "0.9173459762370764`", "}"}], ",", 
      RowBox[{"{", "0.8142555293395594`", "}"}], ",", 
      RowBox[{"{", "0.8512852269491464`", "}"}], ",", 
      RowBox[{"{", "0.8872993710533773`", "}"}], ",", 
      RowBox[{"{", "0.8353655685875552`", "}"}], ",", 
      RowBox[{"{", "0.9523216015024378`", "}"}], ",", 
      RowBox[{"{", "0.950119283103103`", "}"}], ",", 
      RowBox[{"{", "0.8281970370862617`", "}"}], ",", 
      RowBox[{"{", "0.8642165877714767`", "}"}], ",", 
      RowBox[{"{", "0.9228952800154514`", "}"}], ",", 
      RowBox[{"{", "0.9478495150269014`", "}"}], ",", 
      RowBox[{"{", "0.9049299449160617`", "}"}], ",", 
      RowBox[{"{", "0.9258671839086967`", "}"}], ",", 
      RowBox[{"{", "0.8189442821629103`", "}"}], ",", 
      RowBox[{"{", "0.8316468313424947`", "}"}], ",", 
      RowBox[{"{", "0.859479796816235`", "}"}], ",", 
      RowBox[{"{", "0.9251620318840053`", "}"}], ",", 
      RowBox[{"{", "0.9156049445375813`", "}"}], ",", 
      RowBox[{"{", "0.821386861936019`", "}"}], ",", 
      RowBox[{"{", "0.8875369355565933`", "}"}], ",", 
      RowBox[{"{", "0.8223405512393404`", "}"}], ",", 
      RowBox[{"{", "0.8983704515428671`", "}"}], ",", 
      RowBox[{"{", "0.9046843478094935`", "}"}], ",", 
      RowBox[{"{", "0.8359917214301686`", "}"}]}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "0.8949476499463153`", "}"}], ",", 
      RowBox[{"{", "0.383249173538874`", "}"}], ",", 
      RowBox[{"{", "0.7744768262951743`", "}"}], ",", 
      RowBox[{"{", "0.8209273631198486`", "}"}], ",", 
      RowBox[{"{", "0.5883356319642944`", "}"}], ",", 
      RowBox[{"{", "0.5163284628785264`", "}"}], ",", 
      RowBox[{"{", "0.831774405702124`", "}"}], ",", 
      RowBox[{"{", "0.8697785202110069`", "}"}], ",", 
      RowBox[{"{", "0.8358503081571378`", "}"}], ",", 
      RowBox[{"{", "0.7637576027368562`", "}"}], ",", 
      RowBox[{"{", "0.32595246575699555`", "}"}], ",", 
      RowBox[{"{", "0.6497443511869266`", "}"}], ",", 
      RowBox[{"{", "0.7012460423087807`", "}"}], ",", 
      RowBox[{"{", "0.8424151097193529`", "}"}], ",", 
      RowBox[{"{", "0.8218931228863696`", "}"}], ",", 
      RowBox[{"{", "0.512830286279224`", "}"}], ",", 
      RowBox[{"{", "0.6695518680281551`", "}"}], ",", 
      RowBox[{"{", "0.77941018898665`", "}"}], ",", 
      RowBox[{"{", "0.6244653196528949`", "}"}], ",", 
      RowBox[{"{", "0.7275707796365368`", "}"}], ",", 
      RowBox[{"{", "0.5215241453837017`", "}"}], ",", 
      RowBox[{"{", "0.6508030931643625`", "}"}], ",", 
      RowBox[{"{", "0.5131963167082442`", "}"}], ",", 
      RowBox[{"{", "0.5956614323752742`", "}"}], ",", 
      RowBox[{"{", "0.8668459310621859`", "}"}], ",", 
      RowBox[{"{", "0.7788373929338415`", "}"}], ",", 
      RowBox[{"{", "0.39580704530628497`", "}"}], ",", 
      RowBox[{"{", "0.7597877176214682`", "}"}], ",", 
      RowBox[{"{", "0.39621419248486284`", "}"}], ",", 
      RowBox[{"{", "0.6946349901295492`", "}"}]}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "0.6140155835589391`", "}"}], ",", 
      RowBox[{"{", "0.564113598238106`", "}"}], ",", 
      RowBox[{"{", "0.4991645537177298`", "}"}], ",", 
      RowBox[{"{", "0.3701451369303454`", "}"}], ",", 
      RowBox[{"{", "0.5517968881740543`", "}"}], ",", 
      RowBox[{"{", "0.5373656603313837`", "}"}], ",", 
      RowBox[{"{", "0.5441554140642393`", "}"}], ",", 
      RowBox[{"{", "0.5406234119124789`", "}"}], ",", 
      RowBox[{"{", "0.4361268273013892`", "}"}], ",", 
      RowBox[{"{", "0.509932819177469`", "}"}], ",", 
      RowBox[{"{", "0.6195791712650949`", "}"}], ",", 
      RowBox[{"{", "0.6144505816053494`", "}"}], ",", 
      RowBox[{"{", "0.5186930847548625`", "}"}], ",", 
      RowBox[{"{", "0.38323346733322383`", "}"}], ",", 
      RowBox[{"{", "0.5097972472360581`", "}"}], ",", 
      RowBox[{"{", "0.5032784824737256`", "}"}], ",", 
      RowBox[{"{", "0.37371052859113374`", "}"}], ",", 
      RowBox[{"{", "0.381775180421149`", "}"}], ",", 
      RowBox[{"{", "0.592169045538186`", "}"}], ",", 
      RowBox[{"{", "0.605005285991453`", "}"}], ",", 
      RowBox[{"{", "0.4191967586429018`", "}"}], ",", 
      RowBox[{"{", "0.6123498738910558`", "}"}], ",", 
      RowBox[{"{", "0.38229194975332936`", "}"}], ",", 
      RowBox[{"{", "0.48426166557950545`", "}"}], ",", 
      RowBox[{"{", "0.39935520995424467`", "}"}], ",", 
      RowBox[{"{", "0.38415898156545447`", "}"}], ",", 
      RowBox[{"{", "0.4720670189518028`", "}"}], ",", 
      RowBox[{"{", "0.5113025650055303`", "}"}], ",", 
      RowBox[{"{", "0.5178919562157056`", "}"}], ",", 
      RowBox[{"{", "0.44500963942186667`", "}"}]}], "}"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.700665175481551*^9, 3.700819270779697*^9, 3.7008193773288*^9, 
   3.700819466114861*^9, 3.7008195266275253`*^9, 3.700819631042642*^9, 
   3.700820780029233*^9, 3.700821011936675*^9, {3.7008211080135593`*^9, 
   3.700821123253265*^9}, 3.700821208156756*^9, {3.7008214267028847`*^9, 
   3.700821477752096*^9}, {3.700821550917622*^9, 3.700821565345656*^9}, 
   3.700821596455017*^9, {3.700821629386574*^9, 3.700821654204204*^9}, 
   3.7008217405793247`*^9, 3.700821779003603*^9, 3.7008219007218313`*^9, 
   3.700906661414686*^9, 3.7009067445815697`*^9, 3.70092999479967*^9, 
   3.700994093013925*^9}]
}, Open  ]],

Cell["\<\
Plot a histogram of the results at each of the sequence lengths, 1,5,20,100\
\>", "Text",
 CellChangeTimes->{{3.70090689384743*^9, 3.700906916679996*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Histogram", "[", 
    RowBox[{"#", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0.05"}], "}"}]}], "]"}], "&"}], "/@", 
  RowBox[{"out", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "1", ",", "All", ",", "1"}], "]"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.700906825768559*^9, 3.700906863899753*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{
     {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
      Opacity[0.5459999999999999], Thickness[Small]}], {}, 
      {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
       EdgeForm[{Opacity[0.5459999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.8500000000000001, 0}, {0.9, 6}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{148.10294117647064`, 156.15196078431376`}, {
            9.677837788488983, 36.00499344580688}}],
          StatusArea[#, 6]& ,
          TagBoxNote->"6"],
         StyleBox["6", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[6, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.9, 0}, {0.9500000000000001, 3}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{155.65196078431376`, 163.7009803921569}, {
            22.59141561714793, 36.00499344580688}}],
          StatusArea[#, 3]& ,
          TagBoxNote->"3"],
         StyleBox["3", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[3, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.9500000000000001, 0}, {1., 21}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{163.2009803921569, 
            171.25000000000003`}, {-54.89005135480577, 36.00499344580688}}],
          StatusArea[#, 21]& ,
          TagBoxNote->"21"],
         StyleBox["21", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[21, {}], "Tooltip"]& ]}, {}, {}}, {{}, {}, {}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{-0.02, 0},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{0., 1.}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{
     {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
      Opacity[0.5459999999999999], Thickness[Small]}], {}, 
      {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
       EdgeForm[{Opacity[0.5459999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.65, 0}, {0.7000000000000001, 1}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{117.56372549019608`, 125.66176470588238`}, {
            27.852439126921965`, 36.62353236428617}}],
          StatusArea[#, 1]& ,
          TagBoxNote->"1"],
         StyleBox["1", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[1, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.8, 0}, {0.8500000000000001, 8}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{140.35784313725492`, 
            148.4558823529412}, {-30.045213534627486`, 36.62353236428617}}],
          StatusArea[#, 8]& ,
          TagBoxNote->"8"],
         StyleBox["8", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[8, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.8500000000000001, 0}, {0.9, 7}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{147.9558823529412, 
            156.05392156862746`}, {-21.77412029726328, 36.62353236428617}}],
          StatusArea[#, 7]& ,
          TagBoxNote->"7"],
         StyleBox["7", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[7, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.9, 0}, {0.9500000000000001, 11}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{155.55392156862746`, 
            163.65196078431373`}, {-54.85849324672011, 36.62353236428617}}],
          StatusArea[#, 11]& ,
          TagBoxNote->"11"],
         StyleBox["11", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[11, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.9500000000000001, 0}, {1., 3}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{163.15196078431373`, 171.25}, {
            11.310252652193547`, 36.62353236428617}}],
          StatusArea[#, 3]& ,
          TagBoxNote->"3"],
         StyleBox["3", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[3, {}], "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{-0.02, 0},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{0., 1.}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{
     {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
      Opacity[0.5459999999999999], Thickness[Small]}], {}, 
      {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
       EdgeForm[{Opacity[0.5459999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.30000000000000004`, 0}, {0.35000000000000003`, 1},
              "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{60.94607843137256, 69.28921568627452}, {
            18.883543730379355`, 38.1669296629742}}],
          StatusArea[#, 1]& ,
          TagBoxNote->"1"],
         StyleBox["1", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[1, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.35000000000000003`, 0}, {0.4, 3}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{68.78921568627452, 
            77.13235294117648}, {-18.683228134810335`, 38.1669296629742}}],
          StatusArea[#, 3]& ,
          TagBoxNote->"3"],
         StyleBox["3", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[3, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{0.5, 0}, {0.55, 4}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{92.3186274509804, 
            100.66176470588236`}, {-37.466614067405175`, 38.1669296629742}}],
          StatusArea[#, 4]& ,
          TagBoxNote->"4"],
         StyleBox["4", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[4, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.55, 0}, {0.6000000000000001, 2}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{100.16176470588236`, 108.50490196078434`}, {
            0.10015779778451162`, 38.1669296629742}}],
          StatusArea[#, 2]& ,
          TagBoxNote->"2"],
         StyleBox["2", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[2, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.6000000000000001, 0}, {0.65, 2}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{108.00490196078434`, 116.34803921568628`}, {
            0.10015779778451162`, 38.1669296629742}}],
          StatusArea[#, 2]& ,
          TagBoxNote->"2"],
         StyleBox["2", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[2, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.65, 0}, {0.7000000000000001, 3}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{115.84803921568628`, 
            124.19117647058826`}, {-18.683228134810335`, 38.1669296629742}}],
          StatusArea[#, 3]& ,
          TagBoxNote->"3"],
         StyleBox["3", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[3, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.7000000000000001, 0}, {0.75, 2}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{123.69117647058826`, 132.0343137254902}, {
            0.10015779778451162`, 38.1669296629742}}],
          StatusArea[#, 2]& ,
          TagBoxNote->"2"],
         StyleBox["2", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[2, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{0.75, 0}, {0.8, 5}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{131.5343137254902, 
            139.87745098039215`}, {-56.250000000000014`, 38.1669296629742}}],
          StatusArea[#, 5]& ,
          TagBoxNote->"5"],
         StyleBox["5", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[5, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.8, 0}, {0.8500000000000001, 5}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{139.37745098039215`, 
            147.72058823529412`}, {-56.250000000000014`, 38.1669296629742}}],
          StatusArea[#, 5]& ,
          TagBoxNote->"5"],
         StyleBox["5", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[5, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.8500000000000001, 0}, {0.9, 3}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{147.22058823529412`, 
            155.56372549019608`}, {-18.683228134810335`, 38.1669296629742}}],
          StatusArea[#, 3]& ,
          TagBoxNote->"3"],
         StyleBox["3", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[3, {}], 
         "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{-0.02, 0},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{0., 1.}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{
     {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
      Opacity[0.5459999999999999], Thickness[Small]}], {}, 
      {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
       EdgeForm[{Opacity[0.5459999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.35000000000000003`, 0}, {0.4, 7}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{68.78921568627452, 
            77.13235294117648}, {-35.66196398250717, 37.884536866472764`}}],
          StatusArea[#, 7]& ,
          TagBoxNote->"7"],
         StyleBox["7", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[7, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{0.4, 0}, {0.45, 3}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{76.63235294117648, 84.97549019607844}, {
            6.078893645481365, 37.884536866472764`}}],
          StatusArea[#, 3]& ,
          TagBoxNote->"3"],
         StyleBox["3", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[3, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{0.45, 0}, {0.5, 3}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{84.47549019607844, 92.8186274509804}, {
            6.078893645481365, 37.884536866472764`}}],
          StatusArea[#, 3]& ,
          TagBoxNote->"3"],
         StyleBox["3", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[3, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{0.5, 0}, {0.55, 9}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{92.3186274509804, 
            100.66176470588236`}, {-56.53239279650143, 37.884536866472764`}}],
          
          StatusArea[#, 9]& ,
          TagBoxNote->"9"],
         StyleBox["9", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[9, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.55, 0}, {0.6000000000000001, 3}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{100.16176470588236`, 108.50490196078434`}, {
            6.078893645481365, 37.884536866472764`}}],
          StatusArea[#, 3]& ,
          TagBoxNote->"3"],
         StyleBox["3", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[3, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.6000000000000001, 0}, {0.65, 5}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{108.00490196078434`, 
            116.34803921568628`}, {-14.791535168512901`, 
            37.884536866472764`}}],
          StatusArea[#, 5]& ,
          TagBoxNote->"5"],
         StyleBox["5", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[5, {}], "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{-0.02, 0},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{0., 1.}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{{3.700906837495832*^9, 3.70090686441041*^9}, 
   3.70092999553012*^9, 3.7009941000032663`*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Example: SimulateProtocol with GateNoiseGateSet", "Subsection",
 CellChangeTimes->{{3.700915737431404*^9, 3.700915749732452*^9}}],

Cell[TextData[{
 "Compile a distortion noise model into a depth 2 ",
 StyleBox["GateNoiseGateSet", "Input"],
 " object."
}], "Text",
 CellChangeTimes->{{3.700915626889331*^9, 3.700915651884355*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"nm", "=", 
   RowBox[{"NoiseModel", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"DistortionOperator", "\[Rule]", 
      RowBox[{"FastExponentialDistortion", "[", 
       RowBox[{"0.005", ",", "1", ",", "0"}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"DistortionMultiplier", "\[Rule]", "1"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"GateNoise", "\[Rule]", 
      RowBox[{"IndependentNoise", "[", 
       RowBox[{"Kraus", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"Sqrt", "[", "0.991", "]"}], " ", 
           RowBox[{"TP", "[", "I", "]"}]}], ",", 
          RowBox[{
           RowBox[{"Sqrt", "[", "0.003", "]"}], " ", 
           RowBox[{"TP", "[", "X", "]"}]}], ",", 
          RowBox[{
           RowBox[{"Sqrt", "[", "0.003", "]"}], " ", 
           RowBox[{"TP", "[", "Y", "]"}]}], ",", 
          RowBox[{
           RowBox[{"Sqrt", "[", "0.003", "]"}], " ", 
           RowBox[{"TP", "[", "Z", "]"}]}]}], "}"}], "]"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"gs", "=", 
  RowBox[{"CompileGateNoise", "[", 
   RowBox[{"$gaussianQubitGateSet", ",", "nm", ",", "2"}], "]"}]}]}], "Input",\

 CellChangeTimes->{{3.700823472528864*^9, 3.7008234758473673`*^9}, {
   3.700828162657674*^9, 3.700828171878953*^9}, {3.700828229754594*^9, 
   3.700828241569491*^9}, {3.700832633701305*^9, 3.70083267759446*^9}, {
   3.700832717057557*^9, 3.700832723357191*^9}, 3.700838103579818*^9, {
   3.700909826566321*^9, 3.700909854673307*^9}, {3.700909914456113*^9, 
   3.7009099218657722`*^9}, {3.7009101345252028`*^9, 
   3.7009101867619667`*^9}, {3.7009129381866217`*^9, 3.700912942660808*^9}, 
   3.700913339333932*^9, {3.700913791387591*^9, 3.7009138117209673`*^9}, {
   3.700915621240292*^9, 3.700915621301545*^9}, 3.700915955581543*^9, 
   3.700916320878561*^9, {3.700916378416637*^9, 3.7009163785411654`*^9}, {
   3.7009984077763577`*^9, 3.700998422200746*^9}, 3.7009989618820877`*^9, {
   3.700999172967292*^9, 3.700999174627684*^9}, 3.7009992479149714`*^9, 
   3.700999496904565*^9, {3.700999612573197*^9, 3.700999713424996*^9}, {
   3.70099982437488*^9, 3.700999829466302*^9}}],

Cell[BoxData[
 RowBox[{"\<\"GateNoiseGateSet\"\>", "[", 
  RowBox[{
   RowBox[{
   "GateSetName", "\[Rule]", "\<\"\\\"Gaussian 2-design on Qubits\\\"\"\>"}], 
   ",", 
   RowBox[{"Dimension", "\[Rule]", "2"}], ",", 
   RowBox[{"Size", "\[Rule]", "12"}], ",", "\<\"...\"\>"}], "]"}]], "Output",
 CellChangeTimes->{3.700915957540188*^9, 3.7009160613618107`*^9, 
  3.70091627727343*^9, 3.7009163230495996`*^9, 3.700916381169649*^9, 
  3.700916591035211*^9, 3.700929997467362*^9, 3.700930165368825*^9, 
  3.700931074940316*^9, 3.700931148634519*^9, 3.7009408102918*^9, 
  3.700993466696847*^9, 3.700998319530653*^9, 3.7009984260518703`*^9, 
  3.700998964816042*^9, 3.700999176047206*^9, 3.700999248811944*^9, 
  3.700999498316547*^9, 3.7009997214396667`*^9, 3.700999831679954*^9}]
}, Open  ]],

Cell["Instantiate an RB noise model", "Text",
 CellChangeTimes->{{3.700915666889501*^9, 3.700915718497623*^9}, {
  3.7009157963801403`*^9, 3.700915806380643*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"protocol", "=", 
   RowBox[{"RBProtocol", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "5", ",", "20", ",", "100"}], "}"}], ",", "100", ",", 
     "1", ",", 
     RowBox[{"TP", "[", "U", "]"}], ",", 
     RowBox[{"DiagonalMatrix", "[", 
      RowBox[{"{", 
       RowBox[{"0.9", ",", "0.1"}], "}"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.700832737573015*^9, 3.70083274355943*^9}, {
   3.700837800963561*^9, 3.700837819645132*^9}, {3.700837963773767*^9, 
   3.700838090477025*^9}, 3.700838518411509*^9, {3.700838567496525*^9, 
   3.700838610506982*^9}, {3.7008386435148983`*^9, 3.700838716009123*^9}, {
   3.700838748186592*^9, 3.7008388530477657`*^9}, {3.7008389482992153`*^9, 
   3.7008390277341146`*^9}, {3.700839304942461*^9, 3.700839305068981*^9}, {
   3.700910040998983*^9, 3.700910041340233*^9}, {3.700910197848524*^9, 
   3.700910227583064*^9}, {3.700913377587985*^9, 3.700913381834599*^9}, 
   3.700915786979535*^9, {3.700916334850033*^9, 3.700916336274838*^9}, 
   3.700916441169395*^9, 3.700929382329914*^9, 3.700930313831435*^9, {
   3.700930914616617*^9, 3.700930926504488*^9}, {3.700931204676732*^9, 
   3.700931216351468*^9}, {3.700998434277507*^9, 3.700998437369553*^9}, {
   3.7009993625489807`*^9, 3.7009993716923943`*^9}, {3.700999417528872*^9, 
   3.70099942209554*^9}, {3.7009996007422*^9, 3.70099960681384*^9}}],

Cell[TextData[{
 "We see that the compiled ",
 StyleBox["GateNoiseGateSet", "Input"],
 " is way faster, for obvious reasons:"
}], "Text",
 CellChangeTimes->{{3.700916510901944*^9, 3.70091652756573*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"out1", "=", 
     RowBox[{"SimulateProtocol", "[", 
      RowBox[{"gs", ",", "protocol"}], "]"}]}], ";"}], ")"}], "//", 
  "AbsoluteTiming"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"out2", "=", 
     RowBox[{"SimulateProtocol", "[", 
      RowBox[{"$gaussianQubitGateSet", ",", "nm", ",", "protocol"}], "]"}]}], 
    ";"}], ")"}], "//", "AbsoluteTiming"}]}], "Input",
 CellChangeTimes->{{3.700999578998311*^9, 3.700999579297103*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.866621`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.700998450769627*^9, 3.700998465298954*^9}, 
   3.700998977095632*^9, 3.700999201208188*^9, 3.7009992607958727`*^9, 
   3.700999507013165*^9, 3.700999740510538*^9, 3.70099983594902*^9}],

Cell[BoxData[
 DynamicBox[ToBoxes[
   With[{RBSim`Private`x = 
     RBSim`Private`j$993386/RBSim`Private`totalGates$993386}, 
    Row[{
      ProgressIndicator[RBSim`Private`x], RBSim`Private`x}]], StandardForm],
  Evaluator->"Local",
  ImageSizeCache->{241., {5., 11.}}]], "PrintTemporary",
 CellChangeTimes->{3.700999835988634*^9}]
}, Open  ]],

Cell["They display similar histograms:", "Text",
 CellChangeTimes->{{3.700999839447191*^9, 3.700999845457034*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Histogram", "[", 
    RowBox[{"#", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0.05"}], "}"}]}], "]"}], "&"}], "/@", 
  RowBox[{"out1", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "1", ",", "All", ",", "1"}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Histogram", "[", 
    RowBox[{"#", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0.05"}], "}"}]}], "]"}], "&"}], "/@", 
  RowBox[{"out2", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "1", ",", "All", ",", "1"}], "]"}], "]"}]}]}], "Input",\

 CellChangeTimes->{{3.700999329612872*^9, 3.700999331214806*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{
     {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
      Opacity[0.5459999999999999], Thickness[Small]}], {}, 
      {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
       EdgeForm[{Opacity[0.5459999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.7000000000000001, 0}, {0.75, 21}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{125.45588235294117`, 
            133.5049019607843}, {-0.8208740156446481, 37.645044800612666`}}],
          StatusArea[#, 21]& ,
          TagBoxNote->"21"],
         StyleBox["21", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[21, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{0.75, 0}, {0.8, 50}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{133.0049019607843, 
            141.05392156862746`}, {-53.249999999999986`, 
            37.645044800612666`}}],
          StatusArea[#, 50]& ,
          TagBoxNote->"50"],
         StyleBox["50", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[50, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.8, 0}, {0.8500000000000001, 29}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{140.55392156862746`, 
            148.6029411764706}, {-15.284081183742671`, 37.645044800612666`}}],
          
          StatusArea[#, 29]& ,
          TagBoxNote->"29"],
         StyleBox["29", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[29, {}], "Tooltip"]& ]}, {}, {}}, {{}, {}, {}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{-0.02, 0},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{0., 1.}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{
     {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
      Opacity[0.5459999999999999], Thickness[Small]}], {}, 
      {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
       EdgeForm[{Opacity[0.5459999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.6000000000000001, 0}, {0.65, 20}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{110.3578431372549, 118.40686274509804`}, {
            14.546283600459496`, 37.64504480061266}}],
          StatusArea[#, 20]& ,
          TagBoxNote->"20"],
         StyleBox["20", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[20, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.65, 0}, {0.7000000000000001, 80}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{117.90686274509804`, 
            125.95588235294117`}, {-53.24999999999999, 37.64504480061266}}],
          StatusArea[#, 80]& ,
          TagBoxNote->"80"],
         StyleBox["80", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[80, {}], "Tooltip"]& ]}, {}, {}}, {{}, {}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{-0.02, 0},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{0., 1.}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{
     {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
      Opacity[0.5459999999999999], Thickness[Small]}], {}, 
      {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
       EdgeForm[{Opacity[0.5459999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{0.5, 0}, {0.55, 100}, "RoundingRadius" -> 0]},
           ImageSizeCache->{{97.71078431372548, 
            105.51470588235294`}, {-52.24999999999999, 35.7101407486447}}],
          StatusArea[#, 100]& ,
          TagBoxNote->"100"],
         StyleBox["100", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[100, {}], "Tooltip"]& ]}, {}, {}}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{-0.02, 0},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{0., 1.}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{
     {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
      Opacity[0.5459999999999999], Thickness[Small]}], {}, 
      {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
       EdgeForm[{Opacity[0.5459999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{0.5, 0}, {0.55, 100}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{97.71078431372548, 
            105.51470588235294`}, {-52.24999999999999, 35.7101407486447}}],
          StatusArea[#, 100]& ,
          TagBoxNote->"100"],
         StyleBox["100", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[100, {}], "Tooltip"]& ]}, {}, {}}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{-0.02, 0},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{0., 1.}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.700930963766706*^9, 3.7009312525497637`*^9, 3.700940889907736*^9, 
   3.7009935118083344`*^9, 3.7009983740741653`*^9, {3.700998452839226*^9, 
   3.700998466238166*^9}, 3.700999151108409*^9, 3.7009992337051287`*^9, 
   3.700999332153907*^9, 3.7009994075626087`*^9, 3.700999455771207*^9, 
   3.7009995394437103`*^9, 3.700999805687307*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{
     {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
      Opacity[0.5459999999999999], Thickness[Small]}], {}, 
      {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
       EdgeForm[{Opacity[0.5459999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.7000000000000001, 0}, {0.75, 18}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{125.45588235294119`, 133.5049019607843}, {
            5.013363200408442, 39.41150500063819}}],
          StatusArea[#, 18]& ,
          TagBoxNote->"18"],
         StyleBox["18", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[18, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{0.75, 0}, {0.8, 48}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{133.0049019607843, 
            141.05392156862746`}, {-51.48353979997449, 39.41150500063819}}],
          StatusArea[#, 48]& ,
          TagBoxNote->"48"],
         StyleBox["48", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[48, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.8, 0}, {0.8500000000000001, 34}, "RoundingRadius" -> 
             0]},
           
           ImageSizeCache->{{140.55392156862746`, 
            148.6029411764706}, {-25.11831839979579, 39.41150500063819}}],
          StatusArea[#, 34]& ,
          TagBoxNote->"34"],
         StyleBox["34", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[34, {}], "Tooltip"]& ]}, {}, {}}, {{}, {}, {}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{-0.02, 0},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{0., 1.}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{
     {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
      Opacity[0.5459999999999999], Thickness[Small]}], {}, 
      {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
       EdgeForm[{Opacity[0.5459999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.6000000000000001, 0}, {0.65, 17}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{110.3578431372549, 118.40686274509804`}, {
            16.990345715560913`, 36.00499344580688}}],
          StatusArea[#, 17]& ,
          TagBoxNote->"17"],
         StyleBox["17", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[17, {}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.65, 0}, {0.7000000000000001, 83}, 
             "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{117.90686274509804`, 
            125.95588235294117`}, {-54.8900513548058, 36.00499344580688}}],
          StatusArea[#, 83]& ,
          TagBoxNote->"83"],
         StyleBox["83", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[83, {}], "Tooltip"]& ]}, {}, {}}, {{}, {}}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{-0.02, 0},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{0., 1.}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{
     {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
      Opacity[0.5459999999999999], Thickness[Small]}], {}, 
      {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
       EdgeForm[{Opacity[0.5459999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{0.5, 0}, {0.55, 100}, "RoundingRadius" -> 0]},
           ImageSizeCache->{{97.71078431372548, 
            105.51470588235294`}, {-52.24999999999999, 35.7101407486447}}],
          StatusArea[#, 100]& ,
          TagBoxNote->"100"],
         StyleBox["100", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[100, {}], "Tooltip"]& ]}, {}, {}}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{-0.02, 0},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{0., 1.}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{
     {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
      Opacity[0.5459999999999999], Thickness[Small]}], {}, 
      {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], 
       EdgeForm[{Opacity[0.5459999999999999], Thickness[Small]}], 
       TagBox[
        TooltipBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            RectangleBox[{0.5, 0}, {0.55, 100}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{97.71078431372548, 
            105.51470588235294`}, {-52.24999999999999, 35.7101407486447}}],
          StatusArea[#, 100]& ,
          TagBoxNote->"100"],
         StyleBox["100", {}, StripOnInput -> False]],
        Annotation[#, 
         Style[100, {}], "Tooltip"]& ]}, {}, {}}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{-0.02, 0},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{0., 1.}, {All, All}},
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.700930963766706*^9, 3.7009312525497637`*^9, 3.700940889907736*^9, 
   3.7009935118083344`*^9, 3.7009983740741653`*^9, {3.700998452839226*^9, 
   3.700998466238166*^9}, 3.700999151108409*^9, 3.7009992337051287`*^9, 
   3.700999332153907*^9, 3.7009994075626087`*^9, 3.700999455771207*^9, 
   3.7009995394437103`*^9, 3.7009998057786913`*^9}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Visualization", "Section",
 CellChangeTimes->{{3.7005821274800453`*^9, 3.700582129897574*^9}}],

Cell[CellGroupData[{

Cell["PlotSequence", "Subsection",
 CellChangeTimes->{{3.7005821413842907`*^9, 3.700582144323337*^9}}],

Cell[TextData[{
 StyleBox["PlotSequence[", "Input"],
 StyleBox["seq_CompiledSequence", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["OptionsPattern[PulsePlot]", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " plots the pulse profile of some ",
 StyleBox["CompiledSequence", "Input"],
 " object ",
 StyleBox["seq", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 ". "
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.7005822174639797`*^9, 3.700582284587408*^9}},
 CellTags->"PlotSequence::usage"],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.700582306765732*^9, 3.700582307419448*^9}}],

Cell[TextData[{
 "Compile gates 12,10,2 of the ",
 StyleBox["$gaussianQubitGateSet", "Input"],
 " under a distortion noise model and plot it."
}], "Text",
 CellChangeTimes->{{3.7005778003992023`*^9, 3.700577804357457*^9}, {
   3.7005778450660553`*^9, 3.700577853177885*^9}, {3.7005778862403517`*^9, 
   3.70057793810642*^9}, 3.700578033011095*^9, {3.7005780772848597`*^9, 
   3.700578078642733*^9}, {3.700578328478826*^9, 3.7005783289678183`*^9}, {
   3.700582500354986*^9, 3.700582504791213*^9}, {3.7005825383428288`*^9, 
   3.7005825395783997`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"nm", "=", 
   RowBox[{"NoiseModel", "[", 
    RowBox[{"DistortionOperator", "->", 
     RowBox[{"FastExponentialDistortion", "[", 
      RowBox[{"0.01", ",", "4", ",", "20"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"compiledSequence", "=", 
   RowBox[{"CompileSequence", "[", 
    RowBox[{"$gaussianQubitGateSet", ",", 
     RowBox[{"{", 
      RowBox[{"12", ",", "10", ",", "2"}], "}"}], ",", "nm"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"PlotSequence", "[", 
  RowBox[{"compiledSequence", ",", 
   RowBox[{"ImageSize", "\[Rule]", "300"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", 
    RowBox[{"DistributeOption", "[", 
     RowBox[{"\"\<X\>\"", ",", "\"\<Y\>\""}], "]"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.700577779322353*^9, 3.700577792782989*^9}, {
   3.700577854365047*^9, 3.700577882231372*^9}, 3.700578034935267*^9, {
   3.700578207836516*^9, 3.700578210794166*^9}, {3.70057829486683*^9, 
   3.7005783205506563`*^9}, {3.7005825277150917`*^9, 3.700582527963485*^9}}],

Cell[BoxData[
 TemplateBox[{OverlayBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJx11GtIk2EUB/AlIhGRfYglIdMilhQxRESWl80PIRGxLCipUBEriWgSXazG
VlRYVKwb2Sq2dC1bLp06bdXalq2UCo0IhlQOExOJEAsdlZfe5zy8fujh/8KQ
Hw497zn/c5ZXGLfsTlAoFB3Sh/2cco9/2FRRrlOA5//fc1dD/zHvCxy6VgPN
v38S+sSS5qLB42eg+d87B31sVJ0533MRmv+/y9B5McOlugNXoU1Uz3XowIaF
CWtqb0BPUb03ofN8PUeCjlvQJnqfO9AB1dnvxX479Ay9711oeyTde7CqHrqA
+tEAPfCbvZAT2kz9uifY9rW/4Z3NoVNpvqxMOuUSPLhxMlmrTdIHqZ/3BX/L
/zkvd+c6fWllrlRRo+DWEsuezYcL9TPU7wfQdht73NAFNI+H0AO98a1DriZo
M83LA61K3LZobdsjwW+zPmcPN6n1QZpns2C5X6VaVlCLYLlfszRvr2C5X4ac
84Xlw6LlehyUh1bosWK/VBG2jvLSBm3dP/LXPY4dozy1Q2tqlf29cdFyvyyU
N59gOY999es7f01jp1EeO6CNUppSEjuhQ5RX7OSoszp/wWPoMsozdgsb52I/
9CzlHdvAylE+gXbQPojmebOGxlicU58K5nmbDOloX0TzvK0OW6W0vV/xTDCf
Z2Y4RvuErdll7ZrICEBbaN+w+6RqlmmeQ6fRPmIbr/ww6bKDgnnelOEQ7avo
uXl7UndU5oagy2ifsbcPuW5H0sPQfN+xG6W0RZ3Y/B5gx6c/1oyqX0Dze4Fd
dIEtPDa/J9h1KWwgXdD83mCPsHZ5sfk9ws7JYs9LaH6vsGvDb6SLg83vGXZU
2vYSbQSa3zvR8r6u+sQKEi3vK7+HouV9PVrFAv9K8Ny+0L3E7p7IkDYWm9/T
19BLT7OGYfN7i71X6pavR7S8r/wedwuW+/kPKsX9Pg==
        "], {{{
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{121, 100, 101, 102, 103, 104, 105, 106, 107, 108, 
              109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120}, {
              181, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
               172, 173, 174, 175, 176, 177, 178, 179, 180}}]}]}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{40, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 
              69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 
              53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 
              41}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.011000000000000001`], 
            AbsoluteThickness[1.6], 
            RGBColor[0.368417, 0.506779, 0.709798]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 
            66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 
            82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 
            98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 
            111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 
            124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 
            150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 
            163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 
            176, 177, 178, 179, 180, 181}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.22000000000000017`}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       ImagePadding -> {{40, 40}, {40, 10}}, DisplayFunction -> Identity, 
       AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
       Axes -> {True, True}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
       DisplayFunction :> Identity, Frame -> {{True, False}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> {Automatic, 
         RGBColor[0.368417, 0.506779, 0.709798], Automatic, Automatic}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], ImagePadding -> {{40, 40}, {40, 10}}, 
       ImageSize -> 300, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"X\"", TraditionalForm], 
       PlotRange -> {{0, 0.22000000000000017`}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, {{{}, {}, {
          Hue[0.67, 0.6, 0.6], 
          Directive[
           PointSize[0.007333333333333334], 
           AbsoluteThickness[1.6], 
           RGBColor[0.922526, 0.385626, 0.209179]], 
          LineBox[CompressedData["
1:eJx12nlcjtn7B/AnhUQqklTaV2t70l3PMYlJfBUhiWIs2bdBSCMNaqwjJiYZ
KRrCpEgl3Qep7EVUE3qMGoylTYnE77nPdfvj97q6n3+83q/XvMa9nXOuz3Ux
m7N80rwuMplspapMJvz5/38K7vPJxvsT5hB5524T7S9hBfcpalH+j/FBkob/
PkzSG3XPjn22Ya6k4f8XLuEGbv0rawf100sk/O3vWyHhBo6rmbgrYdkqSUey
6/lRwm1cvm+vLoO3r5VwA/eZXW+EhBUcd75kbcEfGyQsk0Wy+4mUdL7x1tcB
OVESVnBf2P1ulrBMdqTQNGNVeLSEGzgv9jy2SFgme/pRuKEYCTdwUex5/Sxh
BWc8/Illt+itEpbJCtjz3CbhBm7WXA/lFW2XsPJ+2fOOlfSRQ8IvTtJe7H38
IuEG7undD5OfH98h6Sj2vnZKWHm/alN7D83cJWHl/bL3uVvCivxZ7sIF7ZGw
TPaVve+9kp7oFjcqrE7KDdwf7Hv4VcIKrj4gR3lFUpbJ5Ox72SfhBm7Pkhft
JxulrMivYd9TvJS54dv1qu5+kLJM9hP73vZLWMHdS/bJbu6Qskxmwr7HAxJ+
yS1XXoy+2m8SVuTz7HuVskymVZGywlMjQdKh7HuWcmn+X8Lr1D4oYeX7Zo9L
2hOFy9E7JOFS7g+2HqQsk9ULn7PR7xJu4ORsvUhZJtuj/NpKzRMlrHzfbD1J
e3jInqsttoclrHzfbL1J+57yagyGJ0lYwZmw9SjlUm75r28j5S5HJCyT8Wy9
Spnma502Cp7r8YekQ9l6lnIlN035MApNj0qY5sN6l3aa8murSJFyJQf7gZRf
ch86yiNeWSdLuFbcL6Ss4MbuEBa8lGk+7CdSVuQn6Asv5JiEv+03Ui7lXgiP
K0PKCnE/knJpvpuT8EuR8EsO9ispy2Tb6U3ljiPl0nzYz6T8Pr9CudqD3FMl
XMrBfteJGyZan6gLkttUCxfUiWPtb7mPC5fDftiJ/YcF1hatlK8LFz7449jv
j14LNl8nh/0Sm3KBQaGOV+XFLbbKFYttGnf1Kg0vk8N+egK54YjK4d3+VfL+
McIDw9ZP2RZSvkghh/0W+7NLok3Zvs/yBcqndb4Ee+eYkec/tXUnsB+nIW95
0xpyL0GbXEyqTyvyw/Zr3O2V9FGXwH6NnZ89LHRquQHpPlh4odg9OZPr7Y6m
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
B8xeJzk=
           "]]}}}, {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.22000000000000017`}, {-31.911868188209507`, 
         31.911868188209507`}}, PlotRangeClipping -> True, 
       ImagePadding -> {{40, 40}, {40, 10}}, DisplayFunction -> Identity, 
       AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
       Axes -> {True, True}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
       DisplayFunction :> Identity, Frame -> {{False, True}, {False, False}}, 
       FrameLabel -> {{None, None}, {None, None}}, 
       FrameStyle -> {Automatic, Automatic, Automatic, 
         RGBColor[0.922526, 0.385626, 0.209179]}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], ImagePadding -> {{40, 40}, {40, 10}}, 
       ImageSize -> 300, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"X\"", TraditionalForm], 
       PlotRange -> {{0, 0.22000000000000017`}, {-31.911868188209507`, 
         31.911868188209507`}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}],OverlayBox[{
     GraphicsBox[{{}, 
       GraphicsComplexBox[CompressedData["
1:eJx11G1Ik1EUB/AlEhHR+hBLQqZFmBQxRETG1Gd9CImIZUFJhYpYSUST6MVq
bEXFior1RraKLV3LlkunTVu1NrOVUqERwZDKYWIiEWGho/Kl557L04cu/wfG
+LGxnXvu+Z8lleaNO1JUKlW7/GLvk76xd+srKyQVeP7/nLsG+rd1d3j/5Vpo
/v1j0EcXNhcPHjkJzX/vNPTh0aycOf5z0Pz/LkAXJEzn6/ZegrZQPVegw2vn
pay0X4WepHqvQRcEew5G3NehLXSem9Bh7amvJSEX9DSd9xa0K5YZ2FddD11E
/WiAHvjFDuSBtlK/bkNrdZ+WzT7uhY5QP+9Al1UZ5Ioaoaep33ehXU72+KCL
6D7uQQ/0JjcNeZugrXRffmht6ub5q9ruQ0foPpuhy/SsoBboGbrvALQp/8zq
imFsN81DK/T3kpBcEbZE89IG7dgz8sc3hp2geXoArbNr+nuT2Daat6Bg5+f+
hjdOh9RXv6bj55TowXUTar1+QsqgeWwX/KXwxyzDthVGszxNaakdgltLbTs3
HMgxRmlesdVxT03h3IfQ5TTP2C3sOheEoGdo3rFNrBzNI8Gvcz/mDTdpjG7K
g+h/983GOf0xtER5wXbI0/Z26RPoBOUJW7fd0TWeHYa2Ud6w++RqFuueQmdQ
HrHNF79ZpLwIdJTyiq32p2+tMkShyynP2FuGvDdimZ3QPO/YjfK0xT3YfB9g
J6fe145mPYPm+wK7+CwLPDbfJ6KVvNalsQvpEqzkle8b0UpeR1i7AqKVPPB9
hJ2fy57n0HxfYds7X8kbB5vvM+y4nPZSfUywkle+70Qr/Vz+gRWEzfch9qFq
NvAvoPm+xO4ez5YTi8336UvoRSdYw7D5vsXeJXcr2IPN93E39F/nI18q
        "], {{{}, {
           EdgeForm[], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            Opacity[0.2]], 
           GraphicsGroupBox[{
             
             PolygonBox[{{80, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 
              90, 89, 88, 87, 86, 85, 84, 83, 82, 81}, {140, 161, 160, 159, 
              158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146,
               145, 144, 143, 142, 141}}]}]}, {}, {}}, {{}, {}, {
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[0.011000000000000001`], 
            AbsoluteThickness[1.6], 
            RGBColor[0.368417, 0.506779, 0.709798]], 
           
           LineBox[{2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
             18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 
            66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 
            82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 
            98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 
            111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 
            124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 
            137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 
            150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 
            163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 
            176, 177, 178, 179, 180, 181}]}}}], {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.22000000000000017`}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       ImagePadding -> {{40, 40}, {40, 10}}, DisplayFunction -> Identity, 
       AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
       Axes -> {True, True}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
       DisplayFunction :> Identity, Frame -> {{True, False}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> {Automatic, 
         RGBColor[0.368417, 0.506779, 0.709798], Automatic, Automatic}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], ImagePadding -> {{40, 40}, {40, 10}}, 
       ImageSize -> 300, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"Y\"", TraditionalForm], 
       PlotRange -> {{0, 0.22000000000000017`}, {-37.01150709239172, 
         37.01150709239172}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}], 
     GraphicsBox[{{}, {{{}, {}, {
          Hue[0.67, 0.6, 0.6], 
          Directive[
           PointSize[0.007333333333333334], 
           AbsoluteThickness[1.6], 
           RGBColor[0.922526, 0.385626, 0.209179]], 
          LineBox[CompressedData["
1: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
vslmqx6nbNf/PwBlw/gvpqzXOw==
           "]]}}}, {}, {}, {{}, {}}}, {
      DisplayFunction -> Identity, PlotRangePadding -> {{0, 0}, {0, 0}}, 
       AxesOrigin -> {0, 0}, 
       PlotRange -> {{0, 0.22000000000000017`}, {-31.911868188209507`, 
         31.911868188209507`}}, PlotRangeClipping -> True, 
       ImagePadding -> {{40, 40}, {40, 10}}, DisplayFunction -> Identity, 
       AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
       Axes -> {True, True}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
       DisplayFunction :> Identity, Frame -> {{False, True}, {False, False}}, 
       FrameLabel -> {{None, None}, {None, None}}, 
       FrameStyle -> {Automatic, Automatic, Automatic, 
         RGBColor[0.922526, 0.385626, 0.209179]}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], ImagePadding -> {{40, 40}, {40, 10}}, 
       ImageSize -> 300, 
       Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
              Part[#, 1]], 
             (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
              Part[#, 2]]}& )}}, PlotLabel -> 
       FormBox["\"Y\"", TraditionalForm], 
       PlotRange -> {{0, 0.22000000000000017`}, {-31.911868188209507`, 
         31.911868188209507`}}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{0, 0}, {0, 0}}, 
       Ticks -> {Automatic, Automatic}}]}]},
  "RowDefault"]], "Output",
 CellChangeTimes->{3.700582542998332*^9, 3.70058422852922*^9}]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]]
}, Open  ]]
},
WindowSize->{1855, 1056},
WindowMargins->{{0, Automatic}, {0, Automatic}},
FrontEndVersion->"11.0 for Linux x86 (64-bit) (September 21, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Preamble::section"->{
  Cell[751, 23, 520, 8, 44, "Subsection",
   CellTags->"Preamble::section"]},
 "GateSet::usage"->{
  Cell[5418, 121, 2505, 72, 349, "Text",
   CellTags->"GateSet::usage"]},
 "GateNoiseGateSet::usage"->{
  Cell[7926, 195, 2749, 84, 413, "Text",
   CellTags->"GateNoiseGateSet::usage"]},
 "GateSetName::usage"->{
  Cell[10951, 288, 347, 9, 33, "Text",
   CellTags->"GateSetName::usage"]},
 "Size::usage"->{
  Cell[11301, 299, 275, 8, 33, "Text",
   CellTags->"Size::usage"]},
 "Dimension::usage"->{
  Cell[11579, 309, 310, 8, 33, "Text",
   CellTags->"Dimension::usage"]},
 "GateProduct::usage"->{
  Cell[11892, 319, 680, 19, 33, "Text",
   CellTags->"GateProduct::usage"]},
 "GateInverse::usage"->{
  Cell[12575, 340, 423, 11, 33, "Text",
   CellTags->"GateInverse::usage"]},
 "GateUnitary::usage"->{
  Cell[13001, 353, 440, 13, 33, "Text",
   CellTags->"GateUnitary::usage"]},
 "GatePulse::usage"->{
  Cell[13444, 368, 515, 16, 33, "Text",
   CellTags->"GatePulse::usage"]},
 "GateChannel::usage"->{
  Cell[14370, 399, 1542, 52, 55, "Text",
   CellTags->"GateChannel::usage"]},
 "$gaussianQubitGateSet::usage"->{
  Cell[16057, 459, 341, 7, 33, "Text",
   CellTags->"$gaussianQubitGateSet::usage"]},
 "FramePotential::usage"->{
  Cell[98484, 2096, 492, 16, 33, "Text",
   CellTags->"FramePotential::usage"]},
 "TestGateSetPulses::usage"->{
  Cell[98979, 2114, 954, 27, 121, "Text",
   CellTags->"TestGateSetPulses::usage"]},
 "TestGateSetInverses::usage"->{
  Cell[99936, 2143, 1178, 34, 121, "Text",
   CellTags->"TestGateSetInverses::usage"]},
 "TestGateSetProducts::usage"->{
  Cell[101117, 2179, 1087, 33, 121, "Text",
   CellTags->"TestGateSetProducts::usage"]},
 "GateIndices::usage"->{
  Cell[102207, 2214, 493, 15, 33, "Text",
   CellTags->"GateIndices::usage"]},
 "TakeOverlap::usage"->{
  Cell[102703, 2231, 498, 14, 33, "Text",
   CellTags->"TakeOverlap::usage"]},
 "NoiseModel::usage"->{
  Cell[107919, 2383, 1807, 47, 283, "Text",
   CellTags->"NoiseModel::usage"]},
 "GateNoise::usage"->{
  Cell[109860, 2437, 1033, 37, 33, "Text",
   CellTags->"GateNoise::usage"]},
 "DistortionMultiplier::usage"->{
  Cell[110896, 2476, 705, 14, 55, "Text",
   CellTags->"DistortionMultiplier::usage"]},
 "StochasticNoise::usage"->{
  Cell[111999, 2505, 636, 14, 55, "Text",
   CellTags->"StochasticNoise::usage"]},
 "StaticNoise::usage"->{
  Cell[112638, 2521, 583, 14, 55, "Text",
   CellTags->"StaticNoise::usage"]},
 "Generator::usage"->{
  Cell[113224, 2537, 434, 10, 33, "Text",
   CellTags->"Generator::usage"]},
 "StepSize::link"->{
  Cell[113661, 2549, 337, 9, 33, "Text",
   CellTags->"StepSize::link"]},
 "Protocol::usage"->{
  Cell[114255, 2570, 2729, 74, 429, "Text",
   CellTags->"Protocol::usage"]},
 "ProtocolName::usage"->{
  Cell[117117, 2651, 304, 8, 33, "Text",
   CellTags->"ProtocolName::usage"]},
 "SequenceLengths::usage"->{
  Cell[117424, 2661, 522, 12, 33, "Text",
   CellTags->"SequenceLengths::usage"]},
 "ExperimentTypes::usage"->{
  Cell[117949, 2675, 824, 22, 33, "Text",
   CellTags->"ExperimentTypes::usage"]},
 "NumSequenceDraws::usage"->{
  Cell[118776, 2699, 993, 30, 33, "Text",
   CellTags->"NumSequenceDraws::usage"]},
 "NumRepetitions::usage"->{
  Cell[119772, 2731, 911, 28, 33, "Text",
   CellTags->"NumRepetitions::usage"]},
 "SequenceGenerator::usage"->{
  Cell[120686, 2761, 1246, 40, 55, "Text",
   CellTags->"SequenceGenerator::usage"]},
 "SimulationOptions::usage"->{
  Cell[121935, 2803, 431, 11, 33, "Text",
   CellTags->"SimulationOptions::usage"]},
 "SimulationParser::usage"->{
  Cell[122369, 2816, 427, 11, 33, "Text",
   CellTags->"SimulationParser::usage"]},
 "GateSimulator::usage"->{
  Cell[122799, 2829, 1087, 37, 55, "Text",
   CellTags->"GateSimulator::usage"]},
 "ParallelOptions::usage"->{
  Cell[123889, 2868, 457, 12, 33, "Text",
   CellTags->"ParallelOptions::usage"]},
 "TotalGates::usage"->{
  Cell[124349, 2882, 423, 10, 33, "Text",
   CellTags->"TotalGates::usage"]},
 "RBDraw::usage"->{
  Cell[124920, 2900, 854, 27, 55, "Text",
   CellTags->"RBDraw::usage"]},
 "RBProtocol::usage"->{
  Cell[125777, 2929, 1543, 52, 55, "Text",
   CellTags->"RBProtocol::usage"]},
 "GateNoiseProtocol::usage"->{
  Cell[127323, 2983, 1154, 32, 55, "Text",
   CellTags->"GateNoiseProtocol::usage"]},
 "CompileSequence::usage"->{
  Cell[142713, 3434, 1474, 46, 185, "Text",
   CellTags->"CompileSequence::usage"]},
 "CompiledSequence::usage"->{
  Cell[144190, 3482, 1944, 49, 305, "Text",
   CellTags->"CompiledSequence::usage"]},
 "AllowFinalRingdown::usage"->{
  Cell[146318, 3539, 519, 13, 33, "Text",
   CellTags->"AllowFinalRingdown::usage"]},
 "PulseSequence::usage"->{
  Cell[147046, 3560, 414, 12, 33, "Text",
   CellTags->"PulseSequence::usage"]},
 "GateSequence::usage"->{
  Cell[147666, 3580, 675, 18, 55, "Text",
   CellTags->"GateSequence::usage"]},
 "UndistortedLongPulse::usage"->{
  Cell[148344, 3600, 437, 11, 33, "Text",
   CellTags->"UndistortedLongPulse::usage"]},
 "CompileGateNoise::usage"->{
  Cell[177395, 4138, 223, 3, 33, "Text",
   CellTags->"CompileGateNoise::usage"]},
 "SimulateSequence::usage"->{
  Cell[182716, 4261, 181, 3, 51, "Section",
   CellTags->"SimulateSequence::usage"]},
 "SimulateProtocol::usage"->{
  Cell[183719, 4294, 2029, 62, 141, "Text",
   CellTags->"SimulateProtocol::usage"]},
 "ExportSimulation::usage"->{
  Cell[185751, 4358, 1942, 44, 143, "Text",
   CellTags->"ExportSimulation::usage"]},
 "PulseSubset::usage"->{
  Cell[187816, 4409, 358, 10, 33, "Text",
   CellTags->"PulseSubset::usage"]},
 "SimulationExportName::usage"->{
  Cell[188177, 4421, 690, 15, 33, "Text",
   CellTags->"SimulationExportName::usage"]},
 "PlotSequence::usage"->{
  Cell[613162, 12117, 604, 20, 33, "Text",
   CellTags->"PlotSequence::usage"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Preamble::section", 641134, 12633},
 {"GateSet::usage", 641233, 12636},
 {"GateNoiseGateSet::usage", 641337, 12639},
 {"GateSetName::usage", 641445, 12642},
 {"Size::usage", 641539, 12645},
 {"Dimension::usage", 641631, 12648},
 {"GateProduct::usage", 641730, 12651},
 {"GateInverse::usage", 641832, 12654},
 {"GateUnitary::usage", 641934, 12657},
 {"GatePulse::usage", 642034, 12660},
 {"GateChannel::usage", 642134, 12663},
 {"$gaussianQubitGateSet::usage", 642247, 12666},
 {"FramePotential::usage", 642361, 12669},
 {"TestGateSetPulses::usage", 642473, 12672},
 {"TestGateSetInverses::usage", 642591, 12675},
 {"TestGateSetProducts::usage", 642712, 12678},
 {"GateIndices::usage", 642826, 12681},
 {"TakeOverlap::usage", 642930, 12684},
 {"NoiseModel::usage", 643033, 12687},
 {"GateNoise::usage", 643136, 12690},
 {"DistortionMultiplier::usage", 643248, 12693},
 {"StochasticNoise::usage", 643365, 12696},
 {"StaticNoise::usage", 643473, 12699},
 {"Generator::usage", 643575, 12702},
 {"StepSize::link", 643673, 12705},
 {"Protocol::usage", 643769, 12708},
 {"ProtocolName::usage", 643873, 12711},
 {"SequenceLengths::usage", 643981, 12714},
 {"ExperimentTypes::usage", 644093, 12717},
 {"NumSequenceDraws::usage", 644206, 12720},
 {"NumRepetitions::usage", 644318, 12723},
 {"SequenceGenerator::usage", 644431, 12726},
 {"SimulationOptions::usage", 644548, 12729},
 {"SimulationParser::usage", 644663, 12732},
 {"GateSimulator::usage", 644774, 12735},
 {"ParallelOptions::usage", 644885, 12738},
 {"TotalGates::usage", 644992, 12741},
 {"RBDraw::usage", 645090, 12744},
 {"RBProtocol::usage", 645188, 12747},
 {"GateNoiseProtocol::usage", 645298, 12750},
 {"CompileSequence::usage", 645413, 12753},
 {"CompiledSequence::usage", 645528, 12756},
 {"AllowFinalRingdown::usage", 645646, 12759},
 {"PulseSequence::usage", 645759, 12762},
 {"GateSequence::usage", 645866, 12765},
 {"UndistortedLongPulse::usage", 645980, 12768},
 {"CompileGateNoise::usage", 646098, 12771},
 {"SimulateSequence::usage", 646211, 12774},
 {"SimulateProtocol::usage", 646327, 12777},
 {"ExportSimulation::usage", 646443, 12780},
 {"PulseSubset::usage", 646554, 12783},
 {"SimulationExportName::usage", 646667, 12786},
 {"PlotSequence::usage", 646781, 12789}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[422, 15, 304, 4, 66, "Chapter"],
Cell[CellGroupData[{
Cell[751, 23, 520, 8, 44, "Subsection",
 CellTags->"Preamble::section"],
Cell[1274, 33, 609, 9, 55, "Input"],
Cell[1886, 44, 182, 4, 33, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2105, 53, 326, 4, 44, "Subsection"],
Cell[2434, 59, 531, 12, 39, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[3002, 76, 184, 2, 51, "Section"],
Cell[3189, 80, 1863, 28, 187, "Text"],
Cell[5055, 110, 103, 1, 35, "Subsubsection"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5195, 116, 220, 3, 65, "Section"],
Cell[5418, 121, 2505, 72, 349, "Text",
 CellTags->"GateSet::usage"],
Cell[7926, 195, 2749, 84, 413, "Text",
 CellTags->"GateNoiseGateSet::usage"],
Cell[CellGroupData[{
Cell[10700, 283, 248, 3, 45, "Subsection"],
Cell[10951, 288, 347, 9, 33, "Text",
 CellTags->"GateSetName::usage"],
Cell[11301, 299, 275, 8, 33, "Text",
 CellTags->"Size::usage"],
Cell[11579, 309, 310, 8, 33, "Text",
 CellTags->"Dimension::usage"],
Cell[11892, 319, 680, 19, 33, "Text",
 CellTags->"GateProduct::usage"],
Cell[12575, 340, 423, 11, 33, "Text",
 CellTags->"GateInverse::usage"],
Cell[13001, 353, 440, 13, 33, "Text",
 CellTags->"GateUnitary::usage"],
Cell[13444, 368, 515, 16, 33, "Text",
 CellTags->"GatePulse::usage"],
Cell[13962, 386, 405, 11, 33, "Text"],
Cell[14370, 399, 1542, 52, 55, "Text",
 CellTags->"GateChannel::usage"]
}, Closed]],
Cell[CellGroupData[{
Cell[15949, 456, 105, 1, 36, "Subsection"],
Cell[16057, 459, 341, 7, 33, "Text",
 CellTags->"$gaussianQubitGateSet::usage"],
Cell[CellGroupData[{
Cell[16423, 470, 190, 2, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[16638, 476, 279, 4, 55, "Input"],
Cell[16920, 482, 120, 2, 70, "Output"],
Cell[17043, 486, 119, 2, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17199, 493, 390, 7, 32, "Input"],
Cell[17592, 502, 7135, 183, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24764, 690, 954, 24, 78, "Input"],
Cell[25721, 716, 72231, 1357, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[97989, 2078, 199, 4, 34, "Input"],
Cell[98191, 2084, 120, 2, 70, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[98372, 2093, 109, 1, 37, "Subsection"],
Cell[98484, 2096, 492, 16, 33, "Text",
 CellTags->"FramePotential::usage"],
Cell[98979, 2114, 954, 27, 121, "Text",
 CellTags->"TestGateSetPulses::usage"],
Cell[99936, 2143, 1178, 34, 121, "Text",
 CellTags->"TestGateSetInverses::usage"],
Cell[101117, 2179, 1087, 33, 121, "Text",
 CellTags->"TestGateSetProducts::usage"],
Cell[102207, 2214, 493, 15, 33, "Text",
 CellTags->"GateIndices::usage"],
Cell[102703, 2231, 498, 14, 33, "Text",
 CellTags->"TakeOverlap::usage"],
Cell[CellGroupData[{
Cell[103226, 2249, 163, 2, 35, "Subsubsection"],
Cell[103392, 2253, 196, 4, 33, "Text"],
Cell[CellGroupData[{
Cell[103613, 2261, 176, 3, 34, "Input"],
Cell[103792, 2266, 122, 2, 70, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[103963, 2274, 107, 1, 29, "Subsubsection"],
Cell[104073, 2277, 135, 1, 33, "Text"],
Cell[CellGroupData[{
Cell[104233, 2282, 156, 2, 32, "Input"],
Cell[104392, 2286, 460, 9, 34, "Output"]
}, Open  ]],
Cell[104867, 2298, 382, 9, 33, "Text"],
Cell[CellGroupData[{
Cell[105274, 2311, 194, 4, 32, "Input"],
Cell[105471, 2317, 1449, 29, 228, "Output"]
}, Open  ]],
Cell[106935, 2349, 375, 9, 33, "Text"],
Cell[CellGroupData[{
Cell[107335, 2362, 162, 3, 32, "Input"],
Cell[107500, 2367, 244, 5, 70, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[107817, 2380, 99, 1, 51, "Section"],
Cell[107919, 2383, 1807, 47, 283, "Text",
 CellTags->"NoiseModel::usage"],
Cell[CellGroupData[{
Cell[109751, 2434, 106, 1, 45, "Subsection"],
Cell[109860, 2437, 1033, 37, 33, "Text",
 CellTags->"GateNoise::usage"],
Cell[110896, 2476, 705, 14, 55, "Text",
 CellTags->"DistortionMultiplier::usage"],
Cell[111604, 2492, 392, 11, 33, "Text"],
Cell[111999, 2505, 636, 14, 55, "Text",
 CellTags->"StochasticNoise::usage"],
Cell[112638, 2521, 583, 14, 55, "Text",
 CellTags->"StaticNoise::usage"],
Cell[113224, 2537, 434, 10, 33, "Text",
 CellTags->"Generator::usage"],
Cell[113661, 2549, 337, 9, 33, "Text",
 CellTags->"StepSize::link"]
}, Closed]],
Cell[114013, 2561, 108, 1, 37, "Subsection"]
}, Closed]],
Cell[CellGroupData[{
Cell[114158, 2567, 94, 1, 51, "Section"],
Cell[114255, 2570, 2729, 74, 429, "Text",
 CellTags->"Protocol::usage"],
Cell[CellGroupData[{
Cell[117009, 2648, 105, 1, 45, "Subsection"],
Cell[117117, 2651, 304, 8, 33, "Text",
 CellTags->"ProtocolName::usage"],
Cell[117424, 2661, 522, 12, 33, "Text",
 CellTags->"SequenceLengths::usage"],
Cell[117949, 2675, 824, 22, 33, "Text",
 CellTags->"ExperimentTypes::usage"],
Cell[118776, 2699, 993, 30, 33, "Text",
 CellTags->"NumSequenceDraws::usage"],
Cell[119772, 2731, 911, 28, 33, "Text",
 CellTags->"NumRepetitions::usage"],
Cell[120686, 2761, 1246, 40, 55, "Text",
 CellTags->"SequenceGenerator::usage"],
Cell[121935, 2803, 431, 11, 33, "Text",
 CellTags->"SimulationOptions::usage"],
Cell[122369, 2816, 427, 11, 33, "Text",
 CellTags->"SimulationParser::usage"],
Cell[122799, 2829, 1087, 37, 55, "Text",
 CellTags->"GateSimulator::usage"],
Cell[123889, 2868, 457, 12, 33, "Text",
 CellTags->"ParallelOptions::usage"],
Cell[124349, 2882, 423, 10, 33, "Text",
 CellTags->"TotalGates::usage"]
}, Closed]],
Cell[CellGroupData[{
Cell[124809, 2897, 108, 1, 36, "Subsection"],
Cell[124920, 2900, 854, 27, 55, "Text",
 CellTags->"RBDraw::usage"],
Cell[125777, 2929, 1543, 52, 55, "Text",
 CellTags->"RBProtocol::usage"],
Cell[127323, 2983, 1154, 32, 55, "Text",
 CellTags->"GateNoiseProtocol::usage"],
Cell[CellGroupData[{
Cell[128502, 3019, 163, 2, 35, "Subsubsection"],
Cell[128668, 3023, 274, 5, 33, "Text"],
Cell[128945, 3030, 624, 19, 34, "Input"],
Cell[129572, 3051, 207, 7, 33, "Text"],
Cell[CellGroupData[{
Cell[129804, 3062, 280, 5, 55, "Input"],
Cell[130087, 3069, 148, 3, 32, "Output"],
Cell[130238, 3074, 168, 4, 32, "Output"]
}, Open  ]],
Cell[130421, 3081, 188, 4, 33, "Text"],
Cell[CellGroupData[{
Cell[130634, 3089, 496, 10, 34, "Input"],
Cell[131133, 3101, 408, 8, 34, "Output"]
}, Open  ]],
Cell[131556, 3112, 125, 1, 33, "Text"],
Cell[CellGroupData[{
Cell[131706, 3117, 221, 5, 32, "Input"],
Cell[131930, 3124, 5934, 151, 70, "Output"]
}, Open  ]],
Cell[137879, 3278, 261, 5, 33, "Text"],
Cell[CellGroupData[{
Cell[138165, 3287, 316, 8, 34, "Input"],
Cell[138484, 3297, 697, 20, 48, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[139230, 3323, 121, 1, 29, "Subsubsection"],
Cell[139354, 3326, 172, 5, 33, "Text"],
Cell[CellGroupData[{
Cell[139551, 3335, 479, 10, 34, "Input"],
Cell[140033, 3347, 394, 8, 32, "Output"]
}, Open  ]],
Cell[140442, 3358, 184, 4, 33, "Text"],
Cell[CellGroupData[{
Cell[140651, 3366, 176, 4, 32, "Input"],
Cell[140830, 3372, 799, 24, 34, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[141666, 3401, 384, 9, 34, "Input"],
Cell[142053, 3412, 287, 5, 34, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[142413, 3425, 96, 1, 51, "Section"],
Cell[CellGroupData[{
Cell[142534, 3430, 176, 2, 45, "Subsection"],
Cell[142713, 3434, 1474, 46, 185, "Text",
 CellTags->"CompileSequence::usage"],
Cell[144190, 3482, 1944, 49, 305, "Text",
 CellTags->"CompiledSequence::usage"],
Cell[CellGroupData[{
Cell[146159, 3535, 156, 2, 35, "Subsubsection"],
Cell[146318, 3539, 519, 13, 33, "Text",
 CellTags->"AllowFinalRingdown::usage"],
Cell[146840, 3554, 203, 4, 33, "Text"],
Cell[147046, 3560, 414, 12, 33, "Text",
 CellTags->"PulseSequence::usage"],
Cell[147463, 3574, 200, 4, 33, "Text"],
Cell[147666, 3580, 675, 18, 55, "Text",
 CellTags->"GateSequence::usage"],
Cell[148344, 3600, 437, 11, 33, "Text",
 CellTags->"UndistortedLongPulse::usage"],
Cell[148784, 3613, 199, 4, 33, "Text"],
Cell[148986, 3619, 205, 4, 33, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[149228, 3628, 98, 1, 29, "Subsubsection"],
Cell[149329, 3631, 486, 9, 33, "Text"],
Cell[CellGroupData[{
Cell[149840, 3644, 970, 22, 57, "Input"],
Cell[150813, 3668, 72, 1, 24, "Print"]
}, Open  ]],
Cell[150900, 3672, 98, 1, 33, "Text"],
Cell[CellGroupData[{
Cell[151023, 3677, 592, 11, 34, "Input"],
Cell[151618, 3690, 25558, 437, 219, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[177237, 4134, 155, 2, 37, "Subsection"],
Cell[177395, 4138, 223, 3, 33, "Text",
 CellTags->"CompileGateNoise::usage"],
Cell[CellGroupData[{
Cell[177643, 4145, 98, 1, 35, "Subsubsection"],
Cell[177744, 4148, 198, 5, 33, "Text"],
Cell[177945, 4155, 1041, 21, 57, "Input"],
Cell[178989, 4178, 183, 4, 33, "Text"],
Cell[CellGroupData[{
Cell[179197, 4186, 1378, 28, 34, "Input"],
Cell[180578, 4216, 2065, 37, 374, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[182716, 4261, 181, 3, 51, "Section",
 CellTags->"SimulateSequence::usage"],
Cell[182900, 4266, 816, 26, 33, "Text"],
Cell[183719, 4294, 2029, 62, 141, "Text",
 CellTags->"SimulateProtocol::usage"],
Cell[185751, 4358, 1942, 44, 143, "Text",
 CellTags->"ExportSimulation::usage"],
Cell[CellGroupData[{
Cell[187718, 4406, 95, 1, 45, "Subsection"],
Cell[187816, 4409, 358, 10, 33, "Text",
 CellTags->"PulseSubset::usage"],
Cell[188177, 4421, 690, 15, 33, "Text",
 CellTags->"SimulationExportName::usage"]
}, Closed]],
Cell[CellGroupData[{
Cell[188904, 4441, 113, 1, 37, "Subsection"],
Cell[CellGroupData[{
Cell[189042, 4446, 651, 16, 79, "Input"],
Cell[189696, 4464, 16516, 289, 265, "Output"]
}, Open  ]],
Cell[206227, 4756, 174, 4, 33, "Text"],
Cell[CellGroupData[{
Cell[206426, 4764, 198, 3, 32, "Input"],
Cell[206627, 4769, 3476, 86, 80, "Output"]
}, Open  ]],
Cell[210118, 4858, 172, 4, 33, "Text"],
Cell[CellGroupData[{
Cell[210315, 4866, 453, 10, 34, "Input"],
Cell[210771, 4878, 184021, 3045, 375, 84549, 1413, "CachedBoxData", \
"BoxData", "Output"]
}, Open  ]],
Cell[394807, 7926, 187, 4, 33, "Text"],
Cell[CellGroupData[{
Cell[395019, 7934, 534, 12, 34, "Input"],
Cell[395556, 7948, 161509, 2675, 375, 65324, 1096, "CachedBoxData", \
"BoxData", "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[557114, 10629, 143, 1, 37, "Subsection"],
Cell[557260, 10632, 130, 1, 33, "Text"],
Cell[CellGroupData[{
Cell[557415, 10637, 2406, 56, 351, "Input"],
Cell[559824, 10695, 7520, 145, 195, "Output"]
}, Open  ]],
Cell[567359, 10843, 164, 3, 33, "Text"],
Cell[CellGroupData[{
Cell[567548, 10850, 367, 11, 34, "Input"],
Cell[567918, 10863, 20380, 585, 136, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[588347, 11454, 135, 1, 37, "Subsection"],
Cell[588485, 11457, 198, 5, 33, "Text"],
Cell[CellGroupData[{
Cell[588708, 11466, 2236, 46, 148, "Input"],
Cell[590947, 11514, 776, 14, 34, "Output"]
}, Open  ]],
Cell[591738, 11531, 162, 2, 33, "Text"],
Cell[591903, 11535, 1403, 25, 34, "Input"],
Cell[593309, 11562, 202, 5, 33, "Text"],
Cell[CellGroupData[{
Cell[593536, 11571, 535, 15, 57, "Input"],
Cell[594074, 11588, 291, 5, 34, "Output"],
Cell[594368, 11595, 333, 8, 27, "PrintTemporary"]
}, Open  ]],
Cell[594716, 11606, 114, 1, 33, "Text"],
Cell[CellGroupData[{
Cell[594855, 11611, 675, 21, 57, "Input"],
Cell[595533, 11634, 8685, 234, 115, "Output"],
Cell[604221, 11870, 8650, 232, 115, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[612932, 12109, 100, 1, 51, "Section"],
Cell[CellGroupData[{
Cell[613057, 12114, 102, 1, 45, "Subsection"],
Cell[613162, 12117, 604, 20, 33, "Text",
 CellTags->"PlotSequence::usage"],
Cell[CellGroupData[{
Cell[613791, 12141, 98, 1, 35, "Subsubsection"],
Cell[613892, 12144, 551, 10, 33, "Text"],
Cell[CellGroupData[{
Cell[614468, 12158, 1066, 24, 80, "Input"],
Cell[615537, 12184, 25235, 432, 70, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]]
}, Open  ]]
}
]
*)

