(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1164511,      23615]
NotebookOptionsPosition[   1154267,      23288]
NotebookOutlinePosition[   1156761,      23361]
CellTagsIndexPosition[   1156102,      23343]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Visualization` Documentation", "Chapter",
 CellChangeTimes->{{3.6333515346579514`*^9, 3.63335154627586*^9}, {
  3.633364320690548*^9, 3.63336432261762*^9}, {3.633459692992848*^9, 
  3.633459695695156*^9}}],

Cell[CellGroupData[{

Cell["Preamble", "Subsection",
 CellChangeTimes->{{3.633351558518317*^9, 3.633351560041299*^9}, {
  3.633781241567971*^9, 3.633781243127653*^9}, {3.634394140686543*^9, 
  3.634394140736664*^9}, {3.635182436359497*^9, 3.635182438008397*^9}}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<Visualization`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.633351696261045*^9, 3.633351701530016*^9}, {
  3.633459703938384*^9, 3.633459707396385*^9}}],

Cell["\<\
The following packages are needed to run some code found in this \
documentation notebook.\
\>", "Text",
 CellChangeTimes->{{3.633781139005548*^9, 3.6337811426309013`*^9}}],

Cell[BoxData[{
 RowBox[{"Needs", "[", "\"\<Tensor`\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", "\"\<QuantumChannel`\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", "\"\<QuantumSystems`\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Needs", "[", "\"\<QSim`\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.634314144340521*^9, 3.634314148861907*^9}, {
  3.635168647903007*^9, 3.635168651903873*^9}, {3.635173133962139*^9, 
  3.6351731399802923`*^9}, {3.6380867292922087`*^9, 3.638086737835305*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Source Code", "Subsection",
 CellChangeTimes->{{3.6351824420646763`*^9, 3.635182446927919*^9}}],

Cell[BoxData[
 ButtonBox["\<\"Open Source Code\"\>",
  Appearance->Automatic,
  ButtonFunction:>(Needs["QUDevTools`"]; NotebookOpen[
     FileNameJoin[{QUDevTools`$QUSourcePath, 
       StringJoin[
        FileBaseName[
         NotebookFileName[]], ".m"]}]]),
  Evaluator->Automatic,
  Method->"Preemptive"]], "Output",
 CellChangeTimes->{{3.635182609676621*^9, 3.6351826444407997`*^9}, {
  3.635182842680962*^9, 3.63518284820653*^9}, {3.635182903083259*^9, 
  3.635182906619155*^9}, {3.635182952870352*^9, 3.635182956778173*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Introduction and Overview", "Section",
 CellChangeTimes->{{3.633351563673402*^9, 3.633351567143589*^9}, {
  3.638099193036283*^9, 3.638099193130165*^9}}],

Cell["\<\
This package provides tools for visualizing and plotting various quantities.\
\>", "Text",
 CellChangeTimes->{{3.634313583757258*^9, 3.634313633494482*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Matrices", "Section",
 CellChangeTimes->{{3.63335202563237*^9, 3.6333520385490847`*^9}, {
  3.633441643373975*^9, 3.633441643471745*^9}, {3.633459727021635*^9, 
  3.633459727820011*^9}, {3.6351817767647448`*^9, 3.635181776873601*^9}}],

Cell[CellGroupData[{

Cell["ComplexMatrixPlot", "Subsection",
 CellChangeTimes->{{3.633352631378475*^9, 3.6333526519246817`*^9}, {
  3.63345974116625*^9, 3.633459743554513*^9}}],

Cell[TextData[{
 StyleBox["ComplexMatrixPlot[", "Input",
  FontWeight->"Bold"],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["] ", "Input",
  FontWeight->"Bold"],
 "is designed to graphically display complex matrices.The element amplitudes \
are displayed as heights of a 3D bar graph,with the sign of a height \
determined by which half of the imaginary plane it lies in,top or bottom.The \
color of a bar represents the absolute value of its argument;a phase of \
\[Pi]/2 and-\[Pi]/2 will have the same color (but their heights will have \
opposite signs)."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{
  3.63405101823304*^9, 3.634051131266315*^9, {3.63405147532617*^9, 
   3.634051475742031*^9}},
 CellTags->"ComplexMatrixPlot::usage"],

Cell[CellGroupData[{

Cell["Options", "Subsubsection",
 CellChangeTimes->{{3.633354110058621*^9, 3.633354110780126*^9}}],

Cell[TextData[{
 "The options are simply those of ",
 StyleBox["DiscretePlot3D", "Input"],
 ", which is the plotting function used by ",
 StyleBox["ComplexMatrixPlot", "Input"],
 "."
}], "Text",
 CellChangeTimes->{{3.633700280884441*^9, 3.633700300500996*^9}}],

Cell[BoxData[GridBox[{
   {
    StyleBox["Option", "Text",
     FontWeight->Bold], 
    StyleBox[
     RowBox[{"Default", " ", "Value"}], "Text",
     FontWeight->Bold], 
    StyleBox["Description", "Text",
     FontWeight->Bold]},
   {"AlignmentPoint", "Center", 
    StyleBox[
     RowBox[{
     "AlignmentPoint", " ", "is", " ", "an", " ", "option", " ", "which", " ",
       "specifies", " ", "how", " ", "objects", " ", "should", " ", "by", " ",
       "default", " ", "be", " ", "aligned", " ", "when", " ", "they", " ", 
      "appear", " ", "in", " ", 
      RowBox[{"Inset", "."}]}], "Text"]},
   {"AspectRatio", "Automatic", 
    StyleBox[
     RowBox[{
     "AspectRatio", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "Graphics", " ", "and", " ", "related", " ", "functions", " ", "that", 
      " ", "specifies", " ", "the", " ", "ratio", " ", "of", " ", "height", 
      " ", "to", " ", "width", " ", "for", " ", "a", " ", 
      RowBox[{"plot", ".", " "}]}], "Text"]},
   {"AutomaticImageSize", "False", 
    StyleBox[
     RowBox[{"No", " ", "description", " ", 
      RowBox[{"available", "."}]}], "Text"]},
   {"Axes", "True", 
    StyleBox[
     RowBox[{
     "Axes", " ", "is", " ", "an", " ", "option", " ", "for", " ", "graphics",
       " ", "functions", " ", "that", " ", "specifies", " ", "whether", " ", 
      "axes", " ", "should", " ", "be", " ", 
      RowBox[{"drawn", ".", " "}]}], "Text"]},
   {"AxesEdge", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "AxesEdge", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "three"}], "-", 
      RowBox[{
      "dimensional", " ", "graphics", " ", "functions", " ", "that", " ", 
       "specifies", " ", "on", " ", "which", " ", "edges", " ", "of", " ", 
       "the", " ", "bounding", " ", "box", " ", "axes", " ", "should", " ", 
       "be", " ", 
       RowBox[{"drawn", ".", " "}]}]}], "Text"]},
   {"AxesLabel", "None", 
    StyleBox[
     RowBox[{
     "AxesLabel", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "labels", " ", "for", " ", 
      RowBox[{"axes", ".", " "}]}], "Text"]},
   {"AxesOrigin", "Automatic", 
    StyleBox[
     RowBox[{
     "AxesOrigin", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "where", " ", "any", " ", "axes", " ", "drawn", " ", "should", " ", 
      RowBox[{"cross", ".", " "}]}], "Text"]},
   {"AxesStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "AxesStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", "how",
       " ", "axes", " ", "should", " ", "be", " ", 
      RowBox[{"rendered", ".", " "}]}], "Text"]},
   {"Background", "None", 
    StyleBox[
     RowBox[{
     "Background", " ", "is", " ", "an", " ", "option", " ", "that", " ", 
      "specifies", " ", "what", " ", "background", " ", "color", " ", "to", 
      " ", 
      RowBox[{"use", ".", " "}]}], "Text"]},
   {"BaselinePosition", "Automatic", 
    StyleBox[
     RowBox[{
     "BaselinePosition", " ", "is", " ", "an", " ", "option", " ", "that", 
      " ", "specifies", " ", "where", " ", "the", " ", "baseline", " ", "of", 
      " ", "an", " ", "object", " ", "is", " ", "considered", " ", "to", " ", 
      "be", " ", "for", " ", "purposes", " ", "of", " ", "alignment", " ", 
      "with", " ", "surrounding", " ", "text", " ", "or", " ", "other", " ", 
      RowBox[{"expressions", ".", " "}]}], "Text"]},
   {"BaseStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "BaseStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "formatting", " ", "and", " ", "related", " ", "constructs", " ", 
      "that", " ", "specifies", " ", "the", " ", "base", " ", "style", " ", 
      "to", " ", "use", " ", "for", " ", 
      RowBox[{"them", ".", " "}]}], "Text"]},
   {"Boxed", "True", 
    StyleBox[
     RowBox[{
      RowBox[{
      "Boxed", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Graphics3D", " ", "that", " ", "specifies", " ", "whether", " ", "to",
        " ", "draw", " ", "the", " ", "edges", " ", "of", " ", "the", " ", 
       "bounding", " ", "box", " ", "in", " ", "a", " ", "three"}], 
      "\[Hyphen]", 
      RowBox[{"dimensional", " ", 
       RowBox[{"picture", ".", " "}]}]}], "Text"]},
   {"BoxRatios", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "0.4`"}], "}"}], 
    StyleBox[
     RowBox[{
      RowBox[{
      "BoxRatios", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Graphics3D", " ", "that", " ", "gives", " ", "the", " ", "ratios", 
       " ", "of", " ", "side", " ", "lengths", " ", "for", " ", "the", " ", 
       "bounding", " ", "box", " ", "of", " ", "the", " ", "three"}], 
      "\[Hyphen]", 
      RowBox[{"dimensional", " ", 
       RowBox[{"picture", ".", " "}]}]}], "Text"]},
   {"BoxStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
      RowBox[{
      "BoxStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "three"}], "-", 
      RowBox[{
      "dimensional", " ", "graphics", " ", "functions", " ", "that", " ", 
       "specifies", " ", "how", " ", "the", " ", "bounding", " ", "box", " ", 
       "should", " ", "be", " ", 
       RowBox[{"rendered", ".", " "}]}]}], "Text"]},
   {"ClipPlanes", "None", 
    StyleBox[
     RowBox[{
     "ClipPlanes", " ", "is", " ", "an", " ", "option", " ", "to", " ", 
      "Graphics3D", " ", "that", " ", "specifies", " ", "a", " ", "list", " ",
       "of", " ", "clipping", " ", "planes", " ", "that", " ", "can", " ", 
      "cut", " ", "away", " ", "portions", " ", "of", " ", "a", " ", "3", "D",
       " ", "scene", " ", "from", " ", "the", " ", "resulting", " ", 
      RowBox[{"view", "."}]}], "Text"]},
   {"ClipPlanesStyle", "Automatic", 
    StyleBox[
     RowBox[{
     "ClipPlanesStyle", " ", "is", " ", "an", " ", "option", " ", "to", " ", 
      "Graphics3D", " ", "that", " ", "specifies", " ", "how", " ", 
      "clipping", " ", "planes", " ", "defined", " ", "with", " ", "the", " ",
       "ClipPlanes", " ", "option", " ", "should", " ", "be", " ", 
      RowBox[{"rendered", "."}]}], "Text"]},
   {"ColorFunction", "Automatic", 
    StyleBox[
     RowBox[{
     "ColorFunction", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", "a", 
      " ", "function", " ", "to", " ", "apply", " ", "to", " ", "determine", 
      " ", "colors", " ", "of", " ", 
      RowBox[{"elements", ".", " "}]}], "Text"]},
   {"ColorFunctionScaling", "True", 
    StyleBox[
     RowBox[{
     "ColorFunctionScaling", " ", "is", " ", "an", " ", "option", " ", "for", 
      " ", "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "whether", " ", "arguments", " ", "supplied", " ", "to", " ", "a", " ", 
      "color", " ", "function", " ", "should", " ", "be", " ", "scaled", " ", 
      "to", " ", "lie", " ", "between", " ", "0", " ", "and", " ", "1.", 
      " "}], "Text"]},
   {"ColorOutput", "Automatic", 
    StyleBox[
     RowBox[{
     "ColorOutput", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", "the",
       " ", "type", " ", "of", " ", "color", " ", "output", " ", "to", " ", 
      RowBox[{"produce", ".", " "}]}], "Text"]},
   {"ContentSelectable", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "ContentSelectable", " ", "is", " ", "an", " ", "option", " ", "to", 
       " ", "constructs", " ", "such", " ", "as", " ", "Inset"}], ",", " ", 
      "Graphics", ",", " ", 
      RowBox[{
      "and", " ", "GraphicsGroup", " ", "that", " ", "specifies", " ", 
       "whether", " ", "and", " ", "how", " ", "content", " ", "within", " ", 
       "them", " ", "should", " ", "be", " ", 
       RowBox[{"selectable", ".", " "}]}]}], "Text"]},
   {"ControllerLinking", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "ControllerLinking", " ", "is", " ", "an", " ", "option", " ", "for", 
       " ", "Manipulate"}], ",", " ", "Graphics3D", ",", " ", "Plot3D", ",", 
      " ", 
      RowBox[{
      "and", " ", "related", " ", "functions", " ", "that", " ", "specifies", 
       " ", "whether", " ", "to", " ", "allow", " ", "interactive", " ", 
       "control", " ", "by", " ", "external", " ", 
       RowBox[{"controllers", "."}]}]}], "Text"]},
   {"ControllerMethod", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "ControllerMethod", " ", "is", " ", "an", " ", "option", " ", "for", 
       " ", "Manipulate"}], ",", " ", "Graphics3D", ",", " ", "Plot3D", ",", 
      " ", 
      RowBox[{
      "and", " ", "related", " ", "functions", " ", "that", " ", "specifies", 
       " ", "the", " ", "default", " ", "way", " ", "that", " ", "controls", 
       " ", "on", " ", "an", " ", "external", " ", "controller", " ", 
       "device", " ", "should", " ", 
       RowBox[{"apply", "."}]}]}], "Text"]},
   {"ControllerPath", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "ControllerPath", " ", "is", " ", "an", " ", "option", " ", "that", " ",
        "gives", " ", "a", " ", "list", " ", "of", " ", "external", " ", 
       "controllers", " ", "or", " ", "classes", " ", "of", " ", 
       "controllers", " ", "to", " ", "try", " ", "for", " ", "functions", 
       " ", "such", " ", "as", " ", "ControllerState"}], ",", " ", 
      "Manipulate", ",", " ", 
      RowBox[{"and", " ", 
       RowBox[{"Graphics3D", "."}]}]}], "Text"]},
   {"CoordinatesToolOptions", "Automatic", 
    StyleBox[
     RowBox[{
     "CoordinatesToolOptions", " ", "is", " ", "an", " ", "option", " ", 
      "for", " ", "Graphics", " ", "that", " ", "gives", " ", "values", " ", 
      "of", " ", "options", " ", "associated", " ", "with", " ", "the", " ", 
      StyleBox[
       RowBox[{"Get", " ", "Coordinates"}], "MenuName"], " ", 
      RowBox[{"tool", "."}]}], "Text"]},
   {"DisplayFunction", "Identity", 
    StyleBox[
     RowBox[{
     "DisplayFunction", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "and", " ", "sound", " ", "functions", " ", "that", 
      " ", "specifies", " ", "a", " ", "function", " ", "to", " ", "apply", 
      " ", "to", " ", "graphics", " ", "and", " ", "sound", " ", "objects", 
      " ", "before", " ", "returning", " ", 
      RowBox[{"them", "."}]}], "Text"]},
   {"Epilog", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "Epilog", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "gives", " ", "a", " ", 
      "list", " ", "of", " ", "graphics", " ", "primitives", " ", "to", " ", 
      "be", " ", "rendered", " ", "after", " ", "the", " ", "main", " ", 
      "part", " ", "of", " ", "the", " ", "graphics", " ", "is", " ", 
      RowBox[{"rendered", ".", " "}]}], "Text"]},
   {"EvaluationMonitor", "None", 
    StyleBox[
     RowBox[{
     "EvaluationMonitor", " ", "is", " ", "an", " ", "option", " ", "for", 
      " ", "various", " ", "numerical", " ", "computation", " ", "and", " ", 
      "plotting", " ", "functions", " ", "that", " ", "gives", " ", "an", " ",
       "expression", " ", "to", " ", "evaluate", " ", "whenever", " ", 
      "functions", " ", "derived", " ", "from", " ", "the", " ", "input", " ",
       "are", " ", "evaluated", " ", 
      RowBox[{"numerically", ".", " "}]}], "Text"]},
   {"ExtentElementFunction", "Automatic", 
    StyleBox[
     RowBox[{
     "ExtentElementFunction", " ", "is", " ", "an", " ", "option", " ", "to", 
      " ", "DiscretePlot", " ", "and", " ", "DiscretePlot3D", " ", "that", 
      " ", "gives", " ", "a", " ", "function", " ", "to", " ", "use", " ", 
      "to", " ", "generate", " ", "the", " ", "primitives", " ", "for", " ", 
      "rendering", " ", "each", " ", "extent", " ", 
      RowBox[{"element", ".", " "}]}], "Text"]},
   {"ExtentMarkers", "None", 
    StyleBox[
     RowBox[{
     "ExtentMarkers", " ", "is", " ", "an", " ", "option", " ", "to", " ", 
      "DiscretePlot", " ", "and", " ", "DiscretePlot3D", " ", "that", " ", 
      "specifies", " ", "markers", " ", "to", " ", "draw", " ", "at", " ", 
      "extent", " ", 
      RowBox[{"boundaries", ".", " "}]}], "Text"]},
   {"ExtentSize", "None", 
    StyleBox[
     RowBox[{
     "ExtentSize", " ", "is", " ", "an", " ", "option", " ", "to", " ", 
      "DiscretePlot", " ", "and", " ", "DiscretePlot3D", " ", "that", " ", 
      "specifies", " ", "how", " ", "far", " ", "to", " ", "extend", " ", 
      "out", " ", "from", " ", "each", " ", "plot", " ", 
      RowBox[{"point", ".", " "}]}], "Text"]},
   {"FaceGrids", "None", 
    StyleBox[
     RowBox[{
      RowBox[{
      "FaceGrids", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "three"}], "-", 
      RowBox[{
      "dimensional", " ", "graphics", " ", "functions", " ", "that", " ", 
       "specifies", " ", "grid", " ", "lines", " ", "to", " ", "draw", " ", 
       "on", " ", "the", " ", "faces", " ", "of", " ", "the", " ", "bounding",
        " ", 
       RowBox[{"box", ".", " "}]}]}], "Text"]},
   {"FaceGridsStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "FaceGridsStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "3", "D", " ", "graphics", " ", "functions", " ", "that", " ", 
      "specifies", " ", "how", " ", "face", " ", "grids", " ", "should", " ", 
      "be", " ", 
      RowBox[{"rendered", "."}]}], "Text"]},
   {"Filling", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "Filling", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "ListPlot"}], ",", " ", "Plot", ",", " ", "Plot3D", ",", " ", 
      RowBox[{
      "and", " ", "related", " ", "functions", " ", "that", " ", "specifies", 
       " ", "what", " ", "filling", " ", "to", " ", "add", " ", "under", " ", 
       "points"}], ",", " ", "curves", ",", " ", 
      RowBox[{"and", " ", 
       RowBox[{"surfaces", ".", " "}]}]}], "Text"]},
   {"FillingStyle", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "FillingStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "ListPlot"}], ",", " ", "Plot", ",", " ", "Plot3D", ",", " ", 
      RowBox[{
      "and", " ", "related", " ", "functions", " ", "that", " ", "specifies", 
       " ", "the", " ", "default", " ", "style", " ", "of", " ", "filling", 
       " ", "to", " ", "be", " ", 
       RowBox[{"used", ".", " "}]}]}], "Text"]},
   {"FormatType", "TraditionalForm", 
    StyleBox[
     RowBox[{
      RowBox[{
      "FormatType", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "output", " ", "streams"}], ",", " ", "graphics", ",", " ", 
      RowBox[{
      "and", " ", "functions", " ", "such", " ", "as", " ", "Text", " ", 
       "that", " ", "specifies", " ", "the", " ", "default", " ", "format", 
       " ", "type", " ", "to", " ", "use", " ", "when", " ", "outputting", 
       " ", 
       RowBox[{"expressions", ".", " "}]}]}], "Text"]},
   {"ImageMargins", "0.`", 
    StyleBox[
     RowBox[{
     "ImageMargins", " ", "is", " ", "an", " ", "option", " ", "that", " ", 
      "specifies", " ", "the", " ", "absolute", " ", "margins", " ", "to", 
      " ", "leave", " ", "around", " ", "the", " ", "image", " ", "displayed",
       " ", "for", " ", "an", " ", 
      RowBox[{"object", ".", " "}]}], "Text"]},
   {"ImagePadding", "All", 
    StyleBox[
     RowBox[{
     "ImagePadding", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "what", " ", "absolute", " ", "extra", " ", "padding", " ", "should", 
      " ", "be", " ", "left", " ", "for", " ", "extended", " ", "objects", 
      " ", "such", " ", "as", " ", "thick", " ", "lines", " ", "and", " ", 
      "annotations", " ", "such", " ", "as", " ", "tick", " ", "and", " ", 
      "axis", " ", 
      RowBox[{"labels", "."}]}], "Text"]},
   {"ImageSize", "Automatic", 
    StyleBox[
     RowBox[{
     "ImageSize", " ", "is", " ", "an", " ", "option", " ", "that", " ", 
      "specifies", " ", "the", " ", "overall", " ", "size", " ", "of", " ", 
      "an", " ", "image", " ", "to", " ", "display", " ", "for", " ", "an", 
      " ", 
      RowBox[{"object", ".", " "}]}], "Text"]},
   {"ImageSizeRaw", "Automatic", 
    StyleBox[
     RowBox[{"No", " ", "description", " ", 
      RowBox[{"available", "."}]}], "Text"]},
   {"Joined", "False", 
    StyleBox[
     RowBox[{
      RowBox[{
      "Joined", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "ListPlot", " ", "and", " ", "related", " ", "functions", " ", "that", 
       " ", "specifies", " ", "whether", " ", "points", " ", "in", " ", 
       "each", " ", "dataset", " ", "should", " ", "be", " ", "joined", " ", 
       "into", " ", "a", " ", "line"}], ",", " ", 
      RowBox[{
      "or", " ", "should", " ", "be", " ", "plotted", " ", "as", " ", 
       "separate", " ", 
       RowBox[{"points", ".", " "}]}]}], "Text"]},
   {"LabelStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
      RowBox[{
      "LabelStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "formatting", " ", "and", " ", "related", " ", "constructs", " ", 
       "that", " ", "specifies", " ", "the", " ", "style", " ", "to", " ", 
       "use", " ", "in", " ", "displaying", " ", "their", " ", "label"}], "-", 
      RowBox[{"like", " ", 
       RowBox[{"elements", ".", " "}]}]}], "Text"]},
   {"Lighting", "\"\<Neutral\>\"", 
    StyleBox[
     RowBox[{
     "Lighting", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "Graphics3D", " ", "and", " ", "related", " ", "functions", " ", "that",
       " ", "specifies", " ", "what", " ", "simulated", " ", "lighting", " ", 
      "to", " ", "use", " ", "in", " ", "coloring", " ", "3", "D", " ", 
      RowBox[{"surfaces", ".", " "}]}], "Text"]},
   {"Method", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "Method", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "various", " ", "algorithm"}], "-", 
      RowBox[{
      "intensive", " ", "functions", " ", "that", " ", "specifies", " ", 
       "what", " ", "internal", " ", "methods", " ", "they", " ", "should", 
       " ", 
       RowBox[{"use", "."}]}]}], "Text"]},
   {"PerformanceGoal", "\"\<Quality\>\"", 
    StyleBox[
     RowBox[{
     "PerformanceGoal", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "and", " ", "various", " ", "other", " ", 
      "algorithmic", " ", "functions", " ", "that", " ", "specifies", " ", 
      "what", " ", "aspect", " ", "of", " ", "performance", " ", "to", " ", 
      "try", " ", "to", " ", "optimize", " ", "with", " ", "Automatic", " ", 
      "settings", " ", "for", " ", 
      RowBox[{"options", "."}]}], "Text"]},
   {"PlotLabel", "None", 
    StyleBox[
     RowBox[{
     "PlotLabel", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", "an", 
      " ", "overall", " ", "label", " ", "for", " ", "a", " ", 
      RowBox[{"plot", ".", " "}]}], "Text"]},
   {"PlotLegends", "None", 
    StyleBox[
     RowBox[{
     "PlotLegends", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plot", " ", "functions", " ", "that", " ", "specifies", " ", "what", 
      " ", "legends", " ", "to", " ", 
      RowBox[{"use", ".", " "}]}], "Text"]},
   {"PlotMarkers", "None", 
    StyleBox[
     RowBox[{
     "PlotMarkers", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "like", " ", "ListPlot", " ", "and", 
      " ", "ListLinePlot", " ", "that", " ", "specifies", " ", "what", " ", 
      "markers", " ", "to", " ", "draw", " ", "at", " ", "the", " ", "points",
       " ", 
      RowBox[{"plotted", ".", " "}]}], "Text"]},
   {"PlotRange", 
    RowBox[{"{", 
     RowBox[{"Full", ",", "Full", ",", "Automatic"}], "}"}], 
    StyleBox[
     RowBox[{
     "PlotRange", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "what", " ", "range", " ", "of", " ", "coordinates", " ", "to", " ", 
      "include", " ", "in", " ", "a", " ", 
      RowBox[{"plot", ".", " "}]}], "Text"]},
   {"PlotRangePadding", "Automatic", 
    StyleBox[
     RowBox[{
     "PlotRangePadding", " ", "is", " ", "an", " ", "option", " ", "for", " ",
       "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "how", " ", "much", " ", "further", " ", "axes", " ", 
      RowBox[{"etc", ".", " ", "should"}], " ", "extend", " ", "beyond", " ", 
      "the", " ", "range", " ", "of", " ", "coordinates", " ", "specified", 
      " ", "by", " ", 
      RowBox[{"PlotRange", ".", " "}]}], "Text"]},
   {"PlotRegion", "Automatic", 
    StyleBox[
     RowBox[{
     "PlotRegion", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "what", " ", "region", " ", "of", " ", "the", " ", "final", " ", 
      "display", " ", "area", " ", "a", " ", "plot", " ", "should", " ", 
      RowBox[{"fill", ".", " "}]}], "Text"]},
   {"PlotStyle", "Automatic", 
    StyleBox[
     RowBox[{
     "PlotStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "and", " ", "related", " ", "functions", " ", "that", 
      " ", "specifies", " ", "styles", " ", "in", " ", "which", " ", 
      "objects", " ", "are", " ", "to", " ", "be", " ", 
      RowBox[{"drawn", ".", " "}]}], "Text"]},
   {"PlotTheme", "Automatic", 
    StyleBox[
     RowBox[{
     "PlotTheme", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "and", " ", "related", " ", "functions", " ", "that", 
      " ", "specifies", " ", "an", " ", "overall", " ", "theme", " ", "for", 
      " ", "visualization", " ", "elements", " ", "and", " ", 
      RowBox[{"styles", ".", " "}]}], "Text"]},
   {"PreserveImageOptions", "Automatic", 
    StyleBox[
     RowBox[{
     "PreserveImageOptions", " ", "is", " ", "an", " ", "option", " ", "to", 
      " ", "graphics", " ", "and", " ", "related", " ", "functions", " ", 
      "that", " ", "specifies", " ", "whether", " ", "image", " ", "size", 
      " ", "and", " ", "certain", " ", "other", " ", "options", " ", "should",
       " ", "be", " ", "preserved", " ", "from", " ", "the", " ", "previous", 
      " ", "version", " ", "of", " ", "a", " ", "graphic", " ", "if", " ", 
      "the", " ", "graphic", " ", "is", " ", "replaced", " ", "by", " ", "a", 
      " ", "new", " ", "one", " ", "in", " ", 
      RowBox[{"output", "."}]}], "Text"]},
   {"Prolog", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "Prolog", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "which", " ", "gives", " ", "a", " ",
       "list", " ", "of", " ", "graphics", " ", "primitives", " ", "to", " ", 
      "be", " ", "rendered", " ", "before", " ", "the", " ", "main", " ", 
      "part", " ", "of", " ", "the", " ", "graphics", " ", "is", " ", 
      RowBox[{"rendered", ".", " "}]}], "Text"]},
   {"RegionFunction", 
    RowBox[{"True", "&"}], 
    StyleBox[
     RowBox[{
     "RegionFunction", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "functions", " ", "that", " ", "specifies", " ", "the",
       " ", "region", " ", "to", " ", "include", " ", "in", " ", "the", " ", 
      "plot", " ", 
      RowBox[{"drawn", ".", " "}]}], "Text"]},
   {"RotationAction", "\"\<Fit\>\"", 
    StyleBox[
     RowBox[{
      RowBox[{
      "RotationAction", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "three"}], "-", 
      RowBox[{
      "dimensional", " ", "graphics", " ", "functions", " ", "that", " ", 
       "specifies", " ", "how", " ", "to", " ", "render", " ", "3", "D", " ", 
       "objects", " ", "when", " ", "they", " ", "are", " ", "interactively", 
       " ", 
       RowBox[{"rotated", "."}]}]}], "Text"]},
   {"SphericalRegion", "False", 
    StyleBox[
     RowBox[{
      RowBox[{
       RowBox[{
       "SphericalRegion", " ", "is", " ", "an", " ", "option", " ", "for", 
        " ", "three"}], "-", 
       RowBox[{
       "dimensional", " ", "graphics", " ", "functions", " ", "that", " ", 
        "specifies", " ", "whether", " ", "the", " ", "final", " ", "image", 
        " ", "should", " ", "be", " ", "scaled", " ", "so", " ", "that", " ", 
        "a", " ", "sphere", " ", "drawn", " ", "around", " ", "the", " ", 
        "three"}]}], "\[Hyphen]", 
      RowBox[{
      "dimensional", " ", "bounding", " ", "box", " ", "would", " ", "fit", 
       " ", "in", " ", "the", " ", "display", " ", "area", " ", 
       RowBox[{"specified", ".", " "}]}]}], "Text"]},
   {"Ticks", "Automatic", 
    StyleBox[
     RowBox[{
     "Ticks", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "tick", " ", "marks", " ", "for", " ", 
      RowBox[{"axes", ".", " "}]}], "Text"]},
   {"TicksStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "TicksStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "which", " ", "specifies", " ", 
      "how", " ", "ticks", " ", "should", " ", "be", " ", 
      RowBox[{"rendered", "."}]}], "Text"]},
   {"TouchscreenAutoZoom", "False", 
    StyleBox[
     RowBox[{
      RowBox[{
      "TouchscreenAutoZoom", " ", "is", " ", "an", " ", "option", " ", "for", 
       " ", "Manipulate", " ", "and", " ", "Graphics3D", " ", "that", " ", 
       "determines", " ", "whether", " ", "the", " ", "interface", " ", 
       "zooms", " ", "to", " ", "full"}], "-", 
      RowBox[{
      "screen", " ", "when", " ", "it", " ", "is", " ", "activated", " ", 
       "by", " ", "touching", " ", "it", " ", "on", " ", "supported", " ", 
       "touch", " ", "screen", " ", 
       RowBox[{"platforms", "."}]}]}], "Text"]},
   {"ViewAngle", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "ViewAngle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Graphics3D", " ", "and", " ", "related", " ", "functions", " ", 
       "that", " ", "gives", " ", "the", " ", "opening", " ", "angle", " ", 
       "for", " ", "a", " ", "simulated", " ", "camera", " ", "used", " ", 
       "to", " ", "view", " ", "the", " ", "three"}], "-", 
      RowBox[{"dimensional", " ", 
       RowBox[{"scene", ".", " "}]}]}], "Text"]},
   {"ViewCenter", "Automatic", 
    StyleBox[
     RowBox[{
     "ViewCenter", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "Graphics3D", " ", "and", " ", "related", " ", "functions", " ", 
      "which", " ", "gives", " ", "the", " ", "scaled", " ", "coordinates", 
      " ", "of", " ", "the", " ", "point", " ", "which", " ", "should", " ", 
      "appear", " ", "at", " ", "the", " ", "center", " ", "of", " ", "the", 
      " ", "final", " ", 
      RowBox[{"image", ".", " "}]}], "Text"]},
   {"ViewMatrix", "Automatic", 
    StyleBox[
     RowBox[{
     "ViewMatrix", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "Graphics3D", " ", "and", " ", "related", " ", "functions", " ", "that",
       " ", "can", " ", "be", " ", "used", " ", "to", " ", "specify", " ", 
      "a", " ", "pair", " ", "of", " ", "explicit", " ", "homogeneous", " ", 
      "transformation", " ", "and", " ", "projection", " ", "matrices", " ", 
      "for", " ", "3", "D", " ", 
      RowBox[{"coordinates", "."}]}], "Text"]},
   {"ViewPoint", 
    RowBox[{"{", 
     RowBox[{"1.3`", ",", 
      RowBox[{"-", "2.4`"}], ",", "2.`"}], "}"}], 
    StyleBox[
     RowBox[{
      RowBox[{
      "ViewPoint", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Graphics3D", " ", "and", " ", "related", " ", "functions", " ", 
       "which", " ", "gives", " ", "the", " ", "point", " ", "in", " ", 
       "space", " ", "from", " ", "which", " ", "three"}], "\[Hyphen]", 
      RowBox[{
      "dimensional", " ", "objects", " ", "are", " ", "to", " ", "be", " ", 
       RowBox[{"viewed", ".", " "}]}]}], "Text"]},
   {"ViewRange", "All", 
    StyleBox[
     RowBox[{
      RowBox[{
      "ViewRange", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Graphics3D", " ", "and", " ", "related", " ", "functions", " ", 
       "which", " ", "specifies", " ", "the", " ", "range", " ", "of", " ", 
       "distances", " ", "from", " ", "the", " ", "view", " ", "point", " ", 
       "to", " ", "be", " ", "included", " ", "in", " ", "displaying", " ", 
       "a", " ", "three"}], "-", 
      RowBox[{"dimensional", " ", 
       RowBox[{"scene", ".", " "}]}]}], "Text"]},
   {"ViewVector", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "ViewVector", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Graphics3D", " ", "and", " ", "related", " ", "functions", " ", 
       "which", " ", "specifies", " ", "the", " ", "position", " ", "and", 
       " ", "direction", " ", "of", " ", "a", " ", "simulated", " ", "camera",
        " ", "used", " ", "to", " ", "view", " ", "three"}], "-", 
      RowBox[{"dimensional", " ", 
       RowBox[{"objects", ".", " "}]}]}], "Text"]},
   {"ViewVertical", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1"}], "}"}], 
    StyleBox[
     RowBox[{
     "ViewVertical", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "Graphics3D", " ", "and", " ", "related", " ", "functions", " ", 
      "which", " ", "specifies", " ", "what", " ", "direction", " ", "in", 
      " ", "scaled", " ", "coordinates", " ", "should", " ", "be", " ", 
      "vertical", " ", "in", " ", "the", " ", "final", " ", 
      RowBox[{"image", ".", " "}]}], "Text"]},
   {"WorkingPrecision", "MachinePrecision", 
    StyleBox[
     RowBox[{
     "WorkingPrecision", " ", "is", " ", "an", " ", "option", " ", "for", " ",
       "various", " ", "numerical", " ", "operations", " ", "that", " ", 
      "specifies", " ", "how", " ", "many", " ", "digits", " ", "of", " ", 
      "precision", " ", "should", " ", "be", " ", "maintained", " ", "in", 
      " ", "internal", " ", 
      RowBox[{"computations", ".", " "}]}], "Text"]}
  },
  GridBoxAlignment->{"Columns" -> {{Left}}},
  GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{True}}},
  GridBoxItemSize->{"Columns" -> {Automatic, Automatic, {
       Scaled[0.5]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
    "RowsIndexed" -> {}}]], "Text",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{3.6337002711559668`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Example 1", "Subsubsection",
 CellChangeTimes->{{3.6333526560119343`*^9, 3.633352677447281*^9}, {
  3.633700360084256*^9, 3.633700370310169*^9}}],

Cell["\<\
Positive and negative numbers can be seen as the phases 0 and \[Pi].\
\>", "Text",
 CellChangeTimes->{{3.633700627802149*^9, 3.633700639529421*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomReal", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "5"}], "}"}]}], "]"}], "//", 
  "ComplexMatrixPlot"}]], "Input",
 CellChangeTimes->{{3.633700383016532*^9, 3.6337004137633038`*^9}}],

Cell[BoxData[
 TemplateBox[{Graphics3DBox[{
     Directive[
      CapForm["Butt"], 
      EdgeForm[
       Directive[
        Opacity[0.5]]]], {{
       Directive[
        PointSize[0.019444444444444445`], 
        RGBColor[0.3315753, 0.4561011, 0.6388182], 
        Opacity[0.7]], {{{
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[1., 0.3, 0.3], 
           Opacity[0.7]], 
          CuboidBox[{0.5, 0.5, 0.8691283057266626}, {1.5, 1.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[0.3, 1., 1.], 
           Opacity[0.7]], 
          CuboidBox[{0.5, 1.5, 0.7930939024990882}, {1.5, 2.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[1., 0.3, 0.3], 
           Opacity[0.7]], 
          CuboidBox[{0.5, 2.5, 0.8967296590729497}, {1.5, 3.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[0.3, 1., 1.], 
           Opacity[0.7]], 
          CuboidBox[{0.5, 3.5, 0.7491032302580725}, {1.5, 4.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[0.3, 1., 1.], 
           Opacity[0.7]], 
          CuboidBox[{0.5, 4.5, 0.6100019189894481}, {1.5, 5.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[1., 0.3, 0.3], 
           Opacity[0.7]], 
          CuboidBox[{1.5, 0.5, 0.28800613916180673`}, {2.5, 1.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[0.3, 1., 1.], 
           Opacity[0.7]], 
          CuboidBox[{1.5, 1.5, 0.9732608170424273}, {2.5, 2.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[1., 0.3, 0.3], 
           Opacity[0.7]], 
          CuboidBox[{1.5, 2.5, 0.8749726810151843}, {2.5, 3.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[0.3, 1., 1.], 
           Opacity[0.7]], 
          CuboidBox[{1.5, 3.5, 0.7611069339255323}, {2.5, 4.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[0.3, 1., 1.], 
           Opacity[0.7]], 
          CuboidBox[{1.5, 4.5, 0.43391551354679336`}, {2.5, 5.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[0.3, 1., 1.], 
           Opacity[0.7]], 
          CuboidBox[{2.5, 0.5, 0.21311538450874545`}, {3.5, 1.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[1., 0.3, 0.3], 
           Opacity[0.7]], 
          CuboidBox[{2.5, 1.5, 0.09436216473545311}, {3.5, 2.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[0.3, 1., 1.], 
           Opacity[0.7]], 
          CuboidBox[{2.5, 2.5, 0.5995793401243374}, {3.5, 3.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[1., 0.3, 0.3], 
           Opacity[0.7]], 
          CuboidBox[{2.5, 3.5, 0.811399135487429}, {3.5, 4.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[0.3, 1., 1.], 
           Opacity[0.7]], 
          CuboidBox[{2.5, 4.5, 0.27662719425232307`}, {3.5, 5.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[0.3, 1., 1.], 
           Opacity[0.7]], 
          CuboidBox[{3.5, 0.5, 0.8701702075485946}, {4.5, 1.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[1., 0.3, 0.3], 
           Opacity[0.7]], 
          CuboidBox[{3.5, 1.5, 0.7113269557432762}, {4.5, 2.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[0.3, 1., 1.], 
           Opacity[0.7]], 
          CuboidBox[{3.5, 2.5, 0.1414369772156432}, {4.5, 3.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[0.3, 1., 1.], 
           Opacity[0.7]], 
          CuboidBox[{3.5, 3.5, 0.25178764034995993`}, {4.5, 4.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[1., 0.3, 0.3], 
           Opacity[0.7]], 
          CuboidBox[{3.5, 4.5, 0.5482857841748494}, {4.5, 5.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[1., 0.3, 0.3], 
           Opacity[0.7]], 
          CuboidBox[{4.5, 0.5, 0.5729950221696423}, {5.5, 1.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[1., 0.3, 0.3], 
           Opacity[0.7]], 
          CuboidBox[{4.5, 1.5, 0.6284573979432917}, {5.5, 2.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[0.3, 1., 1.], 
           Opacity[0.7]], 
          CuboidBox[{4.5, 2.5, 0.68486307295316}, {5.5, 3.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[0.3, 1., 1.], 
           Opacity[0.7]], 
          CuboidBox[{4.5, 3.5, 0.33682473967592585`}, {5.5, 4.5, 0.}]}, {
          Directive[
           PointSize[0.019444444444444445`], 
           RGBColor[0.3, 1., 1.], 
           Opacity[0.7]], 
          CuboidBox[{4.5, 4.5, 0.7790273133690953}, {5.5, 5.5, 0.}]}}}}}, {{
       EdgeForm[
        Opacity[0.5]], 
       Directive[
        PointSize[0.019444444444444445`], 
        RGBColor[0.3315753, 0.4561011, 0.6388182], 
        Opacity[0.7]], {{}, {
         RGBColor[0.53210271, 0.61927077, 0.74717274, 0.7], {
          Polygon3DBox[CompressedData["
1:eJyF018oXnEcx/ETv7Tyq9VvdYrMM6wlN5RcWTkpRBRqK7TlT0+R4soudrNd
bBfCE26l3OHuIcqFMGyruRhKKdEPGw8PUcqOjTbCfp3v93ue76nTeZ5Xp3ed
5/OctMb26mC8ZVlJ16e4Pm8+3x664P764FdG1t736N13l3EXuGZ98d30m4SG
A9ShXThe16w/KdsJxo0foQ7tErhmXWS1vBx291GHdgVcs16+2jeT/nEXdWi3
gWsfNzvqleyKsbbV/79LbHeBm738vHmwY+vs6Qnq0C4cr5u9/DyzKn/yy98o
6tAugZu9/NyKmz2+rI2gDu0KuNnL14t/9xd93sAd0m3gZnf6fl2wPPK69VXJ
knmemO4CF6zPzXxoTc2cQh3aheN1wboMPIv/lL2LOrRL4IL1yrebVX/OD1CH
dgVcsB7eCnQXTqygDu02cOHjZsejq2hO+3rU/J9iugtcst77tWM2Z2EPdWgX
jtcl6/WJS3UDyfOoQ7sELlm3FvMipY+XUYd2BVyyftp7ORTq2kYd2m3g0sfN
js9HAyMXL3bMex7TXeCK9dOHTeHqlB+oQ7twvK5Y1+X958HDn6hDuwSuWH//
qKa2M7SGOrQr4Ir1+p7c8LfjCOrQbgNXyP8B28oQ0w==
           "], 
           VertexColors -> {{
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3]}, {
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.]}, {
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3]}, {
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.]}, {
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.]}, {
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3]}, {
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.]}, {
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3]}, {
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.]}, {
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.]}, {
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.]}, {
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3]}, {
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.]}, {
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3]}, {
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.]}, {
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.]}, {
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3]}, {
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.]}, {
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.]}, {
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3]}, {
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3]}, {
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3], 
              RGBColor[1., 0.3, 0.3]}, {
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.]}, {
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.]}, {
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.], 
              RGBColor[0.3, 1., 1.]}}]}}, {}, {{{{}, {}}, {{}, {}}}}}}}}, {
    Axes -> True, AxesEdge -> {{-1, -1}, {1, -1}, {-1, -1}}, AxesLabel -> {
       FormBox["\"Row\"", TraditionalForm], 
       FormBox["\"Column\"", TraditionalForm]}, 
     AxesOrigin -> {Automatic, Automatic, Automatic}, Boxed -> False, 
     BoxRatios -> {1, 1, 0.4}, 
     FaceGrids -> {{0, 0, -1}, {0, 1, 0}, {-1, 0, 0}}, FaceGridsStyle -> 
     Directive[
       GrayLevel[0.3, 1], 
       AbsoluteDashing[{1, 2}]], Lighting -> "Neutral", 
     Method -> {
      "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
       "DefaultPlotStyle" -> {
         Directive[
          RGBColor[0.3315753, 0.4561011, 0.6388182], 
          Opacity[1]], 
         Directive[
          RGBColor[0.7926498, 0.5499369, 0.1278459], 
          Opacity[1]], 
         Directive[
          RGBColor[0.5041629000000001, 0.6224121, 0.1753965], 
          Opacity[1]], 
         Directive[
          RGBColor[0.8302733999999999, 0.3470634, 0.18826110000000001`], 
          Opacity[1]], 
         Directive[
          RGBColor[0.47563919999999993`, 0.4235616, 0.6312158999999999], 
          Opacity[1]], 
         Directive[
          RGBColor[0.6948711, 0.3883986, 0.0921483], 
          Opacity[1]], 
         Directive[
          RGBColor[0.3275082, 0.5566509, 0.7041141], 
          Opacity[1]], 
         Directive[
          RGBColor[0.9, 0.675, 0.], 
          Opacity[1]], 
         Directive[
          RGBColor[0.5828616, 0.340344, 0.5526333000000001], 
          Opacity[1]], 
         Directive[
          RGBColor[0.5144301, 0.5278347, 0.], 
          Opacity[1]], 
         Directive[
          RGBColor[0.8235, 0.29925, 0.19125], 
          Opacity[1]], 
         Directive[
          RGBColor[0.3607400034841738, 0.4698059979094957, 0.765], 
          Opacity[1]], 
         Directive[
          RGBColor[
          0.8755460013936696, 0.5594800069683477, 0.06602579623709227], 
          Opacity[1]], 
         Directive[
          RGBColor[0.6631044054353109, 0.3222, 0.45272399163798316`], 
          Opacity[1]], 
         Directive[
          RGBColor[0.25223796933927034`, 0.6435, 0.3862880390227469], 
          Opacity[1]]}, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
       Scaled[0.05], "RelieveDPZFighting" -> True, "SpherePoints" -> 10, 
       "TubePoints" -> 10}, Ticks -> {{{1, 
         FormBox["1", TraditionalForm]}, {2, 
         FormBox["2", TraditionalForm]}, {3, 
         FormBox["3", TraditionalForm]}, {4, 
         FormBox["4", TraditionalForm]}, {5, 
         FormBox["5", TraditionalForm]}}, {{1, 
         FormBox["1", TraditionalForm]}, {2, 
         FormBox["2", TraditionalForm]}, {3, 
         FormBox["3", TraditionalForm]}, {4, 
         FormBox["4", TraditionalForm]}, {5, 
         FormBox["5", TraditionalForm]}}, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
       FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           GraphicsBox[{
             RasterBox[CompressedData["
1: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
              "], {{
                Rational[-15, 2], 
                Rational[-225, 2]}, {
                Rational[15, 2], 
                Rational[225, 2]}}], {Antialiasing -> False, 
              AbsoluteThickness[0.1], 
              Directive[
               Opacity[0.3], 
               GrayLevel[0]], 
              LineBox[
               NCache[{{
                  Rational[15, 2], 
                  Rational[-225, 2]}, {
                  Rational[-15, 2], 
                  Rational[-225, 2]}, {
                  Rational[-15, 2], 
                  Rational[225, 2]}, {
                  Rational[15, 2], 
                  Rational[225, 2]}}, {{7.5, -112.5}, {-7.5, -112.5}, {-7.5, 
                112.5}, {7.5, 112.5}}]]}, {
              CapForm[None], {}}, {Antialiasing -> False, 
              StyleBox[
               LineBox[{{7.5, -112.5}, {7.5, 112.5}}], 
               Directive[
                AbsoluteThickness[0.2], 
                Opacity[0.3], 
                GrayLevel[0]], StripOnInput -> False], 
              StyleBox[
               StyleBox[{{
                  StyleBox[
                   LineBox[{{{7.499999999999999, -56.221469183303874`}, 
                    
                    Offset[{4., 0}, {
                    7.499999999999999, -56.221469183303874`}]}, {{7.5, 
                    0.05706163339226758}, 
                    Offset[{4., 0}, {7.5, 0.05706163339226758}]}, {{7.5, 
                    56.33559245008842}, 
                    Offset[{4., 0}, {7.5, 56.33559245008842}]}, {{
                    7.5, -112.5}, 
                    Offset[{4., 0}, {7.5, -112.5}]}}], 
                   Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], StripOnInput -> False]}, 
                 StyleBox[
                  StyleBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    FractionBox["\[Pi]", "4"], TraditionalForm], 
                    
                    Offset[{7., 0.}, {
                    7.499999999999999, -56.221469183303874`}], {-1, 0.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    FractionBox["\[Pi]", "2"], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 0.05706163339226758}], {-1, 0.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    FractionBox[
                    RowBox[{"3", " ", "\[Pi]"}], "4"], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 56.33559245008842}], {-1, 0.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["0", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -112.5}], {-1, 0.}, Automatic, {1, 
                    0}]}, 
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], {
                    Directive[
                    Opacity[1]]}, StripOnInput -> False]}, {}}, {
                    Directive[
                    Opacity[1]]}, StripOnInput -> False], "GraphicsLabel", 
                  StripOnInput -> False]}, "GraphicsTicks", StripOnInput -> 
                False], 
               Directive[
                AbsoluteThickness[0.2], 
                Opacity[0.3], 
                GrayLevel[0]], StripOnInput -> False]}}, PlotRangePadding -> 
            Scaled[0.02], PlotRange -> All, Frame -> True, 
            FrameTicks -> {{False, False}, {True, False}}, FrameStyle -> 
            Opacity[0], FrameTicksStyle -> Opacity[0], 
            ImageSize -> {Automatic, 225}, BaseStyle -> {}], Alignment -> 
           Left, AppearanceElements -> None, ImageMargins -> {{5, 5}, {5, 5}},
            ImageSizeAction -> "ResizeToFit"], LineIndent -> 0, StripOnInput -> 
          False], {FontFamily -> "Arial"}, Background -> Automatic, 
         StripOnInput -> False], TraditionalForm]}, "BarLegend", 
      DisplayFunction -> (#& ), 
      InterpretationFunction :> (RowBox[{"BarLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{
                 RowBox[{"Hue", "[", 
                   FractionBox["#1", 
                    RowBox[{"\[Pi]", " ", "2"}]], "]"}], "&"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0", ",", "\[Pi]"}], "}"}]}], "}"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
           RowBox[{"Ticks", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"0", ",", 
                 FractionBox["\[Pi]", "4"], ",", 
                 FractionBox["\[Pi]", "2"], ",", 
                 FractionBox[
                  RowBox[{"3", " ", "\[Pi]"}], "4"], ",", "\[Pi]"}], "}"}]}], 
           ",", 
           RowBox[{"Charting`TickSide", "\[Rule]", "Right"}], ",", 
           RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}]}], "]"}]& )], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.633700407751464*^9, 3.633700465940259*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Example 2", "Subsubsection",
 CellChangeTimes->{{3.633700378387631*^9, 3.6337003802190533`*^9}}],

Cell["\<\
Conjugate symmetry can be spotted with color symmetry across the diagonal.\
\>", "Text",
 CellChangeTimes->{{3.633700643105834*^9, 3.6337006754400387`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"A", "=", 
      RowBox[{
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "3"}], "}"}]}], "]"}], "+", 
       RowBox[{"I", " ", 
        RowBox[{"RandomReal", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "3"}], "}"}]}], "]"}]}]}]}], "}"}], ",", 
    RowBox[{"A", "+", 
     RowBox[{"A", "\[ConjugateTranspose]"}]}]}], "]"}], "//", 
  "ComplexMatrixPlot"}]], "Input",
 CellChangeTimes->{{3.633700500104514*^9, 3.633700582243248*^9}}],

Cell[BoxData[
 TemplateBox[{Graphics3DBox[{
     CapForm["Butt"], 
     EdgeForm[
      Opacity[0.5]], {
      RGBColor[0.3315753, 0.4561011, 0.6388182], 
      PointSize[0.019444444444444445`], 
      Opacity[0.7], {{
        RGBColor[0.3, 1., 1.], 
        PointSize[0.019444444444444445`], 
        Opacity[0.7], 
        CuboidBox[{0.5, 0.5, 0.5937051348502669}, {1.5, 1.5, 0.}]}, {
        RGBColor[0.3, 1., 0.8922038262679457], 
        PointSize[0.019444444444444445`], 
        Opacity[0.7], 
        CuboidBox[{0.5, 1.5, 1.6263925552049205`}, {1.5, 2.5, 0.}]}, {
        RGBColor[1., 0.8201267715919367, 0.3], 
        PointSize[0.019444444444444445`], 
        Opacity[0.7], 
        CuboidBox[{0.5, 2.5, -1.6052779420079804`}, {1.5, 3.5, 0.}]}, {
        RGBColor[0.3, 1., 0.8922038262679457], 
        PointSize[0.019444444444444445`], 
        Opacity[0.7], 
        CuboidBox[{1.5, 0.5, -1.6263925552049205`}, {2.5, 1.5, 0.}]}, {
        RGBColor[0.3, 1., 1.], 
        PointSize[0.019444444444444445`], 
        Opacity[0.7], 
        CuboidBox[{1.5, 1.5, 1.7833489340016273`}, {2.5, 2.5, 0.}]}, {
        RGBColor[1., 0.6273497445888554, 0.3], 
        PointSize[0.019444444444444445`], 
        Opacity[0.7], 
        CuboidBox[{1.5, 2.5, 1.23219246638677}, {2.5, 3.5, 0.}]}, {
        RGBColor[1., 0.8201267715919367, 0.3], 
        PointSize[0.019444444444444445`], 
        Opacity[0.7], 
        CuboidBox[{2.5, 0.5, 1.6052779420079804`}, {3.5, 1.5, 0.}]}, {
        RGBColor[1., 0.6273497445888554, 0.3], 
        PointSize[0.019444444444444445`], 
        Opacity[0.7], 
        CuboidBox[{2.5, 1.5, -1.23219246638677}, {3.5, 2.5, 0.}]}, {
        RGBColor[1., 0.3, 0.3], 
        PointSize[0.019444444444444445`], 
        Opacity[0.7], 
        CuboidBox[{2.5, 2.5, 1.8986997200381612`}, {3.5, 3.5, 0.}]}}}, {
      RGBColor[0.3315753, 0.4561011, 0.6388182], 
      PointSize[0.019444444444444445`], 
      Opacity[0.7], 
      EdgeForm[
       Opacity[0.5]], {}, {
       RGBColor[0.53210271, 0.61927077, 0.74717274], 
       Opacity[0.7], 
       Polygon3DBox[CompressedData["
1:eJxTTMoPSmVmYGDgBGIWIAaxIeCBPYz+cdTk5cL/j6D8HwTEf6CJPyAoLspk
aLyF9ReGOdjFWRxQxR8QFF+4MO6N+fqf+9HNwS7Ogyb+AIc4Ihyg9u6HmYtf
/AeaOIZ/McSnePs9mdHxxx7dHOziLA6o4gj/4hK/pzyjiH/7ZwxzsIvzoIkj
wg27+gf20HCDq8Mv/gNNnIWgONTe/ejmYBeH+wstXnCLvziv/lUo8Z89ujnY
xXnQxFkwxAEXMs9B
        "], VertexColors -> {{
           RGBColor[0.3, 1., 1.], 
           RGBColor[0.3, 1., 1.], 
           RGBColor[0.3, 1., 1.], 
           RGBColor[0.3, 1., 1.]}, {
           RGBColor[0.3, 1., 0.8922038262679457], 
           RGBColor[0.3, 1., 0.8922038262679457], 
           RGBColor[0.3, 1., 0.8922038262679457], 
           RGBColor[0.3, 1., 0.8922038262679457]}, {
           RGBColor[1., 0.8201267715919367, 0.3], 
           RGBColor[1., 0.8201267715919367, 0.3], 
           RGBColor[1., 0.8201267715919367, 0.3], 
           RGBColor[1., 0.8201267715919367, 0.3]}, {
           RGBColor[0.3, 1., 0.8922038262679457], 
           RGBColor[0.3, 1., 0.8922038262679457], 
           RGBColor[0.3, 1., 0.8922038262679457], 
           RGBColor[0.3, 1., 0.8922038262679457]}, {
           RGBColor[0.3, 1., 1.], 
           RGBColor[0.3, 1., 1.], 
           RGBColor[0.3, 1., 1.], 
           RGBColor[0.3, 1., 1.]}, {
           RGBColor[1., 0.6273497445888554, 0.3], 
           RGBColor[1., 0.6273497445888554, 0.3], 
           RGBColor[1., 0.6273497445888554, 0.3], 
           RGBColor[1., 0.6273497445888554, 0.3]}, {
           RGBColor[1., 0.8201267715919367, 0.3], 
           RGBColor[1., 0.8201267715919367, 0.3], 
           RGBColor[1., 0.8201267715919367, 0.3], 
           RGBColor[1., 0.8201267715919367, 0.3]}, {
           RGBColor[1., 0.6273497445888554, 0.3], 
           RGBColor[1., 0.6273497445888554, 0.3], 
           RGBColor[1., 0.6273497445888554, 0.3], 
           RGBColor[1., 0.6273497445888554, 0.3]}, {
           RGBColor[1., 0.3, 0.3], 
           RGBColor[1., 0.3, 0.3], 
           RGBColor[1., 0.3, 0.3], 
           RGBColor[1., 0.3, 0.3]}}]}, {}, {{{}, {}}, {{}, {}}}}}, Axes -> 
    True, AxesEdge -> {{-1, -1}, {1, -1}, {-1, -1}}, AxesLabel -> {
      FormBox["\"Row\"", TraditionalForm], 
      FormBox["\"Column\"", TraditionalForm]}, 
    AxesOrigin -> {Automatic, Automatic, Automatic}, BoxRatios -> {1, 1, 0.4},
     Boxed -> False, FaceGrids -> {{0, 0, -1}, {0, 1, 0}, {-1, 0, 0}}, 
    FaceGridsStyle -> Directive[
      GrayLevel[0.3, 1], 
      AbsoluteDashing[{1, 2}]], ImageSize -> {360., 280.03711741171736`}, 
    Lighting -> "Neutral", 
    Method -> {
     "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
      "DefaultPlotStyle" -> {
        Directive[
         RGBColor[0.3315753, 0.4561011, 0.6388182], 
         Opacity[1]], 
        Directive[
         RGBColor[0.7926498, 0.5499369, 0.1278459], 
         Opacity[1]], 
        Directive[
         RGBColor[0.5041629000000001, 0.6224121, 0.1753965], 
         Opacity[1]], 
        Directive[
         RGBColor[0.8302733999999999, 0.3470634, 0.18826110000000001`], 
         Opacity[1]], 
        Directive[
         RGBColor[0.47563919999999993`, 0.4235616, 0.6312158999999999], 
         Opacity[1]], 
        Directive[
         RGBColor[0.6948711, 0.3883986, 0.0921483], 
         Opacity[1]], 
        Directive[
         RGBColor[0.3275082, 0.5566509, 0.7041141], 
         Opacity[1]], 
        Directive[
         RGBColor[0.9, 0.675, 0.], 
         Opacity[1]], 
        Directive[
         RGBColor[0.5828616, 0.340344, 0.5526333000000001], 
         Opacity[1]], 
        Directive[
         RGBColor[0.5144301, 0.5278347, 0.], 
         Opacity[1]], 
        Directive[
         RGBColor[0.8235, 0.29925, 0.19125], 
         Opacity[1]], 
        Directive[
         RGBColor[0.3607400034841738, 0.4698059979094957, 0.765], 
         Opacity[1]], 
        Directive[
         RGBColor[
         0.8755460013936696, 0.5594800069683477, 0.06602579623709227], 
         Opacity[1]], 
        Directive[
         RGBColor[0.6631044054353109, 0.3222, 0.45272399163798316`], 
         Opacity[1]], 
        Directive[
         RGBColor[0.25223796933927034`, 0.6435, 0.3862880390227469], 
         Opacity[1]]}, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
      Scaled[0.05], "RelieveDPZFighting" -> True, "SpherePoints" -> 10, 
      "TubePoints" -> 10}, Ticks -> {{{1, 
        FormBox["1", TraditionalForm]}, {2, 
        FormBox["2", TraditionalForm]}, {3, 
        FormBox["3", TraditionalForm]}}, {{1, 
        FormBox["1", TraditionalForm]}, {2, 
        FormBox["2", TraditionalForm]}, {3, 
        FormBox["3", TraditionalForm]}}, Automatic}, 
    ViewPoint -> {0.8663369368879845, -1.6946178816871262`, 
     2.7978081683435305`}, 
    ViewVertical -> {-0.1840320981346833, 0.2808527182791634, 
     2.3548539464945475`}],FormBox[
    FormBox[
     TemplateBox[{
       FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           GraphicsBox[{
             RasterBox[CompressedData["
1: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
              "], {{
                Rational[-15, 2], 
                Rational[-225, 2]}, {
                Rational[15, 2], 
                Rational[225, 2]}}], {Antialiasing -> False, 
              AbsoluteThickness[0.1], 
              Directive[
               Opacity[0.3], 
               GrayLevel[0]], 
              LineBox[
               NCache[{{
                  Rational[15, 2], 
                  Rational[-225, 2]}, {
                  Rational[-15, 2], 
                  Rational[-225, 2]}, {
                  Rational[-15, 2], 
                  Rational[225, 2]}, {
                  Rational[15, 2], 
                  Rational[225, 2]}}, {{7.5, -112.5}, {-7.5, -112.5}, {-7.5, 
                112.5}, {7.5, 112.5}}]]}, {
              CapForm[None], {}}, {Antialiasing -> False, 
              StyleBox[
               LineBox[{{7.5, -112.5}, {7.5, 112.5}}], 
               Directive[
                AbsoluteThickness[0.2], 
                Opacity[0.3], 
                GrayLevel[0]], StripOnInput -> False], 
              StyleBox[
               StyleBox[{{
                  StyleBox[
                   LineBox[{{{7.499999999999999, -56.221469183303874`}, 
                    
                    Offset[{4., 0}, {
                    7.499999999999999, -56.221469183303874`}]}, {{7.5, 
                    0.05706163339226758}, 
                    Offset[{4., 0}, {7.5, 0.05706163339226758}]}, {{7.5, 
                    56.33559245008842}, 
                    Offset[{4., 0}, {7.5, 56.33559245008842}]}, {{
                    7.5, -112.5}, 
                    Offset[{4., 0}, {7.5, -112.5}]}}], 
                   Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], StripOnInput -> False]}, 
                 StyleBox[
                  StyleBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    FractionBox["\[Pi]", "4"], TraditionalForm], 
                    
                    Offset[{7., 0.}, {
                    7.499999999999999, -56.221469183303874`}], {-1, 0.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    FractionBox["\[Pi]", "2"], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 0.05706163339226758}], {-1, 0.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    FractionBox[
                    RowBox[{"3", " ", "\[Pi]"}], "4"], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 56.33559245008842}], {-1, 0.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["0", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -112.5}], {-1, 0.}, Automatic, {1, 
                    0}]}, 
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], {
                    Directive[
                    Opacity[1]]}, StripOnInput -> False]}, {}}, {
                    Directive[
                    Opacity[1]]}, StripOnInput -> False], "GraphicsLabel", 
                  StripOnInput -> False]}, "GraphicsTicks", StripOnInput -> 
                False], 
               Directive[
                AbsoluteThickness[0.2], 
                Opacity[0.3], 
                GrayLevel[0]], StripOnInput -> False]}}, PlotRangePadding -> 
            Scaled[0.02], PlotRange -> All, Frame -> True, 
            FrameTicks -> {{False, False}, {True, False}}, FrameStyle -> 
            Opacity[0], FrameTicksStyle -> Opacity[0], 
            ImageSize -> {Automatic, 225}, BaseStyle -> {}], Alignment -> 
           Left, AppearanceElements -> None, ImageMargins -> {{5, 5}, {5, 5}},
            ImageSizeAction -> "ResizeToFit"], LineIndent -> 0, StripOnInput -> 
          False], {FontFamily -> "Arial"}, Background -> Automatic, 
         StripOnInput -> False], TraditionalForm]}, "BarLegend", 
      DisplayFunction -> (#& ), 
      InterpretationFunction :> (RowBox[{"BarLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{
                 RowBox[{"Hue", "[", 
                   FractionBox["#1", 
                    RowBox[{"\[Pi]", " ", "2"}]], "]"}], "&"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0", ",", "\[Pi]"}], "}"}]}], "}"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
           RowBox[{"Ticks", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"0", ",", 
                 FractionBox["\[Pi]", "4"], ",", 
                 FractionBox["\[Pi]", "2"], ",", 
                 FractionBox[
                  RowBox[{"3", " ", "\[Pi]"}], "4"], ",", "\[Pi]"}], "}"}]}], 
           ",", 
           RowBox[{"Charting`TickSide", "\[Rule]", "Right"}], ",", 
           RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}]}], "]"}]& )], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.633700537849766*^9, 3.633700599930601*^9}}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["BlockForm", "Subsection",
 CellChangeTimes->{{3.6333526394457684`*^9, 3.633352654851429*^9}, {
  3.633459759056725*^9, 3.633459761036483*^9}}],

Cell[TextData[{
 StyleBox["BlockForm[", "Input",
  FontWeight->"Bold"],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input",
  FontWeight->"Bold"],
 StyleBox["n", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input",
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "is similar to ",
 StyleBox["MatrixForm", "Input"],
 ", but prints the matrix ",
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " in block form with dividers every n columns and rows. If the argument ",
 StyleBox["n", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " is omitted, ",
 StyleBox["Length[", "Input",
  FontWeight->"Bold"],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]/p", "Input",
  FontWeight->"Bold"],
 " is assumed,where ",
 StyleBox["p", "Input",
  FontWeight->"Bold"],
 " is the smallest prime factor of ",
 StyleBox["Length[", "Input",
  FontWeight->"Bold"],
 StyleBox["A", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{
  3.6340511727280617`*^9, {3.6340512636676607`*^9, 3.6340512644777603`*^9}, {
   3.63405156175956*^9, 3.634051565078553*^9}, {3.635085619017724*^9, 
   3.635085640874126*^9}},
 CellTags->"BlockForm::usage"],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.6337008153907003`*^9, 3.633700816104535*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomReal", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6", ",", "6"}], "}"}]}], "]"}], "//", "BlockForm"}]], "Input",
 CellChangeTimes->{{3.633700941108425*^9, 3.63370094870082*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      TagBox[GridBox[{
         {
          RowBox[{"-", "0.2349572695594495`"}], 
          RowBox[{"-", "0.42005031824571404`"}], "0.8327041570617495`", 
          "0.3963510621092601`", "0.8386297128386104`", 
          RowBox[{"-", "0.34012041462204223`"}]},
         {"0.6020099459796522`", "0.9459615319267276`", "0.1594971832615193`", 
          RowBox[{"-", "0.4581174051268815`"}], 
          RowBox[{"-", "0.8600782923470134`"}], 
          RowBox[{"-", "0.3578486279927273`"}]},
         {"0.030875243121007312`", "0.05554740688583237`", 
          "0.949346164222356`", "0.6046162697058559`", 
          RowBox[{"-", "0.9088100534147023`"}], 
          RowBox[{"-", "0.17473457110608015`"}]},
         {"0.6222013275858167`", "0.5968182261431205`", "0.9221496729639123`", 
          RowBox[{"-", "0.5987479560818225`"}], 
          RowBox[{"-", "0.861557291851839`"}], 
          RowBox[{"-", "0.29125688212297085`"}]},
         {
          RowBox[{"-", "0.30181881721660764`"}], 
          RowBox[{"-", "0.5887103920779237`"}], "0.5577516681555434`", 
          "0.7454506830307834`", 
          RowBox[{"-", "0.11070967156246292`"}], 
          RowBox[{"-", "0.26796526295690315`"}]},
         {
          RowBox[{"-", "0.028037108431282487`"}], "0.5516332019273964`", 
          "0.20465944277622494`", 
          RowBox[{"-", "0.4427584499827777`"}], "0.7437205503099764`", 
          "0.3080729395693056`"}
        },
        AutoDelete->False,
        GridBoxDividers->{"Columns" -> {False, {False, False, 
             Dashing[{Small, Small}]}, False}, 
          "Rows" -> {False, {False, False, 
             Dashing[{Small, Small}]}, False}},
        GridBoxItemSize->{"Columns" -> {{All}}, "Rows" -> {{All}}}],
       "Grid"]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.633700949584897*^9, 3.633700989440098*^9, 
  3.633701021166024*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BlockForm", "[", 
  RowBox[{
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "6"}], "}"}]}], "]"}], ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.633701035668241*^9, 3.633701041135015*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      TagBox[GridBox[{
         {
          RowBox[{"-", "0.9478328425280393`"}], "0.29346850438201466`", 
          RowBox[{"-", "0.5534989237131729`"}], "0.173947495512504`", 
          "0.6447736554604955`", "0.8954524451726531`"},
         {
          RowBox[{"-", "0.6819731108617799`"}], 
          RowBox[{"-", "0.11081439226679635`"}], 
          RowBox[{"-", "0.7852203241061528`"}], 
          RowBox[{"-", "0.4487152559681453`"}], "0.7512686447692896`", 
          "0.5145328479422999`"},
         {
          RowBox[{"-", "0.8558713177143966`"}], 
          RowBox[{"-", "0.9330862049041206`"}], "0.10877260700596514`", 
          RowBox[{"-", "0.5297156883665868`"}], "0.4647541286355219`", 
          "0.9005009164140332`"},
         {"0.7158616328768161`", 
          RowBox[{"-", "0.9791741195263999`"}], 
          RowBox[{"-", "0.7909143928755697`"}], 
          RowBox[{"-", "0.16329292469203294`"}], "0.21785682499504366`", 
          RowBox[{"-", "0.8983106763213571`"}]},
         {
          RowBox[{"-", "0.7584267904624622`"}], 
          RowBox[{"-", "0.2153017467660603`"}], 
          RowBox[{"-", "0.2701539415770129`"}], 
          RowBox[{"-", "0.615916002461637`"}], "0.4462967396535644`", 
          "0.6571587423038445`"},
         {"0.03507996098101973`", "0.9184252413475305`", 
          "0.6999703045485903`", 
          RowBox[{"-", "0.08683511194114235`"}], 
          RowBox[{"-", "0.12996290640472186`"}], 
          RowBox[{"-", "0.16187542441680547`"}]}
        },
        AutoDelete->False,
        GridBoxDividers->{"Columns" -> {False, {False, 
             Dashing[{Small, Small}]}, False}, "Rows" -> {False, {False, 
             Dashing[{Small, Small}]}, False}},
        GridBoxItemSize->{"Columns" -> {{All}}, "Rows" -> {{All}}}],
       "Grid"]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.633701041401278*^9}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["MatrixListForm", "Subsection",
 CellChangeTimes->{{3.6343136519607687`*^9, 3.634313663136846*^9}}],

Cell[TextData[{
 StyleBox["MatrixListForm[{", "Input"],
 StyleBox["A1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["A2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["...", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["}]", "Input"],
 " inteprets a 3D tensor as a list of matrices and displays it as such; a \
generalization of ",
 StyleBox["MatrixForm", "Input"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.634313681543186*^9, 3.634313767583549*^9}},
 CellTags->"MatrixListForm::usage"],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.634313799258635*^9, 3.634313800077886*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"TP", "[", "XX", "]"}], ",", 
    RowBox[{"TP", "[", "YY", "]"}], ",", 
    RowBox[{"TP", "[", "ZZ", "]"}]}], "}"}], "//", 
  "MatrixListForm"}]], "Input",
 CellChangeTimes->{{3.634314243085985*^9, 3.634314279362772*^9}}],

Cell[BoxData[
 TemplateBox[{TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{"0", "0", "0", "1"}, {"0", "0", "1", "0"}, {
        "0", "1", "0", "0"}, {"1", "0", "0", "0"}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{"0", "0", "0", 
         RowBox[{"-", "1"}]}, {"0", "0", "1", "0"}, {"0", "1", "0", "0"}, {
         RowBox[{"-", "1"}], "0", "0", "0"}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]],"\",\"",TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{"1", "0", "0", "0"}, {"0", 
         RowBox[{"-", "1"}], "0", "0"}, {"0", "0", 
         RowBox[{"-", "1"}], "0"}, {"0", "0", "0", "1"}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]},
  "RowDefault"]], "Output",
 CellChangeTimes->{3.634314280038619*^9, 3.6343143184459887`*^9, 
  3.634315065427843*^9}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["HintonPlot", "Subsection",
 CellChangeTimes->{{3.6343136519607687`*^9, 3.634313663136846*^9}, {
  3.638086159522276*^9, 3.6380861618329153`*^9}}],

Cell[TextData[{
 StyleBox["HintonPlot[", "Input"],
 StyleBox["mtx", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " plots a real-valued matrix ",
 StyleBox["mtx", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " as an array of squares. The size of each square indicates the magnitude of \
that matrix element, while the color indicates positive (white) and negative \
(black) elements. Tooltips on each square give the exact magnitude."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.634313681543186*^9, 3.634313767583549*^9}, {
  3.6380861687728405`*^9, 3.638086243363751*^9}, {3.638086320492544*^9, 
  3.6380863299402494`*^9}},
 CellTags->"HintonPlot::usage"],

Cell[CellGroupData[{

Cell["Options", "Subsubsection",
 CellChangeTimes->{{3.6381489367158732`*^9, 3.638148937745573*^9}}],

Cell[TextData[{
 StyleBox["Gap", "Input"],
 " is an option for ",
 StyleBox["HintonPlot", "Input"],
 " which specifies the gap that should be left between full squares in the \
plot."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.635175894438929*^9, 3.6351759179781713`*^9}, {
  3.6381489455071125`*^9, 3.638148981015304*^9}},
 CellTags->"Gap::usage"],

Cell[BoxData[GridBox[{
   {
    StyleBox["Option", "Text",
     FontWeight->Bold], 
    StyleBox[
     RowBox[{"Default", " ", "Value"}], "Text",
     FontWeight->Bold], 
    StyleBox["Description", "Text",
     FontWeight->Bold]},
   {"AxesLabel", "None", 
    StyleBox[
     RowBox[{
     "AxesLabel", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "labels", " ", "for", " ", 
      RowBox[{"axes", ".", " "}]}], "Text"]},
   {"Gap", "0.05`", 
    StyleBox[
     RowBox[{
      TagBox[
       StyleBox["Gap", "Input",
        FontFamily->"Courier"],
       DisplayForm], " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      TagBox[
       StyleBox["HintonPlot", "Input",
        FontFamily->"Courier"],
       DisplayForm], " ", "which", " ", "specifies", " ", "the", " ", "gap", 
      " ", "that", " ", "should", " ", "be", " ", "left", " ", "between", " ",
       "full", " ", "squares", " ", "in", " ", "the", " ", 
      RowBox[{"plot", "."}]}], "Text"]}
  },
  GridBoxAlignment->{"Columns" -> {{Left}}},
  GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{True}}},
  GridBoxItemSize->{"Columns" -> {Automatic, Automatic, {
       Scaled[0.5]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
    "RowsIndexed" -> {}}]], "Text",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{3.638149108622855*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.634313799258635*^9, 3.634313800077886*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HintonPlot", "[", 
  RowBox[{"RandomReal", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"3", ",", "3"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.634314243085985*^9, 3.634314279362772*^9}, {
  3.638086258955757*^9, 3.6380863111757903`*^9}, {3.638086342516712*^9, 
  3.6380863542032394`*^9}}],

Cell[BoxData[
 GraphicsBox[
  {GrayLevel[
    NCache[
     Rational[1, 2], 0.5]], 
   RectangleBox[NCache[{Rational[1, 4], Rational[1, 4]}, {0.25, 0.25}], 
    NCache[{Rational[15, 4], Rational[15, 4]}, {3.75, 3.75}]], {
    {GrayLevel[0], 
     TagBox[
      TooltipBox[RectangleBox[{1.0579594037398619`, 1.0579594037398619`}, {0.942040596260138, 0.942040596260138}],
       RowBox[{"-", "0.11951580919720461`"}]],
      Annotation[#, -0.11951580919720461`, "Tooltip"]& ]}, 
    {GrayLevel[1], 
     TagBox[
      TooltipBox[RectangleBox[{0.5280454668434887, 1.5280454668434889`}, {1.4719545331565111`, 2.471954533156511}],
       "0.973198899485844`"],
      Annotation[#, 0.973198899485844, "Tooltip"]& ]}, 
    {GrayLevel[0], 
     TagBox[
      TooltipBox[RectangleBox[{1.475, 3.475}, {0.525, 2.525}],
       RowBox[{"-", "0.9794788370058445`"}]],
      Annotation[#, -0.9794788370058445, "Tooltip"]& ]}}, {
    {GrayLevel[0], 
     TagBox[
      TooltipBox[RectangleBox[{2.108910471819128, 1.1089104718191278`}, {1.8910895281808722`, 0.8910895281808722}],
       RowBox[{"-", "0.22458000478980455`"}]],
      Annotation[#, -0.22458000478980455`, "Tooltip"]& ]}, 
    {GrayLevel[1], 
     TagBox[
      TooltipBox[RectangleBox[{1.9152839704108908`, 1.9152839704108908`}, {2.084716029589109, 2.084716029589109}],
       "0.17468959607935464`"],
      Annotation[#, 0.17468959607935464`, "Tooltip"]& ]}, 
    {GrayLevel[0], 
     TagBox[
      TooltipBox[RectangleBox[{2.4598757349673988`, 3.4598757349673988`}, {1.5401242650326012`, 2.5401242650326012`}],
       RowBox[{"-", "0.9482916843222644`"}]],
      Annotation[#, -0.9482916843222644, "Tooltip"]& ]}}, {
    {GrayLevel[1], 
     TagBox[
      TooltipBox[RectangleBox[{2.651896507362168, 0.6518965073621679}, {3.348103492637832, 1.3481034926378321`}],
       "0.7178105350033186`"],
      Annotation[#, 0.7178105350033186, "Tooltip"]& ]}, 
    {GrayLevel[1], 
     TagBox[
      TooltipBox[RectangleBox[{2.9288782390948476`, 1.9288782390948473`}, {3.0711217609051524`, 2.0711217609051524`}],
       "0.14665738875197176`"],
      Annotation[#, 0.14665738875197176`, "Tooltip"]& ]}, 
    {GrayLevel[1], 
     TagBox[
      TooltipBox[RectangleBox[{2.6061559526935594`, 2.6061559526935594`}, {3.3938440473064406`, 3.3938440473064406`}],
       "0.8121303356155525`"],
      Annotation[#, 0.8121303356155525, "Tooltip"]& ]}}}]], "Output",
 CellChangeTimes->{
  3.6380863115981035`*^9, {3.6380863435894413`*^9, 3.6380863575614223`*^9}}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["ChannelHintonPlot", "Subsection",
 CellChangeTimes->{{3.6343136519607687`*^9, 3.634313663136846*^9}, {
  3.638086159522276*^9, 3.6380861618329153`*^9}, {3.638086382726696*^9, 
  3.6380863844469414`*^9}}],

Cell[TextData[{
 StyleBox["ChannelHintonPlot[", "Input"],
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " plots a quantum channel ",
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 " as a Hinton diagram, using the Pauli-basis superoperator representation of \
",
 StyleBox["chan", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.634313681543186*^9, 3.634313767583549*^9}, {
  3.6380861687728405`*^9, 3.638086243363751*^9}, {3.638086320492544*^9, 
  3.6380863299402494`*^9}, {3.6380863858369284`*^9, 3.6380864553672423`*^9}},
 CellTags->"ChannelHintonPlot::usage"],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.634313799258635*^9, 3.634313800077886*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ChannelHintonPlot", "[", 
  RowBox[{"FunctionChannel", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "/", "2"}], ")"}], 
       RowBox[{
        RowBox[{"TP", "[", "X", "]"}], ".", "#", ".", 
        RowBox[{"TP", "[", "X", "]"}]}]}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "/", "2"}], ")"}], 
       RowBox[{"Tr", "[", "#", "]"}], 
       RowBox[{"Projector", "[", 
        RowBox[{"UnitVector", "[", 
         RowBox[{"2", ",", "1"}], "]"}], "]"}]}]}], "&"}], ",", 
    RowBox[{"InputDim", "\[Rule]", "2"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.634314243085985*^9, 3.634314279362772*^9}, {
  3.638086258955757*^9, 3.6380863111757903`*^9}, {3.638086342516712*^9, 
  3.6380863542032394`*^9}, {3.638086461359494*^9, 3.638086518360927*^9}, {
  3.6380865839700603`*^9, 3.6380865965696535`*^9}, {3.638086638202485*^9, 
  3.638086668764914*^9}}],

Cell[BoxData[
 GraphicsBox[
  {GrayLevel[
    NCache[
     Rational[1, 2], 0.5]], 
   RectangleBox[NCache[{Rational[1, 4], Rational[1, 4]}, {0.25, 0.25}], 
    NCache[{Rational[19, 4], Rational[19, 4]}, {4.75, 4.75}]], {
    {GrayLevel[1], 
     TagBox[
      TooltipBox[RectangleBox[{0.7625, 0.7625}, {1.2375, 1.2375}],
       FractionBox["1", "2"]],
      Annotation[#, 
       Rational[1, 2], "Tooltip"]& ]}, 
    {GrayLevel[
      NCache[
       Rational[1, 2], 0.5]], 
     TagBox[
      TooltipBox[RectangleBox[{1., 2.}, {1., 2.}],
       "0"],
      Annotation[#, 0, "Tooltip"]& ]}, 
    {GrayLevel[
      NCache[
       Rational[1, 2], 0.5]], 
     TagBox[
      TooltipBox[RectangleBox[{1., 3.}, {1., 3.}],
       "0"],
      Annotation[#, 0, "Tooltip"]& ]}, 
    {GrayLevel[1], 
     TagBox[
      TooltipBox[RectangleBox[{0.525, 3.525}, {1.475, 4.475}],
       "1"],
      Annotation[#, 1, "Tooltip"]& ]}}, {
    {GrayLevel[
      NCache[
       Rational[1, 2], 0.5]], 
     TagBox[
      TooltipBox[RectangleBox[{2., 1.}, {2., 1.}],
       "0"],
      Annotation[#, 0, "Tooltip"]& ]}, 
    {GrayLevel[
      NCache[
       Rational[1, 2], 0.5]], 
     TagBox[
      TooltipBox[RectangleBox[{2., 2.}, {2., 2.}],
       "0"],
      Annotation[#, 0, "Tooltip"]& ]}, 
    {GrayLevel[1], 
     TagBox[
      TooltipBox[RectangleBox[{1.7625, 2.7625}, {2.2375, 3.2375}],
       FractionBox["1", "2"]],
      Annotation[#, 
       Rational[1, 2], "Tooltip"]& ]}, 
    {GrayLevel[
      NCache[
       Rational[1, 2], 0.5]], 
     TagBox[
      TooltipBox[RectangleBox[{2., 4.}, {2., 4.}],
       "0"],
      Annotation[#, 0, "Tooltip"]& ]}}, {
    {GrayLevel[
      NCache[
       Rational[1, 2], 0.5]], 
     TagBox[
      TooltipBox[RectangleBox[{3., 1.}, {3., 1.}],
       "0"],
      Annotation[#, 0, "Tooltip"]& ]}, 
    {GrayLevel[0], 
     TagBox[
      TooltipBox[RectangleBox[{3.2375, 2.2375}, {2.7625, 1.7625}],
       RowBox[{"-", 
         FractionBox["1", "2"]}]],
      Annotation[#, 
       Rational[-1, 2], "Tooltip"]& ]}, 
    {GrayLevel[
      NCache[
       Rational[1, 2], 0.5]], 
     TagBox[
      TooltipBox[RectangleBox[{3., 3.}, {3., 3.}],
       "0"],
      Annotation[#, 0, "Tooltip"]& ]}, 
    {GrayLevel[
      NCache[
       Rational[1, 2], 0.5]], 
     TagBox[
      TooltipBox[RectangleBox[{3., 4.}, {3., 4.}],
       "0"],
      Annotation[#, 0, "Tooltip"]& ]}}, {
    {GrayLevel[0], 
     TagBox[
      TooltipBox[RectangleBox[{4.2375, 1.2375}, {3.7625, 0.7625}],
       RowBox[{"-", 
         FractionBox["1", "2"]}]],
      Annotation[#, 
       Rational[-1, 2], "Tooltip"]& ]}, 
    {GrayLevel[
      NCache[
       Rational[1, 2], 0.5]], 
     TagBox[
      TooltipBox[RectangleBox[{4., 2.}, {4., 2.}],
       "0"],
      Annotation[#, 0, "Tooltip"]& ]}, 
    {GrayLevel[
      NCache[
       Rational[1, 2], 0.5]], 
     TagBox[
      TooltipBox[RectangleBox[{4., 3.}, {4., 3.}],
       "0"],
      Annotation[#, 0, "Tooltip"]& ]}, 
    {GrayLevel[
      NCache[
       Rational[1, 2], 0.5]], 
     TagBox[
      TooltipBox[RectangleBox[{4., 4.}, {4., 4.}],
       "0"],
      Annotation[#, 0, "Tooltip"]& ]}}, 
   InsetBox["\<\"I\"\>", NCache[{1, Rational[19, 4]}, {1, 4.75}], {0, -2}], 
   InsetBox["\<\"X\"\>", NCache[{2, Rational[19, 4]}, {2, 4.75}], {0, -2}], 
   InsetBox["\<\"Y\"\>", NCache[{3, Rational[19, 4]}, {3, 4.75}], {0, -2}], 
   InsetBox["\<\"Z\"\>", NCache[{4, Rational[19, 4]}, {4, 4.75}], {0, -2}], 
   InsetBox["\<\"Z\"\>", {0, 1}, {1, 0}], 
   InsetBox["\<\"Y\"\>", {0, 2}, {1, 0}], 
   InsetBox["\<\"X\"\>", {0, 3}, {1, 0}], 
   InsetBox["\<\"I\"\>", {0, 4}, {1, 0}]}]], "Output",
 CellChangeTimes->{
  3.6380863115981035`*^9, {3.6380863435894413`*^9, 3.6380863575614223`*^9}, {
   3.6380865064834986`*^9, 3.6380865189223175`*^9}, {3.638086588422076*^9, 
   3.6380865968948555`*^9}, {3.638086646857444*^9, 3.638086669299281*^9}}]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Bloch Plots", "Section",
 CellChangeTimes->{{3.633703269797886*^9, 3.6337032721431427`*^9}}],

Cell[CellGroupData[{

Cell["BlochPlot", "Subsection",
 CellChangeTimes->{{3.633703384175787*^9, 3.633703386518056*^9}}],

Cell[TextData[{
 StyleBox["BlochPlot[", "Input"],
 StyleBox["state", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "plots ",
 StyleBox["state", "Input"],
 " on a 3D Bloch sphere,where the ",
 StyleBox["state", "Input"],
 " can be a qubit pure state or a density matrix.",
 StyleBox["\nBlochPlot[{", "Input"],
 StyleBox["state1", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["state2", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["...", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["}]", "Input"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "plots the given qubit states on a 3D Bloch sphere, where the all of the \
states are pure or a density matrices.",
 StyleBox["\nBlochPlot[{{", "Input"],
 StyleBox["state11", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["state12", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",...},{", "Input"],
 StyleBox["state21", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",", "Input"],
 StyleBox["state22", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[",...},", "Input"],
 StyleBox["...", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["}]", "Input"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "plots the given qubit states on a 3D Bloch sphere, where the all of the \
states are pure or a density matrices. The collections ",
 StyleBox["{statej1,statej2,...}", "Input"],
 " are treated as separate trajectories, and each with their own color \
scheme.\n\n",
 StyleBox["Options",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n\[Bullet] All options from ",
 StyleBox["Graphics3D", "Input"],
 ", ",
 StyleBox["ParametricPlot3D", "Input"],
 ", and ",
 StyleBox["Interpolation", "Input"],
 " are valid and are passed to their respective functions.\n\[Bullet] \
Additionally:\n",
 Cell[BoxData[GridBox[{
    {
     StyleBox["", "Text"], 
     RowBox[{
      RowBox[{
       StyleBox["\[EmptySmallSquare]", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["BlochPlotColors", "Input"], 
       StyleBox[" ", "Text"], 
       StyleBox["determines", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["the", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["color", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["scheme", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["of", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["each", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["trajectory", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["or", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["set", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["of", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox[
        RowBox[{"states", ".", " ", "It"}], "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["can", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["be", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["a", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["list", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["of", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["colors", "Text"]}], 
      StyleBox[",", "Text"], 
      RowBox[{
       StyleBox["in", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["which", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["case", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["Blend", "Input"], 
       StyleBox[" ", "Input"], 
       StyleBox["will", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["be", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["taken", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["of", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["each", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["color", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["and", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["Lighter", "Input"], 
       StyleBox[" ", "Text"], 
       StyleBox["of", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["that", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox[
        RowBox[{"color", ".", " ", "It"}], "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["can", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["also", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["be", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["a", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["list", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["of", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["pairs", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["of", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["colors", "Text"]}], 
      StyleBox[",", "Text"], 
      RowBox[{
       StyleBox["where", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["a", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["Blend", "Input"], 
       StyleBox[" ", "Text"], 
       StyleBox["is", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["taken", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["of", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["each", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox[
        RowBox[{"pair", ".", "or"}], "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["not", "Text"], 
       StyleBox[" ", "Text"]}]}]},
    {
     StyleBox["", "Text"], 
     RowBox[{
      StyleBox["\[EmptySmallSquare]", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["BlochPlotJoined", "Input"], 
      StyleBox[" ", "Text"], 
      StyleBox["specifies", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["whether", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["or", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["not", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["each", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["trajectory", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["should", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["be", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox[
       RowBox[{"interpolated", ".", " ", "In"}], "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["each", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["case", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["a", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["different", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["plotting", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["method", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["is", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox[
       RowBox[{"used", "."}], "Text"]}]},
    {
     StyleBox["", "Text"], 
     RowBox[{
      RowBox[{
       StyleBox["\[EmptySmallSquare]", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["BlochPlotEndPoints", "Input"], 
       StyleBox[" ", "Text"], 
       StyleBox["specifies", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["whether", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["or", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["not", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["the", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["end", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["points", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["of", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["a", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["trajectory", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["should", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["be", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["differentiated", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["from", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["intermediate", "Text"], 
       StyleBox[" ", "Text"], 
       StyleBox["poi", "Text"], 
       StyleBox[
        RowBox[{"nts", " ", "of", " ", "the", " ", "trajectory"}], "Text"]}], 
      
      StyleBox[",", "Text"], 
      RowBox[{
       StyleBox["True", "Input"], 
       StyleBox[" ", "Text"], 
       StyleBox["or", "Text"], 
       StyleBox[" ", "Text"], 
       RowBox[{
        StyleBox["False", "Input"], 
        StyleBox[".", "Text"], 
        StyleBox["  ", "Text"]}]}]}]},
    {
     StyleBox["", "Text"], 
     RowBox[{
      StyleBox["\[EmptySmallSquare]", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["BlochPlotLabels", "Input"], 
      StyleBox[" ", "Text"], 
      StyleBox["can", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["be", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["Off", "Input"], 
      StyleBox[" ", "Text"], 
      StyleBox["or", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["a", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["list", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["of", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["labels", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["to", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["use", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["in", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox["a", "Text"], 
      StyleBox[" ", "Text"], 
      StyleBox[
       RowBox[{"legend", "."}], "Text"]}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxDividers->{},
   GridBoxItemSize->{"Columns" -> {1, {
        Scaled[1]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}}]], "Text",
  CellChangeTimes->{{3.6351776630787067`*^9, 3.635177754271954*^9}}],
 "\n\n",
 StyleBox["Notes",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n\[Bullet] You cannot mix and match pure states and density matrices.\n\
\[Bullet] Trajectories with only one state get a line to the origin drawn.\n\n\
",
 StyleBox["Tip",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->GrayLevel[0.5]],
 "\n\[Bullet] Setting ",
 StyleBox["ViewAngle", "Input"],
 " (usually to around ",
 StyleBox["0.3", "Input"],
 ") can reduce whitespace, but may also clip some labels."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{
  3.634051248629797*^9, {3.635170106129362*^9, 3.6351706643515053`*^9}, {
   3.63517070833508*^9, 3.635170715543832*^9}, {3.6351707521772413`*^9, 
   3.635170806846305*^9}, {3.635170840631126*^9, 3.635170871642189*^9}, {
   3.635173008824541*^9, 3.635173052326558*^9}, {3.635174601678363*^9, 
   3.63517473857056*^9}, {3.635174802427175*^9, 3.635174886994725*^9}, {
   3.635175950149152*^9, 3.635175999750812*^9}, {3.635177196816668*^9, 
   3.63517724035603*^9}, {3.635177766588587*^9, 3.635177810609707*^9}, {
   3.635177846613758*^9, 3.635177995765727*^9}, {3.63518156761481*^9, 
   3.63518157697567*^9}, {3.635193677282331*^9, 3.6351937008957567`*^9}},
 CellTags->"BlochPlot::usage"],

Cell[CellGroupData[{

Cell["Options", "Subsubsection",
 CellChangeTimes->{{3.635163205259884*^9, 3.635163205965845*^9}}],

Cell[TextData[{
 StyleBox["BlochPlotColors", "Input"],
 " is an option for ",
 StyleBox["BlochPlot", "Input"],
 " and ",
 StyleBox["BlochPlot2D", "Input"],
 ". It specifies the color scheme of each list of density matrices entered."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.635163209973826*^9, 3.635163279379676*^9}, {
  3.6351710061144667`*^9, 3.6351710067881413`*^9}},
 CellTags->"BlochPlotColors::usage"],

Cell[TextData[{
 StyleBox["BlochPlotEndPoints", "Input"],
 " is an option for ",
 StyleBox["BlochPlot", "Input"],
 " which specifies whether or not end points of a trajectory should be \
differentiated from intermediate points."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.635170947506433*^9, 3.6351709845615396`*^9}},
 CellTags->"BlochPlotEndPoints::usage"],

Cell[TextData[{
 StyleBox["BlochPlotJoined", "Input"],
 " is an option for ",
 StyleBox["BlochPlot", "Input"],
 " and ",
 StyleBox["BlochPlot2D", "Input"],
 " which specifies whether trajectories should be interpolated or not. This \
forks the code into the use of ",
 StyleBox["ParametricPlot", "Input"],
 "(",
 StyleBox["3D", "Input"],
 ") or a list of ",
 StyleBox["Point", "Input"],
 "s in ",
 StyleBox["Graphics", "Input"],
 "(",
 StyleBox["3D", "Input"],
 ")."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.6351710150662613`*^9, 3.635171104035369*^9}},
 CellTags->"BlochPlotJoined::usage"],

Cell[TextData[{
 StyleBox["BlochPlotLabels", "Input"],
 " is an option for ",
 StyleBox["BlochPlot", "Input"],
 " and ",
 StyleBox["BlochPlot2D", "Input"],
 " which specifies a list of labels to use in the legend."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.635175894438929*^9, 3.6351759179781713`*^9}},
 CellTags->"BlochPlotLabels::usage"],

Cell[BoxData[GridBox[{
   {
    StyleBox["Option", "Text",
     FontWeight->Bold], 
    StyleBox[
     RowBox[{"Default", " ", "Value"}], "Text",
     FontWeight->Bold], 
    StyleBox["Description", "Text",
     FontWeight->Bold]},
   {"ViewAngle", "0.34`", 
    StyleBox[
     RowBox[{
      RowBox[{
      "ViewAngle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Graphics3D", " ", "and", " ", "related", " ", "functions", " ", 
       "that", " ", "gives", " ", "the", " ", "opening", " ", "angle", " ", 
       "for", " ", "a", " ", "simulated", " ", "camera", " ", "used", " ", 
       "to", " ", "view", " ", "the", " ", "three"}], "-", 
      RowBox[{"dimensional", " ", 
       RowBox[{"scene", ".", " "}]}]}], "Text"]},
   {"BlochPlotLabels", "Off", 
    StyleBox[
     RowBox[{
      TagBox[
       StyleBox["BlochPlotLabels", "Input",
        FontFamily->"Courier"],
       DisplayForm], " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      TagBox[
       StyleBox["BlochPlot", "Input",
        FontFamily->"Courier"],
       DisplayForm], " ", "and", " ", 
      TagBox[
       StyleBox["BlochPlot2D", "Input",
        FontFamily->"Courier"],
       DisplayForm], " ", "which", " ", "specifies", " ", "a", " ", "list", 
      " ", "of", " ", "labels", " ", "to", " ", "use", " ", "in", " ", "the", 
      " ", 
      RowBox[{"legend", "."}]}], "Text"]},
   {"BlochPlotJoined", "False", 
    StyleBox[
     RowBox[{
      TagBox[
       StyleBox["BlochPlotJoined", "Input",
        FontFamily->"Courier"],
       DisplayForm], " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      TagBox[
       StyleBox["BlochPlot", "Input",
        FontFamily->"Courier"],
       DisplayForm], " ", "and", " ", 
      TagBox[
       StyleBox["BlochPlot2D", "Input",
        FontFamily->"Courier"],
       DisplayForm], " ", "which", " ", "specifies", " ", "whether", " ", 
      "trajectories", " ", "should", " ", "be", " ", "interpolated", " ", 
      "or", " ", 
      RowBox[{"not", ".", " ", "This"}], " ", "forks", " ", "the", " ", 
      "code", " ", "into", " ", "the", " ", "use", " ", "of", " ", 
      TagBox[
       StyleBox["ParametricPlot", "Input",
        FontFamily->"Courier"],
       DisplayForm], 
      RowBox[{"(", 
       TagBox[
        StyleBox[
         RowBox[{"3", "D"}], "Input",
         FontFamily->"Courier"],
        DisplayForm], ")"}], " ", "or", " ", "a", " ", "list", " ", "of", " ", 
      TagBox[
       StyleBox["Point", "Input",
        FontFamily->"Courier"],
       DisplayForm], "s", " ", "in", " ", 
      TagBox[
       StyleBox["Graphics", "Input",
        FontFamily->"Courier"],
       DisplayForm], 
      RowBox[{
       RowBox[{"(", 
        TagBox[
         StyleBox[
          RowBox[{"3", "D"}], "Input",
          FontFamily->"Courier"],
         DisplayForm], ")"}], "."}]}], "Text"]},
   {"BlochPlotColors", "Automatic", 
    StyleBox[
     RowBox[{
      TagBox[
       StyleBox["BlochPlotColors", "Input",
        FontFamily->"Courier"],
       DisplayForm], " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      TagBox[
       StyleBox["BlochPlot", "Input",
        FontFamily->"Courier"],
       DisplayForm], " ", "and", " ", 
      RowBox[{
       TagBox[
        StyleBox["BlochPlot2D", "Input",
         FontFamily->"Courier"],
        DisplayForm], ".", " ", "It"}], " ", "specifies", " ", "the", " ", 
      "color", " ", "scheme", " ", "of", " ", "each", " ", "list", " ", "of", 
      " ", "density", " ", "matrices", " ", 
      RowBox[{"entered", "."}]}], "Text"]},
   {"BlochPlotEndPoints", "True", 
    StyleBox[
     RowBox[{
      TagBox[
       StyleBox["BlochPlotEndPoints", "Input",
        FontFamily->"Courier"],
       DisplayForm], " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      TagBox[
       StyleBox["BlochPlot", "Input",
        FontFamily->"Courier"],
       DisplayForm], " ", "which", " ", "specifies", " ", "whether", " ", 
      "or", " ", "not", " ", "end", " ", "points", " ", "of", " ", "a", " ", 
      "trajectory", " ", "should", " ", "be", " ", "differentiated", " ", 
      "from", " ", "intermediate", " ", 
      RowBox[{"points", "."}]}], "Text"]},
   {"AlignmentPoint", "Center", 
    StyleBox[
     RowBox[{
     "AlignmentPoint", " ", "is", " ", "an", " ", "option", " ", "which", " ",
       "specifies", " ", "how", " ", "objects", " ", "should", " ", "by", " ",
       "default", " ", "be", " ", "aligned", " ", "when", " ", "they", " ", 
      "appear", " ", "in", " ", 
      RowBox[{"Inset", "."}]}], "Text"]},
   {"AspectRatio", "Automatic", 
    StyleBox[
     RowBox[{
     "AspectRatio", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "Graphics", " ", "and", " ", "related", " ", "functions", " ", "that", 
      " ", "specifies", " ", "the", " ", "ratio", " ", "of", " ", "height", 
      " ", "to", " ", "width", " ", "for", " ", "a", " ", 
      RowBox[{"plot", ".", " "}]}], "Text"]},
   {"AutomaticImageSize", "False", 
    StyleBox[
     RowBox[{"No", " ", "description", " ", 
      RowBox[{"available", "."}]}], "Text"]},
   {"Axes", "False", 
    StyleBox[
     RowBox[{
     "Axes", " ", "is", " ", "an", " ", "option", " ", "for", " ", "graphics",
       " ", "functions", " ", "that", " ", "specifies", " ", "whether", " ", 
      "axes", " ", "should", " ", "be", " ", 
      RowBox[{"drawn", ".", " "}]}], "Text"]},
   {"AxesEdge", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "AxesEdge", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "three"}], "-", 
      RowBox[{
      "dimensional", " ", "graphics", " ", "functions", " ", "that", " ", 
       "specifies", " ", "on", " ", "which", " ", "edges", " ", "of", " ", 
       "the", " ", "bounding", " ", "box", " ", "axes", " ", "should", " ", 
       "be", " ", 
       RowBox[{"drawn", ".", " "}]}]}], "Text"]},
   {"AxesLabel", "None", 
    StyleBox[
     RowBox[{
     "AxesLabel", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "labels", " ", "for", " ", 
      RowBox[{"axes", ".", " "}]}], "Text"]},
   {"AxesOrigin", "Automatic", 
    StyleBox[
     RowBox[{
     "AxesOrigin", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "where", " ", "any", " ", "axes", " ", "drawn", " ", "should", " ", 
      RowBox[{"cross", ".", " "}]}], "Text"]},
   {"AxesStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "AxesStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", "how",
       " ", "axes", " ", "should", " ", "be", " ", 
      RowBox[{"rendered", ".", " "}]}], "Text"]},
   {"Background", "None", 
    StyleBox[
     RowBox[{
     "Background", " ", "is", " ", "an", " ", "option", " ", "that", " ", 
      "specifies", " ", "what", " ", "background", " ", "color", " ", "to", 
      " ", 
      RowBox[{"use", ".", " "}]}], "Text"]},
   {"BaselinePosition", "Automatic", 
    StyleBox[
     RowBox[{
     "BaselinePosition", " ", "is", " ", "an", " ", "option", " ", "that", 
      " ", "specifies", " ", "where", " ", "the", " ", "baseline", " ", "of", 
      " ", "an", " ", "object", " ", "is", " ", "considered", " ", "to", " ", 
      "be", " ", "for", " ", "purposes", " ", "of", " ", "alignment", " ", 
      "with", " ", "surrounding", " ", "text", " ", "or", " ", "other", " ", 
      RowBox[{"expressions", ".", " "}]}], "Text"]},
   {"BaseStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "BaseStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "formatting", " ", "and", " ", "related", " ", "constructs", " ", 
      "that", " ", "specifies", " ", "the", " ", "base", " ", "style", " ", 
      "to", " ", "use", " ", "for", " ", 
      RowBox[{"them", ".", " "}]}], "Text"]},
   {"Boxed", "True", 
    StyleBox[
     RowBox[{
      RowBox[{
      "Boxed", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Graphics3D", " ", "that", " ", "specifies", " ", "whether", " ", "to",
        " ", "draw", " ", "the", " ", "edges", " ", "of", " ", "the", " ", 
       "bounding", " ", "box", " ", "in", " ", "a", " ", "three"}], 
      "\[Hyphen]", 
      RowBox[{"dimensional", " ", 
       RowBox[{"picture", ".", " "}]}]}], "Text"]},
   {"BoxRatios", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "BoxRatios", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Graphics3D", " ", "that", " ", "gives", " ", "the", " ", "ratios", 
       " ", "of", " ", "side", " ", "lengths", " ", "for", " ", "the", " ", 
       "bounding", " ", "box", " ", "of", " ", "the", " ", "three"}], 
      "\[Hyphen]", 
      RowBox[{"dimensional", " ", 
       RowBox[{"picture", ".", " "}]}]}], "Text"]},
   {"BoxStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
      RowBox[{
      "BoxStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "three"}], "-", 
      RowBox[{
      "dimensional", " ", "graphics", " ", "functions", " ", "that", " ", 
       "specifies", " ", "how", " ", "the", " ", "bounding", " ", "box", " ", 
       "should", " ", "be", " ", 
       RowBox[{"rendered", ".", " "}]}]}], "Text"]},
   {"ClipPlanes", "None", 
    StyleBox[
     RowBox[{
     "ClipPlanes", " ", "is", " ", "an", " ", "option", " ", "to", " ", 
      "Graphics3D", " ", "that", " ", "specifies", " ", "a", " ", "list", " ",
       "of", " ", "clipping", " ", "planes", " ", "that", " ", "can", " ", 
      "cut", " ", "away", " ", "portions", " ", "of", " ", "a", " ", "3", "D",
       " ", "scene", " ", "from", " ", "the", " ", "resulting", " ", 
      RowBox[{"view", "."}]}], "Text"]},
   {"ClipPlanesStyle", "Automatic", 
    StyleBox[
     RowBox[{
     "ClipPlanesStyle", " ", "is", " ", "an", " ", "option", " ", "to", " ", 
      "Graphics3D", " ", "that", " ", "specifies", " ", "how", " ", 
      "clipping", " ", "planes", " ", "defined", " ", "with", " ", "the", " ",
       "ClipPlanes", " ", "option", " ", "should", " ", "be", " ", 
      RowBox[{"rendered", "."}]}], "Text"]},
   {"ColorOutput", "Automatic", 
    StyleBox[
     RowBox[{
     "ColorOutput", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", "the",
       " ", "type", " ", "of", " ", "color", " ", "output", " ", "to", " ", 
      RowBox[{"produce", ".", " "}]}], "Text"]},
   {"ContentSelectable", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "ContentSelectable", " ", "is", " ", "an", " ", "option", " ", "to", 
       " ", "constructs", " ", "such", " ", "as", " ", "Inset"}], ",", " ", 
      "Graphics", ",", " ", 
      RowBox[{
      "and", " ", "GraphicsGroup", " ", "that", " ", "specifies", " ", 
       "whether", " ", "and", " ", "how", " ", "content", " ", "within", " ", 
       "them", " ", "should", " ", "be", " ", 
       RowBox[{"selectable", ".", " "}]}]}], "Text"]},
   {"ControllerLinking", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "ControllerLinking", " ", "is", " ", "an", " ", "option", " ", "for", 
       " ", "Manipulate"}], ",", " ", "Graphics3D", ",", " ", "Plot3D", ",", 
      " ", 
      RowBox[{
      "and", " ", "related", " ", "functions", " ", "that", " ", "specifies", 
       " ", "whether", " ", "to", " ", "allow", " ", "interactive", " ", 
       "control", " ", "by", " ", "external", " ", 
       RowBox[{"controllers", "."}]}]}], "Text"]},
   {"ControllerMethod", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "ControllerMethod", " ", "is", " ", "an", " ", "option", " ", "for", 
       " ", "Manipulate"}], ",", " ", "Graphics3D", ",", " ", "Plot3D", ",", 
      " ", 
      RowBox[{
      "and", " ", "related", " ", "functions", " ", "that", " ", "specifies", 
       " ", "the", " ", "default", " ", "way", " ", "that", " ", "controls", 
       " ", "on", " ", "an", " ", "external", " ", "controller", " ", 
       "device", " ", "should", " ", 
       RowBox[{"apply", "."}]}]}], "Text"]},
   {"ControllerPath", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "ControllerPath", " ", "is", " ", "an", " ", "option", " ", "that", " ",
        "gives", " ", "a", " ", "list", " ", "of", " ", "external", " ", 
       "controllers", " ", "or", " ", "classes", " ", "of", " ", 
       "controllers", " ", "to", " ", "try", " ", "for", " ", "functions", 
       " ", "such", " ", "as", " ", "ControllerState"}], ",", " ", 
      "Manipulate", ",", " ", 
      RowBox[{"and", " ", 
       RowBox[{"Graphics3D", "."}]}]}], "Text"]},
   {"CoordinatesToolOptions", "Automatic", 
    StyleBox[
     RowBox[{
     "CoordinatesToolOptions", " ", "is", " ", "an", " ", "option", " ", 
      "for", " ", "Graphics", " ", "that", " ", "gives", " ", "values", " ", 
      "of", " ", "options", " ", "associated", " ", "with", " ", "the", " ", 
      StyleBox[
       RowBox[{"Get", " ", "Coordinates"}], "MenuName"], " ", 
      RowBox[{"tool", "."}]}], "Text"]},
   {"DisplayFunction", "Identity", 
    StyleBox[
     RowBox[{
     "DisplayFunction", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "and", " ", "sound", " ", "functions", " ", "that", 
      " ", "specifies", " ", "a", " ", "function", " ", "to", " ", "apply", 
      " ", "to", " ", "graphics", " ", "and", " ", "sound", " ", "objects", 
      " ", "before", " ", "returning", " ", 
      RowBox[{"them", "."}]}], "Text"]},
   {"Epilog", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "Epilog", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "gives", " ", "a", " ", 
      "list", " ", "of", " ", "graphics", " ", "primitives", " ", "to", " ", 
      "be", " ", "rendered", " ", "after", " ", "the", " ", "main", " ", 
      "part", " ", "of", " ", "the", " ", "graphics", " ", "is", " ", 
      RowBox[{"rendered", ".", " "}]}], "Text"]},
   {"FaceGrids", "None", 
    StyleBox[
     RowBox[{
      RowBox[{
      "FaceGrids", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "three"}], "-", 
      RowBox[{
      "dimensional", " ", "graphics", " ", "functions", " ", "that", " ", 
       "specifies", " ", "grid", " ", "lines", " ", "to", " ", "draw", " ", 
       "on", " ", "the", " ", "faces", " ", "of", " ", "the", " ", "bounding",
        " ", 
       RowBox[{"box", ".", " "}]}]}], "Text"]},
   {"FaceGridsStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "FaceGridsStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "3", "D", " ", "graphics", " ", "functions", " ", "that", " ", 
      "specifies", " ", "how", " ", "face", " ", "grids", " ", "should", " ", 
      "be", " ", 
      RowBox[{"rendered", "."}]}], "Text"]},
   {"FormatType", "TraditionalForm", 
    StyleBox[
     RowBox[{
      RowBox[{
      "FormatType", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "output", " ", "streams"}], ",", " ", "graphics", ",", " ", 
      RowBox[{
      "and", " ", "functions", " ", "such", " ", "as", " ", "Text", " ", 
       "that", " ", "specifies", " ", "the", " ", "default", " ", "format", 
       " ", "type", " ", "to", " ", "use", " ", "when", " ", "outputting", 
       " ", 
       RowBox[{"expressions", ".", " "}]}]}], "Text"]},
   {"ImageMargins", "0.`", 
    StyleBox[
     RowBox[{
     "ImageMargins", " ", "is", " ", "an", " ", "option", " ", "that", " ", 
      "specifies", " ", "the", " ", "absolute", " ", "margins", " ", "to", 
      " ", "leave", " ", "around", " ", "the", " ", "image", " ", "displayed",
       " ", "for", " ", "an", " ", 
      RowBox[{"object", ".", " "}]}], "Text"]},
   {"ImagePadding", "All", 
    StyleBox[
     RowBox[{
     "ImagePadding", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "what", " ", "absolute", " ", "extra", " ", "padding", " ", "should", 
      " ", "be", " ", "left", " ", "for", " ", "extended", " ", "objects", 
      " ", "such", " ", "as", " ", "thick", " ", "lines", " ", "and", " ", 
      "annotations", " ", "such", " ", "as", " ", "tick", " ", "and", " ", 
      "axis", " ", 
      RowBox[{"labels", "."}]}], "Text"]},
   {"ImageSize", "Automatic", 
    StyleBox[
     RowBox[{
     "ImageSize", " ", "is", " ", "an", " ", "option", " ", "that", " ", 
      "specifies", " ", "the", " ", "overall", " ", "size", " ", "of", " ", 
      "an", " ", "image", " ", "to", " ", "display", " ", "for", " ", "an", 
      " ", 
      RowBox[{"object", ".", " "}]}], "Text"]},
   {"ImageSizeRaw", "Automatic", 
    StyleBox[
     RowBox[{"No", " ", "description", " ", 
      RowBox[{"available", "."}]}], "Text"]},
   {"LabelStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
      RowBox[{
      "LabelStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "formatting", " ", "and", " ", "related", " ", "constructs", " ", 
       "that", " ", "specifies", " ", "the", " ", "style", " ", "to", " ", 
       "use", " ", "in", " ", "displaying", " ", "their", " ", "label"}], "-", 
      RowBox[{"like", " ", 
       RowBox[{"elements", ".", " "}]}]}], "Text"]},
   {"Lighting", "Automatic", 
    StyleBox[
     RowBox[{
     "Lighting", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "Graphics3D", " ", "and", " ", "related", " ", "functions", " ", "that",
       " ", "specifies", " ", "what", " ", "simulated", " ", "lighting", " ", 
      "to", " ", "use", " ", "in", " ", "coloring", " ", "3", "D", " ", 
      RowBox[{"surfaces", ".", " "}]}], "Text"]},
   {"Method", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "Method", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "various", " ", "algorithm"}], "-", 
      RowBox[{
      "intensive", " ", "functions", " ", "that", " ", "specifies", " ", 
       "what", " ", "internal", " ", "methods", " ", "they", " ", "should", 
       " ", 
       RowBox[{"use", "."}]}]}], "Text"]},
   {"PlotLabel", "None", 
    StyleBox[
     RowBox[{
     "PlotLabel", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", "an", 
      " ", "overall", " ", "label", " ", "for", " ", "a", " ", 
      RowBox[{"plot", ".", " "}]}], "Text"]},
   {"PlotRange", "All", 
    StyleBox[
     RowBox[{
     "PlotRange", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "what", " ", "range", " ", "of", " ", "coordinates", " ", "to", " ", 
      "include", " ", "in", " ", "a", " ", 
      RowBox[{"plot", ".", " "}]}], "Text"]},
   {"PlotRangePadding", "Automatic", 
    StyleBox[
     RowBox[{
     "PlotRangePadding", " ", "is", " ", "an", " ", "option", " ", "for", " ",
       "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "how", " ", "much", " ", "further", " ", "axes", " ", 
      RowBox[{"etc", ".", " ", "should"}], " ", "extend", " ", "beyond", " ", 
      "the", " ", "range", " ", "of", " ", "coordinates", " ", "specified", 
      " ", "by", " ", 
      RowBox[{"PlotRange", ".", " "}]}], "Text"]},
   {"PlotRegion", "Automatic", 
    StyleBox[
     RowBox[{
     "PlotRegion", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "what", " ", "region", " ", "of", " ", "the", " ", "final", " ", 
      "display", " ", "area", " ", "a", " ", "plot", " ", "should", " ", 
      RowBox[{"fill", ".", " "}]}], "Text"]},
   {"PreserveImageOptions", "Automatic", 
    StyleBox[
     RowBox[{
     "PreserveImageOptions", " ", "is", " ", "an", " ", "option", " ", "to", 
      " ", "graphics", " ", "and", " ", "related", " ", "functions", " ", 
      "that", " ", "specifies", " ", "whether", " ", "image", " ", "size", 
      " ", "and", " ", "certain", " ", "other", " ", "options", " ", "should",
       " ", "be", " ", "preserved", " ", "from", " ", "the", " ", "previous", 
      " ", "version", " ", "of", " ", "a", " ", "graphic", " ", "if", " ", 
      "the", " ", "graphic", " ", "is", " ", "replaced", " ", "by", " ", "a", 
      " ", "new", " ", "one", " ", "in", " ", 
      RowBox[{"output", "."}]}], "Text"]},
   {"Prolog", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "Prolog", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "which", " ", "gives", " ", "a", " ",
       "list", " ", "of", " ", "graphics", " ", "primitives", " ", "to", " ", 
      "be", " ", "rendered", " ", "before", " ", "the", " ", "main", " ", 
      "part", " ", "of", " ", "the", " ", "graphics", " ", "is", " ", 
      RowBox[{"rendered", ".", " "}]}], "Text"]},
   {"RotationAction", "\"\<Fit\>\"", 
    StyleBox[
     RowBox[{
      RowBox[{
      "RotationAction", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "three"}], "-", 
      RowBox[{
      "dimensional", " ", "graphics", " ", "functions", " ", "that", " ", 
       "specifies", " ", "how", " ", "to", " ", "render", " ", "3", "D", " ", 
       "objects", " ", "when", " ", "they", " ", "are", " ", "interactively", 
       " ", 
       RowBox[{"rotated", "."}]}]}], "Text"]},
   {"SphericalRegion", "False", 
    StyleBox[
     RowBox[{
      RowBox[{
       RowBox[{
       "SphericalRegion", " ", "is", " ", "an", " ", "option", " ", "for", 
        " ", "three"}], "-", 
       RowBox[{
       "dimensional", " ", "graphics", " ", "functions", " ", "that", " ", 
        "specifies", " ", "whether", " ", "the", " ", "final", " ", "image", 
        " ", "should", " ", "be", " ", "scaled", " ", "so", " ", "that", " ", 
        "a", " ", "sphere", " ", "drawn", " ", "around", " ", "the", " ", 
        "three"}]}], "\[Hyphen]", 
      RowBox[{
      "dimensional", " ", "bounding", " ", "box", " ", "would", " ", "fit", 
       " ", "in", " ", "the", " ", "display", " ", "area", " ", 
       RowBox[{"specified", ".", " "}]}]}], "Text"]},
   {"Ticks", "Automatic", 
    StyleBox[
     RowBox[{
     "Ticks", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "tick", " ", "marks", " ", "for", " ", 
      RowBox[{"axes", ".", " "}]}], "Text"]},
   {"TicksStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "TicksStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "which", " ", "specifies", " ", 
      "how", " ", "ticks", " ", "should", " ", "be", " ", 
      RowBox[{"rendered", "."}]}], "Text"]},
   {"TouchscreenAutoZoom", "False", 
    StyleBox[
     RowBox[{
      RowBox[{
      "TouchscreenAutoZoom", " ", "is", " ", "an", " ", "option", " ", "for", 
       " ", "Manipulate", " ", "and", " ", "Graphics3D", " ", "that", " ", 
       "determines", " ", "whether", " ", "the", " ", "interface", " ", 
       "zooms", " ", "to", " ", "full"}], "-", 
      RowBox[{
      "screen", " ", "when", " ", "it", " ", "is", " ", "activated", " ", 
       "by", " ", "touching", " ", "it", " ", "on", " ", "supported", " ", 
       "touch", " ", "screen", " ", 
       RowBox[{"platforms", "."}]}]}], "Text"]},
   {"ViewCenter", "Automatic", 
    StyleBox[
     RowBox[{
     "ViewCenter", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "Graphics3D", " ", "and", " ", "related", " ", "functions", " ", 
      "which", " ", "gives", " ", "the", " ", "scaled", " ", "coordinates", 
      " ", "of", " ", "the", " ", "point", " ", "which", " ", "should", " ", 
      "appear", " ", "at", " ", "the", " ", "center", " ", "of", " ", "the", 
      " ", "final", " ", 
      RowBox[{"image", ".", " "}]}], "Text"]},
   {"ViewMatrix", "Automatic", 
    StyleBox[
     RowBox[{
     "ViewMatrix", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "Graphics3D", " ", "and", " ", "related", " ", "functions", " ", "that",
       " ", "can", " ", "be", " ", "used", " ", "to", " ", "specify", " ", 
      "a", " ", "pair", " ", "of", " ", "explicit", " ", "homogeneous", " ", 
      "transformation", " ", "and", " ", "projection", " ", "matrices", " ", 
      "for", " ", "3", "D", " ", 
      RowBox[{"coordinates", "."}]}], "Text"]},
   {"ViewPoint", 
    RowBox[{"{", 
     RowBox[{"1.3`", ",", 
      RowBox[{"-", "2.4`"}], ",", "2.`"}], "}"}], 
    StyleBox[
     RowBox[{
      RowBox[{
      "ViewPoint", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Graphics3D", " ", "and", " ", "related", " ", "functions", " ", 
       "which", " ", "gives", " ", "the", " ", "point", " ", "in", " ", 
       "space", " ", "from", " ", "which", " ", "three"}], "\[Hyphen]", 
      RowBox[{
      "dimensional", " ", "objects", " ", "are", " ", "to", " ", "be", " ", 
       RowBox[{"viewed", ".", " "}]}]}], "Text"]},
   {"ViewRange", "All", 
    StyleBox[
     RowBox[{
      RowBox[{
      "ViewRange", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Graphics3D", " ", "and", " ", "related", " ", "functions", " ", 
       "which", " ", "specifies", " ", "the", " ", "range", " ", "of", " ", 
       "distances", " ", "from", " ", "the", " ", "view", " ", "point", " ", 
       "to", " ", "be", " ", "included", " ", "in", " ", "displaying", " ", 
       "a", " ", "three"}], "-", 
      RowBox[{"dimensional", " ", 
       RowBox[{"scene", ".", " "}]}]}], "Text"]},
   {"ViewVector", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "ViewVector", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Graphics3D", " ", "and", " ", "related", " ", "functions", " ", 
       "which", " ", "specifies", " ", "the", " ", "position", " ", "and", 
       " ", "direction", " ", "of", " ", "a", " ", "simulated", " ", "camera",
        " ", "used", " ", "to", " ", "view", " ", "three"}], "-", 
      RowBox[{"dimensional", " ", 
       RowBox[{"objects", ".", " "}]}]}], "Text"]},
   {"ViewVertical", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1"}], "}"}], 
    StyleBox[
     RowBox[{
     "ViewVertical", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "Graphics3D", " ", "and", " ", "related", " ", "functions", " ", 
      "which", " ", "specifies", " ", "what", " ", "direction", " ", "in", 
      " ", "scaled", " ", "coordinates", " ", "should", " ", "be", " ", 
      "vertical", " ", "in", " ", "the", " ", "final", " ", 
      RowBox[{"image", ".", " "}]}], "Text"]},
   {"BoundaryStyle", "None", 
    StyleBox[
     RowBox[{
     "BoundaryStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "functions", " ", "that", " ", "specifies", " ", "the",
       " ", "style", " ", "in", " ", "which", " ", "boundaries", " ", "of", 
      " ", "regions", " ", "should", " ", "be", " ", 
      RowBox[{"drawn", ".", " "}]}], "Text"]},
   {"ColorFunction", "Automatic", 
    StyleBox[
     RowBox[{
     "ColorFunction", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", "a", 
      " ", "function", " ", "to", " ", "apply", " ", "to", " ", "determine", 
      " ", "colors", " ", "of", " ", 
      RowBox[{"elements", ".", " "}]}], "Text"]},
   {"ColorFunctionScaling", "True", 
    StyleBox[
     RowBox[{
     "ColorFunctionScaling", " ", "is", " ", "an", " ", "option", " ", "for", 
      " ", "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "whether", " ", "arguments", " ", "supplied", " ", "to", " ", "a", " ", 
      "color", " ", "function", " ", "should", " ", "be", " ", "scaled", " ", 
      "to", " ", "lie", " ", "between", " ", "0", " ", "and", " ", "1.", 
      " "}], "Text"]},
   {"Evaluated", "Automatic", 
    StyleBox[
     RowBox[{"No", " ", "description", " ", 
      RowBox[{"available", "."}]}], "Text"]},
   {"EvaluationMonitor", "None", 
    StyleBox[
     RowBox[{
     "EvaluationMonitor", " ", "is", " ", "an", " ", "option", " ", "for", 
      " ", "various", " ", "numerical", " ", "computation", " ", "and", " ", 
      "plotting", " ", "functions", " ", "that", " ", "gives", " ", "an", " ",
       "expression", " ", "to", " ", "evaluate", " ", "whenever", " ", 
      "functions", " ", "derived", " ", "from", " ", "the", " ", "input", " ",
       "are", " ", "evaluated", " ", 
      RowBox[{"numerically", ".", " "}]}], "Text"]},
   {"Exclusions", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "Exclusions", " ", "is", " ", "an", " ", "option", " ", "that", " ", 
       "specifies", " ", "where", " ", "to", " ", "exclude", " ", "in", " ", 
       "regions", " ", "used", " ", "by", " ", "functions", " ", "like", " ", 
       "Plot"}], ",", " ", "Plot3D", ",", " ", 
      RowBox[{"and", " ", 
       RowBox[{"NIntegrate", "."}]}]}], "Text"]},
   {"ExclusionsStyle", "None", 
    StyleBox[
     RowBox[{
     "ExclusionsStyle", " ", "is", " ", "an", " ", "option", " ", "to", " ", 
      "plotting", " ", "functions", " ", "that", " ", "specifies", " ", "how",
       " ", "to", " ", "render", " ", "subregions", " ", "excluded", " ", 
      "according", " ", "to", " ", 
      RowBox[{"Exclusions", ".", " "}]}], "Text"]},
   {"MaxRecursion", "Automatic", 
    StyleBox[
     RowBox[{
     "MaxRecursion", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "functions", " ", "like", " ", "NIntegrate", " ", "and", " ", "Plot", 
      " ", "that", " ", "specifies", " ", "how", " ", "many", " ", 
      "recursive", " ", "subdivisions", " ", "can", " ", "be", " ", 
      RowBox[{"made", ".", " "}]}], "Text"]},
   {"Mesh", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "Mesh", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Plot3D"}], ",", " ", "DensityPlot", ",", " ", 
      RowBox[{
      "and", " ", "other", " ", "plotting", " ", "functions", " ", "that", 
       " ", "specifies", " ", "what", " ", "mesh", " ", "should", " ", "be", 
       " ", 
       RowBox[{"drawn", ".", " "}]}]}], "Text"]},
   {"MeshFunctions", "Automatic", 
    StyleBox[
     RowBox[{
     "MeshFunctions", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "functions", " ", "that", " ", "specifies", " ", 
      "functions", " ", "to", " ", "use", " ", "to", " ", "determine", " ", 
      "the", " ", "placement", " ", "of", " ", "mesh", " ", 
      RowBox[{"divisions", ".", " "}]}], "Text"]},
   {"MeshShading", "None", 
    StyleBox[
     RowBox[{
     "MeshShading", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "functions", " ", "that", " ", "gives", " ", "lists", 
      " ", "of", " ", "colors", " ", "to", " ", "use", " ", "for", " ", 
      "regions", " ", "between", " ", "mesh", " ", 
      RowBox[{"divisions", ".", " "}]}], "Text"]},
   {"MeshStyle", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "MeshStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Plot3D"}], ",", " ", "DensityPlot", ",", " ", 
      RowBox[{
      "and", " ", "other", " ", "plotting", " ", "functions", " ", "that", 
       " ", "specifies", " ", "the", " ", "style", " ", "in", " ", "which", 
       " ", "to", " ", "draw", " ", "a", " ", 
       RowBox[{"mesh", ".", " "}]}]}], "Text"]},
   {"NormalsFunction", "Automatic", 
    StyleBox[
     RowBox[{
     "NormalsFunction", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "Plot3D", " ", "and", " ", "related", " ", "functions", " ", "that", 
      " ", "specifies", " ", "a", " ", "function", " ", "to", " ", "apply", 
      " ", "to", " ", "determine", " ", "the", " ", "effective", " ", 
      "surface", " ", "normals", " ", "at", " ", "every", " ", 
      RowBox[{"point", "."}]}], "Text"]},
   {"PerformanceGoal", "\"\<Quality\>\"", 
    StyleBox[
     RowBox[{
     "PerformanceGoal", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "and", " ", "various", " ", "other", " ", 
      "algorithmic", " ", "functions", " ", "that", " ", "specifies", " ", 
      "what", " ", "aspect", " ", "of", " ", "performance", " ", "to", " ", 
      "try", " ", "to", " ", "optimize", " ", "with", " ", "Automatic", " ", 
      "settings", " ", "for", " ", 
      RowBox[{"options", "."}]}], "Text"]},
   {"PlotLegends", "None", 
    StyleBox[
     RowBox[{
     "PlotLegends", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plot", " ", "functions", " ", "that", " ", "specifies", " ", "what", 
      " ", "legends", " ", "to", " ", 
      RowBox[{"use", ".", " "}]}], "Text"]},
   {"PlotPoints", "Automatic", 
    StyleBox[
     RowBox[{
     "PlotPoints", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "functions", " ", "that", " ", "specifies", " ", "how",
       " ", "many", " ", "initial", " ", "sample", " ", "points", " ", "to", 
      " ", 
      RowBox[{"use", ".", " "}]}], "Text"]},
   {"PlotStyle", "Automatic", 
    StyleBox[
     RowBox[{
     "PlotStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "and", " ", "related", " ", "functions", " ", "that", 
      " ", "specifies", " ", "styles", " ", "in", " ", "which", " ", 
      "objects", " ", "are", " ", "to", " ", "be", " ", 
      RowBox[{"drawn", ".", " "}]}], "Text"]},
   {"PlotTheme", "Automatic", 
    StyleBox[
     RowBox[{
     "PlotTheme", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "and", " ", "related", " ", "functions", " ", "that", 
      " ", "specifies", " ", "an", " ", "overall", " ", "theme", " ", "for", 
      " ", "visualization", " ", "elements", " ", "and", " ", 
      RowBox[{"styles", ".", " "}]}], "Text"]},
   {"RegionFunction", 
    RowBox[{"True", "&"}], 
    StyleBox[
     RowBox[{
     "RegionFunction", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "functions", " ", "that", " ", "specifies", " ", "the",
       " ", "region", " ", "to", " ", "include", " ", "in", " ", "the", " ", 
      "plot", " ", 
      RowBox[{"drawn", ".", " "}]}], "Text"]},
   {"TargetUnits", "Automatic", 
    StyleBox[
     RowBox[{
     "TargetUnits", " ", "is", " ", "an", " ", "option", " ", "used", " ", 
      "to", " ", "specify", " ", "the", " ", "desired", " ", "output", " ", 
      "units", " ", "for", " ", "visualization", " ", "functions", " ", 
      "operating", " ", "on", " ", "Quantity", " ", 
      RowBox[{"expressions", "."}]}], "Text"]},
   {"TextureCoordinateFunction", "Automatic", 
    StyleBox[
     RowBox[{
     "TextureCoordinateFunction", " ", "is", " ", "an", " ", "option", " ", 
      "to", " ", "Plot3D", " ", "and", " ", "similar", " ", "functions", " ", 
      "that", " ", "specifies", " ", "a", " ", "function", " ", "that", " ", 
      "computes", " ", "texture", " ", 
      RowBox[{"coordinates", "."}]}], "Text"]},
   {"TextureCoordinateScaling", "Automatic", 
    StyleBox[
     RowBox[{
     "TextureCoordinateScaling", " ", "is", " ", "an", " ", "option", " ", 
      "to", " ", "Plot3D", " ", "and", " ", "similar", " ", "functions", " ", 
      "that", " ", "specifies", " ", "whether", " ", "arguments", " ", 
      "supplied", " ", "to", " ", "a", " ", "texture", " ", "coordinate", " ",
       "function", " ", "should", " ", "be", " ", "scaled", " ", "to", " ", 
      "lie", " ", "between", " ", "0", " ", "and", " ", "1."}], "Text"]},
   {"WorkingPrecision", "MachinePrecision", 
    StyleBox[
     RowBox[{
     "WorkingPrecision", " ", "is", " ", "an", " ", "option", " ", "for", " ",
       "various", " ", "numerical", " ", "operations", " ", "that", " ", 
      "specifies", " ", "how", " ", "many", " ", "digits", " ", "of", " ", 
      "precision", " ", "should", " ", "be", " ", "maintained", " ", "in", 
      " ", "internal", " ", 
      RowBox[{"computations", ".", " "}]}], "Text"]},
   {"InterpolationOrder", "3", 
    StyleBox[
     RowBox[{
      RowBox[{
      "InterpolationOrder", " ", "is", " ", "an", " ", "option", " ", "for", 
       " ", "Interpolation"}], ",", " ", 
      RowBox[{"as", " ", "well", " ", "as", " ", "ListLinePlot"}], ",", " ", 
      "ListPlot3D", ",", " ", "ListContourPlot", ",", " ", 
      RowBox[{"and", " ", "related", " ", "functions"}], ",", " ", 
      RowBox[{
      "that", " ", "specifies", " ", "what", " ", "order", " ", "of", " ", 
       "interpolation", " ", "to", " ", 
       RowBox[{"use", "."}]}]}], "Text"]},
   {"PeriodicInterpolation", "False", 
    StyleBox[
     RowBox[{"No", " ", "description", " ", 
      RowBox[{"available", "."}]}], "Text"]}
  },
  GridBoxAlignment->{"Columns" -> {{Left}}},
  GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{True}}},
  GridBoxItemSize->{"Columns" -> {Automatic, Automatic, {
       Scaled[0.5]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
    "RowsIndexed" -> {}}]], "Text",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{3.635178011264412*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example 1", "Subsubsection",
 CellChangeTimes->{{3.6351764182236433`*^9, 3.635176419351556*^9}}],

Cell["\<\
Plot a single pure state on the Bloch sphere. Trajectories with only one \
state get a line to the origin.\
\>", "Text",
 CellChangeTimes->{{3.635176430335647*^9, 3.6351764398234053`*^9}, {
  3.635181541311928*^9, 3.635181559710485*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BlochPlot", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Sqrt", "[", 
     RowBox[{"I", " ", 
      RowBox[{"2", "/", "3"}]}], "]"}], ",", 
    RowBox[{"Sqrt", "[", 
     RowBox[{"1", "/", "3"}], "]"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.63517611120321*^9, 3.6351761328737583`*^9}, {
   3.6351762509929457`*^9, 3.635176255231739*^9}, {3.635176348689199*^9, 
   3.6351763677295847`*^9}, 3.635176415501597*^9}],

Cell[BoxData[
 Graphics3DBox[{{{
     {Opacity[0.2], SphereBox[{0, 0, 0}, 1]}, 
     {GrayLevel[0], Thickness[Large], Opacity[0.5], 
      Line3DBox[{{0, 1, 0}, {0, -1, 0}}], Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
      Line3DBox[{{1, 0, 0}, {-1, 0, 0}}]}, 
     {GrayLevel[0], Thickness[Large], Opacity[1], Text3DBox[
       StyleBox["\<\"|+Z\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {0, 0, 1.15}], Text3DBox[
       StyleBox["\<\"|-Z\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {0, 0, -1.15}], Text3DBox[
       StyleBox["\<\"|+X\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {1.15, 0, 0}], Text3DBox[
       StyleBox["\<\"|-X\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {-1.15, 0, 0}], Text3DBox[
       StyleBox["\<\"|+Y\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {0, 1.15, 0}], Text3DBox[
       StyleBox["\<\"|-Y\[RightAngleBracket]\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold,
        FontColor->GrayLevel[0.3]], {0, -1.15, 0}]}}, {{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
      Dashing[{Small, Small}], Line3DBox[CompressedData["
1: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
aZ3nLndR/f//7+xmU6H/fWev/J//H/XtZOI=
       "]]}}, {{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
      Dashing[{Small, Small}], Line3DBox[CompressedData["
1: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
d3iqKYHXvWC4xC1pTYIb3/oU+Wjvc8gSLvdoF8EFmFksBldCoOjDalIb4bt0
T2dqCs2GQb4e0ucTBK8I1z70pCES0h6el0ol7BPzROacIb94SOUr7pYkuIDg
u0Bzh0So/9VnMYewD2/N69mtvEmC7TnVZlGvkSvfk4mwTE2BL4es3bkI+7za
p9ldyCMDKkrHmicTzp17f7+E05k8KMcSqBhHOKcemw53x9XyYXWumERwPPKQ
xdfTqZIUuDafqK0XSzgX2ur+P2UKoJyH5cjTl8j/3eVkd1frDXyqJmJACkTu
43J38rh7CUzakp5ZY0V4rrbo50E9EO5oZX+caoH8npQHeUWqEiaS3MwdzZCr
Qv2eZLtKqJw23sxqinxiZthsZrUSVh20D602QJ62AFKV6avg4rhgTNBF5PlT
O/h+ctdA+dzheT8eQtzItdWkl6uH098fxXpzI38RfehP+ON6GPU+MMtpF3Ja
40Du/qJ6uOecyoLmdkKc7+74Jiz1Gb6YE5eK3kR5ROD2UvSYcAMU8iyXrB5D
fkhwsu4QRxN0+HOD2YKQ724LHy15PNAKWzaupwJ+5O1CGTf0Cr/A0V9OF1q8
UR7fZKK/NvmiF167+ieK9wnK+yf47ZPLzIbhs3FezR4hVCdcvV/sruozBvfR
n5Y/K43qCoZrTq9Vnk/CIjPx+ny+Edz/atJKid2Yhh1eYTmHk1DdMmG+Q22O
bg7W1sbaTq+hOqfALdTHpngecoiPNoX2I0+pqWjo+jAP9z1g+3qsEvkM63yr
/Md5OGubRH/PG3kf93ae6cZ5uPkmNDOUA7mmN7MzdWge5uZduU87+BX3S27W
NrEsVCjE8lZmx4UO3Od+rwXY61Jh2ohSRM0GqvdktzPLzn3H3m/dMauyMuQr
46oj9T1UKLd5hi3HCbm2ullx3AAVOs1cG7FbQfUkY/NQp/gEFU5/7mZPnm/A
nZ4rebh7GVvP5PH1kJ563OPmD4mFctJgE9nbSDG/BuWFeOnay8rYfvK4k3/F
EvmgeU4Z+zkarFeaEzYWR/7vywFYe4EGZToz2mxSUZ0sa/P3BI8GDR5k+nn2
ErkKxX8/kHD1Gg1GN72+v+FaiXu2cRbvPuy8PThD/ro9FNXzx0z/rpzwpUFB
Jr23v3ciZ6hzIlv402DLxRvhE+HoXuCuHRc8hdUHpyvFa1+Ti1He1LrY2xBE
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
       "]]}}, {{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
      Dashing[{Small, Small}], Line3DBox[CompressedData["
1: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
6j11u43q//9/Z7cYD//vO3vl/wHesGTi
       "]]}}}, {
    {RGBColor[0.742077, 0.0624857, 0.00605783], PointSize[0.035], 
     Point3DBox[
      NCache[{Rational[2, 3], Rational[-2, 3], Rational[1, 3]}, {
       0.6666666666666666, -0.6666666666666666, 0.3333333333333333}]]}, 
    {RGBColor[0.742077, 0.0624857, 0.00605783], Thickness[0.005], 
     Line3DBox[
      NCache[{{0, 0, 0}, {
        Rational[2, 3], Rational[-2, 3], Rational[1, 3]}}, {{0, 0, 0}, {
        0.6666666666666666, -0.6666666666666666, 0.3333333333333333}}]]}}},
  Boxed->False,
  ImageSize->{360., 360.},
  ViewAngle->0.34,
  ViewPoint->{1.0667878921991765`, -2.964173490528156, 1.2351676449403002`},
  ViewVertical->{0.0485142867008896, -0.25482988567427467`, 
   0.9657681364350039}]], "Output",
 CellChangeTimes->{
  3.6351761272991447`*^9, 3.635176255946416*^9, 3.635176301553005*^9, {
   3.63517633234734*^9, 3.635176368812689*^9}, 3.635176416286944*^9, 
   3.63517657260716*^9, 3.635178555484*^9, 3.635180892199061*^9, 
   3.635180952149301*^9, 3.635181308068437*^9, 3.635181391844307*^9, 
   3.635250064225058*^9, 3.6352500956297483`*^9, 3.6352501538141823`*^9}]
}, Open  ]],

Cell["\<\
A list of states is interpretted as a trajectory and gets the same color \
scheme.\
\>", "Text",
 CellChangeTimes->{{3.6351814185486813`*^9, 3.6351814870896473`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BlochPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Sqrt", "[", 
        RowBox[{"I", " ", 
         RowBox[{"2", "/", "3"}]}], "]"}], ",", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"1", "/", "3"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"BlochPlotLabels", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.635180984457572*^9, 3.6351810095476837`*^9}, 
   3.635181685226551*^9}],

Cell[BoxData[
 TemplateBox[{Graphics3DBox[{{{
       Opacity[0.2], 
       SphereBox[{0, 0, 0}, 1], 
       Opacity[0.5], 
       GrayLevel[0], 
       Thickness[Large], 
       Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
       Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
       Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], 
       Opacity[1], 
       GrayLevel[0], 
       Thickness[Large], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 0, 1.15}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 0, -1.15}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {1.15, 0, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {-1.15, 0, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 1.15, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, -1.15, 0}]}, {{{}, {}, {
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
aZ3nLndR/f//7+xmU6H/fWev/J//H/XtZOI=
          "]]}}}, {{{}, {}, {
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
d3iqKYHXvWC4xC1pTYIb3/oU+Wjvc8gSLvdoF8EFmFksBldCoOjDalIb4bt0
T2dqCs2GQb4e0ucTBK8I1z70pCES0h6el0ol7BPzROacIb94SOUr7pYkuIDg
u0Bzh0So/9VnMYewD2/N69mtvEmC7TnVZlGvkSvfk4mwTE2BL4es3bkI+7za
p9ldyCMDKkrHmicTzp17f7+E05k8KMcSqBhHOKcemw53x9XyYXWumERwPPKQ
xdfTqZIUuDafqK0XSzgX2ur+P2UKoJyH5cjTl8j/3eVkd1frDXyqJmJACkTu
43J38rh7CUzakp5ZY0V4rrbo50E9EO5oZX+caoH8npQHeUWqEiaS3MwdzZCr
Qv2eZLtKqJw23sxqinxiZthsZrUSVh20D602QJ62AFKV6avg4rhgTNBF5PlT
O/h+ctdA+dzheT8eQtzItdWkl6uH098fxXpzI38RfehP+ON6GPU+MMtpF3Ja
40Du/qJ6uOecyoLmdkKc7+74Jiz1Gb6YE5eK3kR5ROD2UvSYcAMU8iyXrB5D
fkhwsu4QRxN0+HOD2YKQ724LHy15PNAKWzaupwJ+5O1CGTf0Cr/A0V9OF1q8
UR7fZKK/NvmiF167+ieK9wnK+yf47ZPLzIbhs3FezR4hVCdcvV/sruozBvfR
n5Y/K43qCoZrTq9Vnk/CIjPx+ny+Edz/atJKid2Yhh1eYTmHk1DdMmG+Q22O
bg7W1sbaTq+hOqfALdTHpngecoiPNoX2I0+pqWjo+jAP9z1g+3qsEvkM63yr
/Md5OGubRH/PG3kf93ae6cZ5uPkmNDOUA7mmN7MzdWge5uZduU87+BX3S27W
NrEsVCjE8lZmx4UO3Od+rwXY61Jh2ohSRM0GqvdktzPLzn3H3m/dMauyMuQr
46oj9T1UKLd5hi3HCbm2ullx3AAVOs1cG7FbQfUkY/NQp/gEFU5/7mZPnm/A
nZ4rebh7GVvP5PH1kJ563OPmD4mFctJgE9nbSDG/BuWFeOnay8rYfvK4k3/F
EvmgeU4Z+zkarFeaEzYWR/7vywFYe4EGZToz2mxSUZ0sa/P3BI8GDR5k+nn2
ErkKxX8/kHD1Gg1GN72+v+FaiXu2cRbvPuy8PThD/ro9FNXzx0z/rpzwpUFB
Jr23v3ciZ6hzIlv402DLxRvhE+HoXuCuHRc8hdUHpyvFa1+Ti1He1LrY2xBE
g0Js1bYzCUUoHp7UHjsaToP+EdMeT3PQPcV2QN3SI44G7dqU/vAfQR62LXSf
PxanjIU9eqwN0X2nz7pm1BeLax0Cv69/NEX3puseWz5ZYXWGVli7DKddJu6/
7K5W96TSYKu8R9Vzf3Qvc0jb9kgOi78WZ1WY7j5Pwp3yqrHkI+Z6P4HOY8FE
VM9kP9qtgsVx+TFJ9iJxdB9cdVjcKYnVASsBKm6XpND9kbo7sCgc88Bso4zv
J8i4J14Jt17GXKMnjHMEhOMusjdMLAHLK5zpZC2j8+h+uix/Q2wS89sXuZ4V
RQbj/uSMMhDD8lademN5UhK655YPSVndxvzXwGUdn2wf3F17eAtfYF5yOFb5
brEHqkMGlnaUYa4Wb7DN08MV9zwyxb0fcxF2NvFjUfa4/8xRY/2vPrDa79dW
YmCBu135+6z/6oMpbYFlZnY93C8b/779X33w/K3Gv59OKQP874/sOPpffbDV
I3r47sE7uDvnzXH9Vx8w3DByC1y3xb3ifhwnHeYzyiacg+OOuF/q30+awdaz
+naGa8+UO+693i4aTZgHLjL56nagfkiB/PCoA+Zpu23tLOtQ/2Rt34b2Wcxj
Rdj3nrmF+i06nQKd2zAnu0jsVL6K+jMFF9JFHmLf5UzsZ3FGxTjcazU2+qjY
PikUGlxyPJyAu2kAv4kL5l7M3Wd+sKN+0bYD3n/TY86YvP7n6mYy7sL/5Bis
YnXAhzOJnwcH03HnNlw754PVAecfHXKeS8zFPVKs8akMtv8jRn57tJHzcP+s
cslZHasPnBsZjueG5OOedA0O6WHnSPzjSMsriPpmFwV9J/Wx8+igdoudNx/1
5Zo4dWfpo2iQfe3uAH9QMe4mvSnM09h5N71aduITM+r7zXqSijyfY/HH6MNW
cy/kR/kONO/B6gbW9q2RSc6of5igMH9JxI8GPXaLXfhk9h53Bp4B25lnWNzz
HFnqPleB+1zH+UGmRzT4xLIuI3MN9Tm5tCpkY67Q4NXki8WnFVFf9ECQ49+c
WjQo9Wb8Wr0b8okrjsGumjSobqtF186A+qsKPNJ+ipew91bINhHPXou796sn
blcVaXDvvc5wbqE63Pk+gcNdf9FgaGxq4C8l1B8Oy7vkq7ZAhb8ijkYoF6F+
9UibjRGbBRXuYnMkk/ei/vm53J2ym3vm4XrhIZsnOqjfvjqU7hr31yw8wiTQ
d7YK9efTpBwc9Kun4OnM9/kiGaif3xJbJ+AjMgE3NBcrNu6g/n9E6czJqoUR
aO7cl7krCM0LIoRP84xeGISddP3sikpoviDqca62T6cLHsikD90eg+YRIZng
EDRpgyYsnpf3JCD/Z+ZIqsP5NmjuxxLKk4JcWu3G/iOibTCi4kwUYxZyfWbx
gH3fWuFYiWqK3zvk9VUakvIjLXDrq/EGUidyy1IX8q71Jig4TQ8o29HcpPTr
PpdQ0c8wpycmtp4DuU8A0wuhmXpopWtu2L0LuXoHa2hOTj30ZS7kHeMhzH1+
2btTpOvhrYcG5xKEkXdT9nTZnq6DqYEzX9LkkQfsnQyd1KyF29KCNFaMkPOW
Bw8z23yEF673OembIFes/xP7QfwjPGOtzPPGFLlGowGf2Vgl7FV6FK9qjvyR
5/3yIv1KyHVPpGLrQ+SGDy3Khfwq4LRtUl22B/LC6KkTA1LvoZdvLdneC7lT
fA4/Je0dzKqcbjrpQ5g3FZYdd+J9B0v/4rwT7Y+8wtkhepW+FEbbx8nMhxD8
zMhk7Le3kJYbzFZHmMc9Yg39kO9YAH+NMi6txCKXtWNz56FS4M/rOqcECPO+
t2UpfC7GFKhwgq1TIxH5VbYCBrOXeVA1osNGNhW5grKsRb9sFqznbTjNl0bw
JY23pkKZUCidz2SZ4NocBdcmWF5DEkNdlX8G8iMjpOX2nnT4cvM9VCLMN1dj
tGcNXJLhkuKM4XfiPFTTWplyJwmSDIv0jQnz07BZdunN6ATIQ7bVv0mYt649
01QUOh0DW47wGDYR/LDG9YV0tiiol11ZLk2Y236Pv/43qS8S/k1J8B4kuMGg
1gdW1zCoqZJIFSXMhXVuFcrPxQTD800ylLsEz6+iZr07HQB/HNZtiCX4sowN
v1ufN1SXnVSoIziX0+UxRddn0CN3iGma4GnRV/Kpp50gu7KM5BbCHDxBVIGs
72oLc8mjGRwE102R1n3qehv+/zm72UTof3P2iv8BTlJk4g==
          "]]}}}, {{{}, {}, {
        
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
6j11u43q//9/Z7cYD//vO3vl/wHesGTi
          "]]}}}}, {{{
        RGBColor[
        0.7993932222222222, 0.2708222111111111, 0.22693386777777774`], 
        PointSize[0.035], 
        Point3DBox[
         NCache[{
           Rational[2, 3], 
           Rational[-2, 3], 
           Rational[1, 3]}, {0.6666666666666666, -0.6666666666666666, 
          0.3333333333333333}]]}, {
        RGBColor[
        0.7707351111111111, 0.16665395555555554`, 0.11649584888888888`], 
        PointSize[0.015], 
        Point3DBox[{0, 0, 1}]}, {
        RGBColor[0.742077, 0.0624857, 0.00605783], 
        PointSize[0.035], 
        Point3DBox[{0, 0, -1}]}}}}, {ViewAngle -> 0.34, Boxed -> False}],
   FormBox[
    FormBox[
     TemplateBox[{"1", "2", "3"}, "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.09], 
                    Dashing[{0, Small}], 
                    RGBColor[0.742077, 0.0624857, 0.00605783]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.09], 
                    Dashing[{0, Small}], 
                    RGBColor[0.742077, 0.0624857, 0.00605783]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {40, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"Directive", "[", 
               RowBox[{
                 RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
                 RowBox[{"Dashing", "[", 
                   RowBox[{"{", 
                    RowBox[{"0", ",", "Small"}], "}"}], "]"}], ",", 
                 InterpretationBox[
                  ButtonBox[
                   TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.742077, 0.0624857, 0.00605783], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.494718, 0.04165713333333333, 0.0040385533333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.742077, 0.0624857, 0.00605783]"], Appearance -> 
                   None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                   DefaultBaseStyle -> {}, ButtonFunction :> 
                   With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.742077, 0.0624857, 0.00605783]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  RGBColor[0.742077, 0.0624857, 0.00605783], Editable -> 
                  False, Selectable -> False]}], "]"}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}]}], "]"}]& ), Editable -> 
      True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.635181002510664*^9, 3.635181010170289*^9}, 
   3.6351813109977407`*^9, 3.635181394217874*^9, 3.6351816868018208`*^9, 
   3.635250098014485*^9, 3.6352501558443737`*^9}]
}, Open  ]],

Cell["\<\
However, adding an extra layer of lists, each list of states is interpretted \
as a separate trajectory.\
\>", "Text",
 CellChangeTimes->{{3.63518146301451*^9, 3.635181534100552*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BlochPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Sqrt", "[", 
         RowBox[{"I", " ", 
          RowBox[{"2", "/", "3"}]}], "]"}], ",", 
        RowBox[{"Sqrt", "[", 
         RowBox[{"1", "/", "3"}], "]"}]}], "}"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Sqrt", "[", "0.99", "]"}], ",", 
         RowBox[{"Sqrt", "[", 
          RowBox[{"1", "-", "0.99"}], "]"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], "}"}]}], "}"}], ",", 
   RowBox[{"BlochPlotLabels", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.635181028687386*^9, 3.6351810394926662`*^9}, {
  3.635181606793284*^9, 3.635181674836706*^9}}],

Cell[BoxData[
 TemplateBox[{Graphics3DBox[{{{
       Opacity[0.2], 
       SphereBox[{0, 0, 0}, 1], 
       Opacity[0.5], 
       GrayLevel[0], 
       Thickness[Large], 
       Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
       Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
       Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], 
       Opacity[1], 
       GrayLevel[0], 
       Thickness[Large], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 0, 1.15}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 0, -1.15}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {1.15, 0, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {-1.15, 0, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 1.15, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, -1.15, 0}]}, {{{}, {}, {
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
aZ3nLndR/f//7+xmU6H/fWev/J//H/XtZOI=
          "]]}}}, {{{}, {}, {
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
d3iqKYHXvWC4xC1pTYIb3/oU+Wjvc8gSLvdoF8EFmFksBldCoOjDalIb4bt0
T2dqCs2GQb4e0ucTBK8I1z70pCES0h6el0ol7BPzROacIb94SOUr7pYkuIDg
u0Bzh0So/9VnMYewD2/N69mtvEmC7TnVZlGvkSvfk4mwTE2BL4es3bkI+7za
p9ldyCMDKkrHmicTzp17f7+E05k8KMcSqBhHOKcemw53x9XyYXWumERwPPKQ
xdfTqZIUuDafqK0XSzgX2ur+P2UKoJyH5cjTl8j/3eVkd1frDXyqJmJACkTu
43J38rh7CUzakp5ZY0V4rrbo50E9EO5oZX+caoH8npQHeUWqEiaS3MwdzZCr
Qv2eZLtKqJw23sxqinxiZthsZrUSVh20D602QJ62AFKV6avg4rhgTNBF5PlT
O/h+ctdA+dzheT8eQtzItdWkl6uH098fxXpzI38RfehP+ON6GPU+MMtpF3Ja
40Du/qJ6uOecyoLmdkKc7+74Jiz1Gb6YE5eK3kR5ROD2UvSYcAMU8iyXrB5D
fkhwsu4QRxN0+HOD2YKQ724LHy15PNAKWzaupwJ+5O1CGTf0Cr/A0V9OF1q8
UR7fZKK/NvmiF167+ieK9wnK+yf47ZPLzIbhs3FezR4hVCdcvV/sruozBvfR
n5Y/K43qCoZrTq9Vnk/CIjPx+ny+Edz/atJKid2Yhh1eYTmHk1DdMmG+Q22O
bg7W1sbaTq+hOqfALdTHpngecoiPNoX2I0+pqWjo+jAP9z1g+3qsEvkM63yr
/Md5OGubRH/PG3kf93ae6cZ5uPkmNDOUA7mmN7MzdWge5uZduU87+BX3S27W
NrEsVCjE8lZmx4UO3Od+rwXY61Jh2ohSRM0GqvdktzPLzn3H3m/dMauyMuQr
46oj9T1UKLd5hi3HCbm2ullx3AAVOs1cG7FbQfUkY/NQp/gEFU5/7mZPnm/A
nZ4rebh7GVvP5PH1kJ563OPmD4mFctJgE9nbSDG/BuWFeOnay8rYfvK4k3/F
EvmgeU4Z+zkarFeaEzYWR/7vywFYe4EGZToz2mxSUZ0sa/P3BI8GDR5k+nn2
ErkKxX8/kHD1Gg1GN72+v+FaiXu2cRbvPuy8PThD/ro9FNXzx0z/rpzwpUFB
Jr23v3ciZ6hzIlv402DLxRvhE+HoXuCuHRc8hdUHpyvFa1+Ti1He1LrY2xBE
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
          "]]}}}, {{{}, {}, {
        
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
6j11u43q//9/Z7cYD//vO3vl/wHesGTi
          "]]}}}}, {{{
        RGBColor[0.742077, 0.0624857, 0.00605783], 
        PointSize[0.035], 
        Point3DBox[{0.6666666666666666, -0.6666666666666666, 
         0.3333333333333333}]}}, 
      RGBColor[0.742077, 0.0624857, 0.00605783], 
      Thickness[0.005], 
      Line3DBox[{{0, 0, 0}, {0.6666666666666666, -0.6666666666666666, 
        0.3333333333333333}}]}, {{{
        RGBColor[
         NCache[
          Rational[1, 6], 0.16666666666666666`], 0.5849675, 
         NCache[
          Rational[1, 6], 0.16666666666666666`]], 
        PointSize[0.035], 
        Point3DBox[{0., 0., 1.}]}, {
        RGBColor[0, 0.501961, 0], 
        PointSize[0.035], 
        Point3DBox[{0.1989974874213241, 0., 0.98}]}}}, {{{
        RGBColor[1, 0.0175937, 0.505959], 
        PointSize[0.035], 
        Point3DBox[{0., 0., -1.}]}}, 
      RGBColor[1, 0.0175937, 0.505959], 
      Thickness[0.005], 
      Line3DBox[{{0, 0, 0}, {0., 0., -1.}}]}}, {
    ViewAngle -> 0.34, Boxed -> False}],FormBox[
    FormBox[
     TemplateBox[{"1", "2", "3"}, "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[0.742077, 0.0624857, 0.00605783]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[0.742077, 0.0624857, 0.00605783]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[0, 0.501961, 0]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[0, 0.501961, 0]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[1, 0.0175937, 0.505959]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[1, 0.0175937, 0.505959]], {}}}, AspectRatio -> 
                    Full, ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.742077, 0.0624857, 0.00605783], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.494718, 0.04165713333333333, 0.0040385533333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.742077, 0.0624857, 0.00605783]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.742077, 0.0624857, 0.00605783]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.742077, 0.0624857, 0.00605783], Editable -> 
                    False, Selectable -> False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0.501961, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0.3346406666666667, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "RGBColor[0, 0.501961, 0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0.501961, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0.501961, 0], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.0175937, 0.505959], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6666666666666666, 0.011729133333333334`, 
                    0.33730600000000005`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[1, 0.0175937, 0.505959]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.0175937, 0.505959]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.0175937, 0.505959], Editable -> False, 
                    Selectable -> False]}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}]}], "]"}]& ), Editable -> 
      True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.6351810399030113`*^9, 3.635181312175962*^9, 3.635181402689742*^9, {
   3.6351816274728413`*^9, 3.635181638066687*^9}, 3.635181675262096*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Example 2", "Subsubsection",
 CellChangeTimes->{{3.6351695490049887`*^9, 3.635169552020585*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"BlochPlot", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"RandomDensity", "[", "2", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "50"}], "}"}]}], "]"}], ",", 
      RowBox[{"BlochPlotEndPoints", "\[Rule]", "#"}], ",", 
      RowBox[{"ImageSize", "\[Rule]", "350"}], ",", 
      RowBox[{"PlotLegends", "\[Rule]", "On"}]}], "]"}], "&"}], "/@", 
   RowBox[{"{", 
    RowBox[{"True", ",", "False"}], "}"}]}], "//", "Row"}]], "Input",
 CellChangeTimes->{{3.635169555508313*^9, 3.6351695610996313`*^9}, {
   3.635169828403604*^9, 3.635169832244508*^9}, 3.6351730426192417`*^9, {
   3.635173199031186*^9, 3.635173204947081*^9}, {3.635173246875753*^9, 
   3.635173276632453*^9}, {3.63517551427703*^9, 3.6351755179556837`*^9}}],

Cell[BoxData[
 TemplateBox[{Graphics3DBox[{{{
       Opacity[0.2], 
       SphereBox[{0, 0, 0}, 1], 
       Opacity[0.5], 
       GrayLevel[0], 
       Thickness[Large], 
       Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
       Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
       Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], 
       Opacity[1], 
       GrayLevel[0], 
       Thickness[Large], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 0, 1.15}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 0, -1.15}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {1.15, 0, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {-1.15, 0, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 1.15, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, -1.15, 0}]}, {{{}, {}, {
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
aZ3nLndR/f//7+xmU6H/fWev/J//H/XtZOI=
          "]]}}}, {{{}, {}, {
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
d3iqKYHXvWC4xC1pTYIb3/oU+Wjvc8gSLvdoF8EFmFksBldCoOjDalIb4bt0
T2dqCs2GQb4e0ucTBK8I1z70pCES0h6el0ol7BPzROacIb94SOUr7pYkuIDg
u0Bzh0So/9VnMYewD2/N69mtvEmC7TnVZlGvkSvfk4mwTE2BL4es3bkI+7za
p9ldyCMDKkrHmicTzp17f7+E05k8KMcSqBhHOKcemw53x9XyYXWumERwPPKQ
xdfTqZIUuDafqK0XSzgX2ur+P2UKoJyH5cjTl8j/3eVkd1frDXyqJmJACkTu
43J38rh7CUzakp5ZY0V4rrbo50E9EO5oZX+caoH8npQHeUWqEiaS3MwdzZCr
Qv2eZLtKqJw23sxqinxiZthsZrUSVh20D602QJ62AFKV6avg4rhgTNBF5PlT
O/h+ctdA+dzheT8eQtzItdWkl6uH098fxXpzI38RfehP+ON6GPU+MMtpF3Ja
40Du/qJ6uOecyoLmdkKc7+74Jiz1Gb6YE5eK3kR5ROD2UvSYcAMU8iyXrB5D
fkhwsu4QRxN0+HOD2YKQ724LHy15PNAKWzaupwJ+5O1CGTf0Cr/A0V9OF1q8
UR7fZKK/NvmiF167+ieK9wnK+yf47ZPLzIbhs3FezR4hVCdcvV/sruozBvfR
n5Y/K43qCoZrTq9Vnk/CIjPx+ny+Edz/atJKid2Yhh1eYTmHk1DdMmG+Q22O
bg7W1sbaTq+hOqfALdTHpngecoiPNoX2I0+pqWjo+jAP9z1g+3qsEvkM63yr
/Md5OGubRH/PG3kf93ae6cZ5uPkmNDOUA7mmN7MzdWge5uZduU87+BX3S27W
NrEsVCjE8lZmx4UO3Od+rwXY61Jh2ohSRM0GqvdktzPLzn3H3m/dMauyMuQr
46oj9T1UKLd5hi3HCbm2ullx3AAVOs1cG7FbQfUkY/NQp/gEFU5/7mZPnm/A
nZ4rebh7GVvP5PH1kJ563OPmD4mFctJgE9nbSDG/BuWFeOnay8rYfvK4k3/F
EvmgeU4Z+zkarFeaEzYWR/7vywFYe4EGZToz2mxSUZ0sa/P3BI8GDR5k+nn2
ErkKxX8/kHD1Gg1GN72+v+FaiXu2cRbvPuy8PThD/ro9FNXzx0z/rpzwpUFB
Jr23v3ciZ6hzIlv402DLxRvhE+HoXuCuHRc8hdUHpyvFa1+Ti1He1LrY2xBE
g0Js1bYzCUUoHp7UHjsaToP+EdMeT3PQPcV2QN3SI44G7dqU/vAfQR62LXSf
PxanjIU9eqwN0X2nz7pm1BeLax0Cv69/NEX3puseWz5ZYXWGVli7DKddJu6/
7K5W96TSYKu8R9Vzf3Qvc0jb9kgOi78WZ1WY7j5Pwp3yqrHkI+Z6P4HOY8FE
VM9kP9qtgsVx+TFJ9iJxdB9cdVjcKYnVASsBKm6XpND9kbo7sCgc88Bso4zv
J8i4J14Jt17GXKMnjHMEhOMusjdMLAHLK5zpZC2j8+h+uix/Q2wS89sXuZ4V
RQbj/uSMMhDD8lademN5UhK655YPSVndxvzXwGUdn2wf3F17eAtfYF5yOFb5
brEHqkMGlnaUYa4Wb7DN08MV9zwyxb0fcxF2NvFjUfa4/8xRY/2vPrDa79dW
YmCBu135+6z/6oMpbYFlZnY93C8b/779X33w/K3Gv59OKQP874/sOPpffbDV
I3r47sE7uDvnzXH9Vx8w3DByC1y3xb3ifhwnHeYzyiacg+OOuF/q30+awdaz
+naGa8+UO+693i4aTZgHLjL56nagfkiB/PCoA+Zpu23tLOtQ/2Rt34b2Wcxj
Rdj3nrmF+i06nQKd2zAnu0jsVL6K+jMFF9JFHmLf5UzsZ3FGxTjcazU2+qjY
PikUGlxyPJyAu2kAv4kL5l7M3Wd+sKN+0bYD3n/TY86YvP7n6mYy7sL/5Bis
YnXAhzOJnwcH03HnNlw754PVAecfHXKeS8zFPVKs8akMtv8jRn57tJHzcP+s
cslZHasPnBsZjueG5OOedA0O6WHnSPzjSMsriPpmFwV9J/Wx8+igdoudNx/1
5Zo4dWfpo2iQfe3uAH9QMe4mvSnM09h5N71aduITM+r7zXqSijyfY/HH6MNW
cy/kR/kONO/B6gbW9q2RSc6of5igMH9JxI8GPXaLXfhk9h53Bp4B25lnWNzz
HFnqPleB+1zH+UGmRzT4xLIuI3MN9Tm5tCpkY67Q4NXki8WnFVFf9ECQ49+c
WjQo9Wb8Wr0b8okrjsGumjSobqtF186A+qsKPNJ+ipew91bINhHPXou796sn
blcVaXDvvc5wbqE63Pk+gcNdf9FgaGxq4C8l1B8Oy7vkq7ZAhb8ijkYoF6F+
9UibjRGbBRXuYnMkk/ei/vm53J2ym3vm4XrhIZsnOqjfvjqU7hr31yw8wiTQ
d7YK9efTpBwc9Kun4OnM9/kiGaif3xJbJ+AjMgE3NBcrNu6g/n9E6czJqoUR
aO7cl7krCM0LIoRP84xeGISddP3sikpoviDqca62T6cLHsikD90eg+YRIZng
EDRpgyYsnpf3JCD/Z+ZIqsP5NmjuxxLKk4JcWu3G/iOibTCi4kwUYxZyfWbx
gH3fWuFYiWqK3zvk9VUakvIjLXDrq/EGUidyy1IX8q71Jig4TQ8o29HcpPTr
PpdQ0c8wpycmtp4DuU8A0wuhmXpopWtu2L0LuXoHa2hOTj30ZS7kHeMhzH1+
2btTpOvhrYcG5xKEkXdT9nTZnq6DqYEzX9LkkQfsnQyd1KyF29KCNFaMkPOW
Bw8z23yEF673OembIFes/xP7QfwjPGOtzPPGFLlGowGf2Vgl7FV6FK9qjvyR
5/3yIv1KyHVPpGLrQ+SGDy3Khfwq4LRtUl22B/LC6KkTA1LvoZdvLdneC7lT
fA4/Je0dzKqcbjrpQ5g3FZYdd+J9B0v/4rwT7Y+8wtkhepW+FEbbx8nMhxD8
zMhk7Le3kJYbzFZHmMc9Yg39kO9YAH+NMi6txCKXtWNz56FS4M/rOqcECPO+
t2UpfC7GFKhwgq1TIxH5VbYCBrOXeVA1osNGNhW5grKsRb9sFqznbTjNl0bw
JY23pkKZUCidz2SZ4NocBdcmWF5DEkNdlX8G8iMjpOX2nnT4cvM9VCLMN1dj
tGcNXJLhkuKM4XfiPFTTWplyJwmSDIv0jQnz07BZdunN6ATIQ7bVv0mYt649
01QUOh0DW47wGDYR/LDG9YV0tiiol11ZLk2Y236Pv/43qS8S/k1J8B4kuMGg
1gdW1zCoqZJIFSXMhXVuFcrPxQTD800ylLsEz6+iZr07HQB/HNZtiCX4sowN
v1ufN1SXnVSoIziX0+UxRddn0CN3iGma4GnRV/Kpp50gu7KM5BbCHDxBVIGs
72oLc8mjGRwE102R1n3qehv+/zm72UTof3P2iv8BTlJk4g==
          "]]}}}, {{{}, {}, {
        
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
6j11u43q//9/Z7cYD//vO3vl/wHesGTi
          "]]}}}}, {{{
        RGBColor[
        0.8263318466666667, 0.3687403713333333, 0.33074560553333326`], 
        PointSize[0.035], 
        Point3DBox[{0.2940415560039335, 0.4486322263411591, 
         0.1715315526886384}]}, {
        RGBColor[0.82461236, 0.36249027599999994`, 0.32411932439999996`], 
        PointSize[0.015], 
        Point3DBox[{
         0.1062081820258439, -0.8660560187644554, -0.31936083453348085`}]}, {
        RGBColor[
        0.8228928733333334, 0.35624018066666663`, 0.3174930432666666], 
        PointSize[0.015], 
        Point3DBox[{-0.6894172213205707, 0.3050791076005194, 
         0.22863204427475614`}]}, {
        RGBColor[0.8211733866666667, 0.3499900853333333, 0.3108667621333333], 
        
        PointSize[0.015], 
        Point3DBox[{-0.5618864942227264, 0.5129635508244691, 
         0.40391023660697367`}]}, {
        RGBColor[0.8194539000000001, 0.34373999, 0.30424048099999995`], 
        PointSize[0.015], 
        Point3DBox[{-0.9197303681890682, -0.0344091523400897, 
         0.07676913215993714}]}, {
        RGBColor[
        0.8177344133333333, 0.3374898946666666, 0.29761419986666665`], 
        PointSize[0.015], 
        Point3DBox[{-0.04544735559144304, -0.12972570981863923`, \
-0.7139167922236642}]}, {
        RGBColor[0.8160149266666666, 0.3312397993333333, 0.2909879187333333], 
        
        PointSize[0.015], 
        Point3DBox[{
         0.6374700163640382, -0.17352650982322027`, -0.20612425817312713`}]}, {
        RGBColor[0.81429544, 0.32498970399999993`, 0.28436163759999994`], 
        PointSize[0.015], 
        Point3DBox[{-0.2843676501069689, 
         0.7322837157030203, -0.36936501507791314`}]}, {
        RGBColor[0.8125759533333333, 0.3187396086666666, 0.2777353564666666], 
        
        PointSize[0.015], 
        Point3DBox[{-0.3666788469938995, -0.17599550075282994`, 
         0.6909718720568425}]}, {
        RGBColor[0.8108564666666667, 0.3124895133333333, 0.2711090753333333], 
        
        PointSize[0.015], 
        Point3DBox[{0.6764778746053414, 
         0.3546011973402506, -0.25471326605138966`}]}, {
        RGBColor[0.80913698, 0.306239418, 0.2644827942], 
        PointSize[0.015], 
        Point3DBox[{0.0005354835916567548, 
         0.40180432424157014`, -0.8326659338455522}]}, {
        RGBColor[
        0.8074174933333333, 0.29998932266666667`, 0.2578565130666666], 
        PointSize[0.015], 
        Point3DBox[{-0.32583911302822044`, 0.34546788757217206`, 
         0.3393889950660772}]}, {
        RGBColor[0.8056980066666667, 0.2937392273333333, 0.2512302319333333], 
        
        PointSize[0.015], 
        Point3DBox[{0.6743174682974655, -0.2742197972030574, 
         0.07060630193876011}]}, {
        RGBColor[0.80397852, 0.287489132, 0.24460395079999997`], 
        PointSize[0.015], 
        Point3DBox[{0.6144025731213097, -0.31431743702041004`, 
         0.26253934833435116`}]}, {
        RGBColor[0.8022590333333334, 0.2812390366666666, 0.2379776696666666], 
        
        PointSize[0.015], 
        Point3DBox[{-0.8211221479645595, 
         0.16955991052440086`, -0.21840221336009952`}]}, {
        RGBColor[
        0.8005395466666667, 0.27498894133333335`, 0.2313513885333333], 
        PointSize[0.015], 
        Point3DBox[{-0.1560476170866202, 0.9813937649079716, 
         0.10617023198468001`}]}, {
        RGBColor[0.79882006, 0.268738846, 0.2247251074], 
        PointSize[0.015], 
        Point3DBox[{-0.526756739110612, 
         0.3935336048451302, -0.48779380383086324`}]}, {
        RGBColor[
        0.7971005733333334, 0.26248875066666666`, 0.21809882626666666`], 
        PointSize[0.015], 
        Point3DBox[{0.6134313199247283, -0.15955491238630162`, 
         0.1398793234495092}]}, {
        RGBColor[
        0.7953810866666666, 0.25623865533333334`, 0.2114725451333333], 
        PointSize[0.015], 
        Point3DBox[{0.8994607888275935, -0.05698096015570767, 
         0.32663553380347493`}]}, {
        RGBColor[0.7936616, 0.24998856, 0.204846264], 
        PointSize[0.015], 
        Point3DBox[{-0.5338841509828129, 
         0.24544413653021285`, -0.08548903531298341}]}, {
        RGBColor[
        0.7919421133333333, 0.24373846466666665`, 0.19821998286666664`], 
        PointSize[0.015], 
        Point3DBox[{0.5456891013594795, -0.14044061009532985`, 
         0.2799314519925206}]}, {
        RGBColor[
        0.7902226266666666, 0.23748836933333334`, 0.19159370173333334`], 
        PointSize[0.015], 
        Point3DBox[{0.027091573295166354`, 0.46208494852611554`, 
         0.5348697320795244}]}, {
        RGBColor[0.78850314, 0.23123827400000002`, 0.1849674206], 
        PointSize[0.015], 
        Point3DBox[{-0.014402533105162872`, 0.7637678139245566, 
         0.6438948690767899}]}, {
        RGBColor[
        0.7867836533333333, 0.22498817866666668`, 0.17834113946666663`], 
        PointSize[0.015], 
        Point3DBox[{
         0.8597621472446085, -0.14262267778634216`, -0.2536001628590822}]}, {
        RGBColor[
        0.7850641666666667, 0.21873808333333333`, 0.17171485833333333`], 
        PointSize[0.015], 
        Point3DBox[{0.17149865933301012`, 0.2533649721523524, 
         0.6621188676178067}]}, {
        RGBColor[0.78334468, 0.212487988, 0.16508857719999998`], 
        PointSize[0.015], 
        Point3DBox[{-0.31787805655527906`, -0.5764039397359654, \
-0.6892456644424156}]}, {
        RGBColor[
        0.7816251933333334, 0.20623789266666667`, 0.15846229606666667`], 
        PointSize[0.015], 
        Point3DBox[{-0.2782925457691901, -0.4740693179044718, \
-0.22794409274414773`}]}, {
        RGBColor[
        0.7799057066666667, 0.19998779733333333`, 0.15183601493333332`], 
        PointSize[0.015], 
        Point3DBox[{-0.49160260351168866`, 0.626010104703411, 
         0.025980252459686104`}]}, {
        RGBColor[0.77818622, 0.19373770199999998`, 0.14520973379999996`], 
        PointSize[0.015], 
        Point3DBox[{0.19950219008002662`, 
         0.8207941619809029, -0.502384038677845}]}, {
        RGBColor[
        0.7764667333333334, 0.18748760666666667`, 0.13858345266666666`], 
        PointSize[0.015], 
        Point3DBox[{-0.5847830098789174, 0.45127790207166046`, 
         0.3508787909981396}]}, {
        RGBColor[
        0.7747472466666667, 0.18123751133333332`, 0.1319571715333333], 
        PointSize[0.015], 
        Point3DBox[{-0.375246763704638, -0.2226005840233804, \
-0.7445420815368096}]}, {
        RGBColor[0.77302776, 0.17498741599999998`, 0.12533089039999998`], 
        PointSize[0.015], 
        Point3DBox[{
         0.20660171376280337`, -0.8519493757227421, -0.255001930560457}]}, {
        RGBColor[
        0.7713082733333333, 0.16873732066666666`, 0.11870460926666666`], 
        PointSize[0.015], 
        Point3DBox[{-0.2906651593444904, -0.8400757760811273, \
-0.07617062815145437}]}, {
        RGBColor[
        0.7695887866666666, 0.16248722533333332`, 0.11207832813333332`], 
        PointSize[0.015], 
        Point3DBox[{0.02680677413428972, 
         0.4170048673576839, -0.4647136446735056}]}, {
        RGBColor[0.7678693, 0.15623713, 0.105452047], 
        PointSize[0.015], 
        Point3DBox[{0.15981946748372186`, 
         0.2828597576096343, -0.7221764975908994}]}, {
        RGBColor[
        0.7661498133333333, 0.14998703466666666`, 0.09882576586666666], 
        PointSize[0.015], 
        Point3DBox[{-0.04316354289461264, 
         0.6560435178813915, -0.07055424025225582}]}, {
        RGBColor[
        0.7644303266666667, 0.14373693933333334`, 0.09219948473333332], 
        PointSize[0.015], 
        Point3DBox[{
         0.8523555467342792, -0.27761074438079447`, -0.4301914605603074}]}, {
        RGBColor[0.76271084, 0.137486844, 0.0855732036], 
        PointSize[0.015], 
        Point3DBox[{0.2648003843807291, -0.3036808250615368, 
         0.6120412511980031}]}, {
        RGBColor[
        0.7609913533333333, 0.13123674866666665`, 0.07894692246666667], 
        PointSize[0.015], 
        Point3DBox[{-0.4165469303281964, 
         0.46163713571179377`, -0.669975828350593}]}, {
        RGBColor[
        0.7592718666666667, 0.12498665333333334`, 0.07232064133333332], 
        PointSize[0.015], 
        Point3DBox[{-0.11727716367216283`, -0.7707518539972028, 
         0.5322057331710462}]}, {
        RGBColor[0.75755238, 0.11873655799999999`, 0.0656943602], 
        PointSize[0.015], 
        Point3DBox[{
         0.16066085896429996`, -0.8139919142919949, -0.44604446227269}]}, {
        RGBColor[
        0.7558328933333334, 0.11248646266666666`, 0.05906807906666666], 
        PointSize[0.015], 
        Point3DBox[{-0.7515634301154015, -0.2078880867273718, 
         0.6057253603271404}]}, {
        RGBColor[
        0.7541134066666667, 0.10623636733333333`, 0.05244179793333333], 
        PointSize[0.015], 
        Point3DBox[{0.577600193609067, 0.2816940371090722, 
         0.666068870737669}]}, {
        RGBColor[0.7523939199999999, 0.09998627199999999, 0.0458155168], 
        PointSize[0.015], 
        Point3DBox[{-0.7613978697495499, -0.31919261775895774`, 
         0.08964678344701449}]}, {
        RGBColor[
        0.7506744333333333, 0.09373617666666667, 0.03918923566666666], 
        PointSize[0.015], 
        Point3DBox[{
         0.33083528549866037`, -0.35181251942236014`, -0.6945905933338475}]}, {
        RGBColor[
        0.7489549466666666, 0.08748608133333333, 0.03256295453333333], 
        PointSize[0.015], 
        Point3DBox[{-0.6634197201687524, 
         0.16467271904758932`, -0.597750126996079}]}, {
        RGBColor[0.74723546, 0.081235986, 0.0259366734], 
        PointSize[0.015], 
        Point3DBox[{-0.16357397988545277`, -0.8360619444036079, \
-0.2755985592614334}]}, {
        RGBColor[
        0.7455159733333333, 0.07498589066666667, 0.019310392266666664`], 
        PointSize[0.015], 
        Point3DBox[{0.4147104181443824, 
         0.370924430277165, -0.5345373197385035}]}, {
        RGBColor[
        0.7437964866666666, 0.06873579533333334, 0.012684111133333332`], 
        PointSize[0.015], 
        Point3DBox[{
         0.29889797641886345`, -0.1106952328144112, -0.8779864989111924}]}, {
        RGBColor[0.742077, 0.0624857, 0.00605783], 
        PointSize[0.035], 
        Point3DBox[{-0.01788309876785006, -0.054135858019254614`, \
-0.06934933715920277}]}}}}, {
    ViewAngle -> 0.34, ImageSize -> 350, Boxed -> False}],Graphics3DBox[{{{
       Opacity[0.2], 
       SphereBox[{0, 0, 0}, 1], 
       Opacity[0.5], 
       GrayLevel[0], 
       Thickness[Large], 
       Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
       Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
       Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], 
       Opacity[1], 
       GrayLevel[0], 
       Thickness[Large], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 0, 1.15}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 0, -1.15}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {1.15, 0, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {-1.15, 0, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 1.15, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, -1.15, 0}]}, {{{}, {}, {
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
aZ3nLndR/f//7+xmU6H/fWev/J//H/XtZOI=
          "]]}}}, {{{}, {}, {
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
d3iqKYHXvWC4xC1pTYIb3/oU+Wjvc8gSLvdoF8EFmFksBldCoOjDalIb4bt0
T2dqCs2GQb4e0ucTBK8I1z70pCES0h6el0ol7BPzROacIb94SOUr7pYkuIDg
u0Bzh0So/9VnMYewD2/N69mtvEmC7TnVZlGvkSvfk4mwTE2BL4es3bkI+7za
p9ldyCMDKkrHmicTzp17f7+E05k8KMcSqBhHOKcemw53x9XyYXWumERwPPKQ
xdfTqZIUuDafqK0XSzgX2ur+P2UKoJyH5cjTl8j/3eVkd1frDXyqJmJACkTu
43J38rh7CUzakp5ZY0V4rrbo50E9EO5oZX+caoH8npQHeUWqEiaS3MwdzZCr
Qv2eZLtKqJw23sxqinxiZthsZrUSVh20D602QJ62AFKV6avg4rhgTNBF5PlT
O/h+ctdA+dzheT8eQtzItdWkl6uH098fxXpzI38RfehP+ON6GPU+MMtpF3Ja
40Du/qJ6uOecyoLmdkKc7+74Jiz1Gb6YE5eK3kR5ROD2UvSYcAMU8iyXrB5D
fkhwsu4QRxN0+HOD2YKQ724LHy15PNAKWzaupwJ+5O1CGTf0Cr/A0V9OF1q8
UR7fZKK/NvmiF167+ieK9wnK+yf47ZPLzIbhs3FezR4hVCdcvV/sruozBvfR
n5Y/K43qCoZrTq9Vnk/CIjPx+ny+Edz/atJKid2Yhh1eYTmHk1DdMmG+Q22O
bg7W1sbaTq+hOqfALdTHpngecoiPNoX2I0+pqWjo+jAP9z1g+3qsEvkM63yr
/Md5OGubRH/PG3kf93ae6cZ5uPkmNDOUA7mmN7MzdWge5uZduU87+BX3S27W
NrEsVCjE8lZmx4UO3Od+rwXY61Jh2ohSRM0GqvdktzPLzn3H3m/dMauyMuQr
46oj9T1UKLd5hi3HCbm2ullx3AAVOs1cG7FbQfUkY/NQp/gEFU5/7mZPnm/A
nZ4rebh7GVvP5PH1kJ563OPmD4mFctJgE9nbSDG/BuWFeOnay8rYfvK4k3/F
EvmgeU4Z+zkarFeaEzYWR/7vywFYe4EGZToz2mxSUZ0sa/P3BI8GDR5k+nn2
ErkKxX8/kHD1Gg1GN72+v+FaiXu2cRbvPuy8PThD/ro9FNXzx0z/rpzwpUFB
Jr23v3ciZ6hzIlv402DLxRvhE+HoXuCuHRc8hdUHpyvFa1+Ti1He1LrY2xBE
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
          "]]}}}, {{{}, {}, {
        
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
6j11u43q//9/Z7cYD//vO3vl/wHesGTi
          "]]}}}}, {{{
        RGBColor[
        0.8263318466666667, 0.3687403713333333, 0.33074560553333326`], 
        PointSize[0.015], 
        Point3DBox[{0.5577262277302119, 
         0.15028643722538013`, -0.18252266779625725`}]}, {
        RGBColor[0.82461236, 0.36249027599999994`, 0.32411932439999996`], 
        PointSize[0.015], 
        Point3DBox[{0.592081549392636, 0.28556464510571145`, 
         0.24493147987259917`}]}, {
        RGBColor[
        0.8228928733333334, 0.35624018066666663`, 0.3174930432666666], 
        PointSize[0.015], 
        Point3DBox[{0.32548599635102454`, -0.8467411809430254, 
         0.10352547512142735`}]}, {
        RGBColor[0.8211733866666667, 0.3499900853333333, 0.3108667621333333], 
        
        PointSize[0.015], 
        Point3DBox[{-0.5055681418171414, -0.6853935163637381, 
         0.313003920561052}]}, {
        RGBColor[0.8194539000000001, 0.34373999, 0.30424048099999995`], 
        PointSize[0.015], 
        Point3DBox[{
         0.04319088468355864, -0.381120384215485, -0.3892775734495059}]}, {
        RGBColor[
        0.8177344133333333, 0.3374898946666666, 0.29761419986666665`], 
        PointSize[0.015], 
        Point3DBox[{0.2501940669288504, -0.5244022359118596, 
         0.7403842262169301}]}, {
        RGBColor[0.8160149266666666, 0.3312397993333333, 0.2909879187333333], 
        
        PointSize[0.015], 
        Point3DBox[{-0.6647204817603555, 0.5754981368067588, 
         0.30773307586972737`}]}, {
        RGBColor[0.81429544, 0.32498970399999993`, 0.28436163759999994`], 
        PointSize[0.015], 
        Point3DBox[{0.43070634094774285`, 0.6530036173418405, 
         0.30505927595808685`}]}, {
        RGBColor[0.8125759533333333, 0.3187396086666666, 0.2777353564666666], 
        
        PointSize[0.015], 
        Point3DBox[{0.6666728485224943, 0.3781843915230471, 
         0.48446965387148166`}]}, {
        RGBColor[0.8108564666666667, 0.3124895133333333, 0.2711090753333333], 
        
        PointSize[0.015], 
        Point3DBox[{0.12514757718179378`, 
         0.34378764455246946`, -0.3817766353199809}]}, {
        RGBColor[0.80913698, 0.306239418, 0.2644827942], 
        PointSize[0.015], 
        Point3DBox[{-0.24152700601853638`, -0.2766955501778109, \
-0.41533409382911524`}]}, {
        RGBColor[
        0.8074174933333333, 0.29998932266666667`, 0.2578565130666666], 
        PointSize[0.015], 
        Point3DBox[{-0.33263919452301255`, 
         0.6869180223102536, -0.1951660611501601}]}, {
        RGBColor[0.8056980066666667, 0.2937392273333333, 0.2512302319333333], 
        
        PointSize[0.015], 
        Point3DBox[{0.021905658890319778`, 
         0.3609319907370796, -0.8574872016368666}]}, {
        RGBColor[0.80397852, 0.287489132, 0.24460395079999997`], 
        PointSize[0.015], 
        Point3DBox[{0.7007716628748338, -0.13324131314965593`, 
         0.6908479489080529}]}, {
        RGBColor[0.8022590333333334, 0.2812390366666666, 0.2379776696666666], 
        
        PointSize[0.015], 
        Point3DBox[{-0.09849447789028165, 
         0.40266931283195423`, -0.4525722465113421}]}, {
        RGBColor[
        0.8005395466666667, 0.27498894133333335`, 0.2313513885333333], 
        PointSize[0.015], 
        Point3DBox[{-0.30446278734961013`, -0.7351887652307364, 
         0.2798389471031172}]}, {
        RGBColor[0.79882006, 0.268738846, 0.2247251074], 
        PointSize[0.015], 
        Point3DBox[{-0.6404848010543155, 
         0.1795033993262543, -0.03654253022917864}]}, {
        RGBColor[
        0.7971005733333334, 0.26248875066666666`, 0.21809882626666666`], 
        PointSize[0.015], 
        Point3DBox[{-0.11014034793492987`, -0.4764034670315679, 
         0.29243735990396247`}]}, {
        RGBColor[
        0.7953810866666666, 0.25623865533333334`, 0.2114725451333333], 
        PointSize[0.015], 
        Point3DBox[{-0.3926538439778692, 
         0.001049655515708395, -0.30776278260358847`}]}, {
        RGBColor[0.7936616, 0.24998856, 0.204846264], 
        PointSize[0.015], 
        Point3DBox[{
         0.007905781993594823, -0.2673410221873722, -0.7888137994793554}]}, {
        RGBColor[
        0.7919421133333333, 0.24373846466666665`, 0.19821998286666664`], 
        PointSize[0.015], 
        Point3DBox[{-0.9757426898403679, 0.001810911791317852, 
         0.17927760266280424`}]}, {
        RGBColor[
        0.7902226266666666, 0.23748836933333334`, 0.19159370173333334`], 
        PointSize[0.015], 
        Point3DBox[{-0.04075933153686415, 
         0.3061800389632576, -0.08094731217456685}]}, {
        RGBColor[0.78850314, 0.23123827400000002`, 0.1849674206], 
        PointSize[0.015], 
        Point3DBox[{-0.5362945139597476, -0.3640531533926001, 
         0.647818886460569}]}, {
        RGBColor[
        0.7867836533333333, 0.22498817866666668`, 0.17834113946666663`], 
        PointSize[0.015], 
        Point3DBox[{-0.13528586804749584`, -0.592914720807177, 
         0.14422410064231078`}]}, {
        RGBColor[
        0.7850641666666667, 0.21873808333333333`, 0.17171485833333333`], 
        PointSize[0.015], 
        Point3DBox[{0.44866156468890506`, -0.5981438029298592, 
         0.30439600329448696`}]}, {
        RGBColor[0.78334468, 0.212487988, 0.16508857719999998`], 
        PointSize[0.015], 
        Point3DBox[{-0.3220380962028305, -0.6489919872291993, \
-0.20416319243769643`}]}, {
        RGBColor[
        0.7816251933333334, 0.20623789266666667`, 0.15846229606666667`], 
        PointSize[0.015], 
        Point3DBox[{0.6353358769961087, 
         0.14849233678657567`, -0.49170488636160475`}]}, {
        RGBColor[
        0.7799057066666667, 0.19998779733333333`, 0.15183601493333332`], 
        PointSize[0.015], 
        Point3DBox[{-0.05327223790539438, -0.03940846640453662, \
-0.4788263783248625}]}, {
        RGBColor[0.77818622, 0.19373770199999998`, 0.14520973379999996`], 
        PointSize[0.015], 
        Point3DBox[{-0.4847306351204009, -0.3849539718243488, \
-0.14200490772337537`}]}, {
        RGBColor[
        0.7764667333333334, 0.18748760666666667`, 0.13858345266666666`], 
        PointSize[0.015], 
        Point3DBox[{-0.6164568027660566, 0.7412769010879665, 
         0.11301862205437152`}]}, {
        RGBColor[
        0.7747472466666667, 0.18123751133333332`, 0.1319571715333333], 
        PointSize[0.015], 
        Point3DBox[{0.704202681071348, 0.4615427201923384, 
         0.140678684253206}]}, {
        RGBColor[0.77302776, 0.17498741599999998`, 0.12533089039999998`], 
        PointSize[0.015], 
        Point3DBox[{0.6676705180307041, 
         0.1557909926949802, -0.6234736952519389}]}, {
        RGBColor[
        0.7713082733333333, 0.16873732066666666`, 0.11870460926666666`], 
        PointSize[0.015], 
        Point3DBox[{-0.6087764132381145, -0.19732845225467632`, 
         0.009170326489664371}]}, {
        RGBColor[
        0.7695887866666666, 0.16248722533333332`, 0.11207832813333332`], 
        PointSize[0.015], 
        Point3DBox[{0.8335793161799133, 0.12720152368532806`, 
         0.48517822822112605`}]}, {
        RGBColor[0.7678693, 0.15623713, 0.105452047], 
        PointSize[0.015], 
        Point3DBox[{0.5381661630665031, -0.343015782519132, 
         0.3057021739857272}]}, {
        RGBColor[
        0.7661498133333333, 0.14998703466666666`, 0.09882576586666666], 
        PointSize[0.015], 
        Point3DBox[{0.5514760310400307, 0.12622617183058274`, 
         0.16670699033936137`}]}, {
        RGBColor[
        0.7644303266666667, 0.14373693933333334`, 0.09219948473333332], 
        PointSize[0.015], 
        Point3DBox[{0.7238359083556106, 
         0.4436376200210107, -0.23632746171754604`}]}, {
        RGBColor[0.76271084, 0.137486844, 0.0855732036], 
        PointSize[0.015], 
        Point3DBox[{-0.023441354157653718`, 0.3331538877546075, 
         0.6666008820225724}]}, {
        RGBColor[
        0.7609913533333333, 0.13123674866666665`, 0.07894692246666667], 
        PointSize[0.015], 
        Point3DBox[{-0.8035942081070416, 
         0.3768204111679937, -0.452979287631922}]}, {
        RGBColor[
        0.7592718666666667, 0.12498665333333334`, 0.07232064133333332], 
        PointSize[0.015], 
        Point3DBox[{0.1602673814834024, 
         0.17314028439065413`, -0.4156548141417562}]}, {
        RGBColor[0.75755238, 0.11873655799999999`, 0.0656943602], 
        PointSize[0.015], 
        Point3DBox[{0.18207733028387837`, -0.22418467145556825`, 
         0.7919467076156236}]}, {
        RGBColor[
        0.7558328933333334, 0.11248646266666666`, 0.05906807906666666], 
        PointSize[0.015], 
        Point3DBox[{-0.018041172320400537`, -0.1891754858803553, 
         0.03568679099452515}]}, {
        RGBColor[
        0.7541134066666667, 0.10623636733333333`, 0.05244179793333333], 
        PointSize[0.015], 
        Point3DBox[{0.020503554499914246`, -0.21233671735328505`, 
         0.3751188120581925}]}, {
        RGBColor[0.7523939199999999, 0.09998627199999999, 0.0458155168], 
        PointSize[0.015], 
        Point3DBox[{0.10436869348388161`, 0.6196815452876411, 
         0.44067150335691413`}]}, {
        RGBColor[
        0.7506744333333333, 0.09373617666666667, 0.03918923566666666], 
        PointSize[0.015], 
        Point3DBox[{0.09945944377481726, -0.822994401263711, 
         0.5234003670863204}]}, {
        RGBColor[
        0.7489549466666666, 0.08748608133333333, 0.03256295453333333], 
        PointSize[0.015], 
        Point3DBox[{-0.3183062139164414, 0.42896268940476145`, 
         0.5952735084103256}]}, {
        RGBColor[0.74723546, 0.081235986, 0.0259366734], 
        PointSize[0.015], 
        Point3DBox[{0.4828249164345612, 0.44513841470979715`, 
         0.33579293890407225`}]}, {
        RGBColor[
        0.7455159733333333, 0.07498589066666667, 0.019310392266666664`], 
        PointSize[0.015], 
        Point3DBox[{0.5536865106917293, -0.24182661070500008`, 
         0.2332947267229285}]}, {
        RGBColor[
        0.7437964866666666, 0.06873579533333334, 0.012684111133333332`], 
        PointSize[0.015], 
        Point3DBox[{-0.03058761219066652, -0.32813867294275245`, 
         0.10445971079692945`}]}, {
        RGBColor[0.742077, 0.0624857, 0.00605783], 
        PointSize[0.015], 
        Point3DBox[{-0.07933428782352234, 
         0.0289623494578695, -0.5257000445590013}]}}}}, {
    ViewAngle -> 0.34, ImageSize -> 350, Boxed -> False}]},
  "RowDefault"]], "Output",
 CellChangeTimes->{{3.635169556273539*^9, 3.635169561548277*^9}, 
   3.63516983245894*^9, 3.6351714194687567`*^9, 3.635173043018515*^9, 
   3.635173205218261*^9, {3.635173254273163*^9, 3.6351732774382877`*^9}, {
   3.635175480439342*^9, 3.6351755185670958`*^9}, 3.6351760794100933`*^9, 
   3.635176569106723*^9, 3.635178561478908*^9, 3.635250163397751*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Example 3", "Subsubsection",
 CellChangeTimes->{{3.633703448551146*^9, 3.6337034493192*^9}, {
  3.635169542716477*^9, 3.635169553763784*^9}}],

Cell["Use EvalPulse to generate two lists of states.", "Text",
 CellChangeTimes->{{3.63517659251066*^9, 3.635176632310123*^9}, {
  3.635176683959015*^9, 3.635176706949676*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"states1", "=", 
   RowBox[{"States", "@", 
    RowBox[{"EvalPulse", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Sin", "[", 
          RowBox[{"10", " ", "#"}], "]"}], " ", 
         RowBox[{"TP", "[", "X", "]"}]}], "+", 
        RowBox[{"4", 
         RowBox[{"TP", "[", "Z", "]"}]}]}], "&"}], ",", "\[Pi]", ",", 
      RowBox[{"PollingInterval", "\[Rule]", "0.05"}], ",", 
      RowBox[{"InitialState", "\[Rule]", 
       RowBox[{"TP", "[", "U", "]"}]}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"states2", "=", 
   RowBox[{"States", "@", 
    RowBox[{"EvalPulse", "[", 
     RowBox[{
      RowBox[{"TP", "[", "X", "]"}], ",", 
      RowBox[{"\[Pi]", "/", "2"}], ",", 
      RowBox[{"PollingInterval", "\[Rule]", "0.1"}], ",", 
      RowBox[{"InitialState", "\[Rule]", 
       RowBox[{"TP", "[", "U", "]"}]}]}], "]"}]}]}], ";"}]}], "Input"],

Cell["\<\
Demonstrate the difference between interpolated and uninterpolated:\
\>", "Text",
 CellChangeTimes->{{3.635176710350933*^9, 3.6351767139743757`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"BlochPlot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"states1", ",", "states2"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"BlochPlotJoined", "\[Rule]", "#"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ImageSize", "\[Rule]", "350"}], ",", "\[IndentingNewLine]", 
      RowBox[{"BlochPlotLabels", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<First\>\"", ",", "\"\<Second\>\""}], "}"}]}]}], 
     "\[IndentingNewLine]", "]"}], "&"}], "/@", 
   RowBox[{"{", 
    RowBox[{"False", ",", "True"}], "}"}]}], "//", "Row"}]], "Input",
 CellChangeTimes->{{3.6351687019622803`*^9, 3.6351687056178503`*^9}, {
   3.635169401380506*^9, 3.6351694064689627`*^9}, {3.635171633821888*^9, 
   3.635171655032093*^9}, {3.635172644927717*^9, 3.635172649013433*^9}, 
   3.635172990366571*^9, {3.6351734843952217`*^9, 3.635173517457018*^9}, {
   3.635176090735003*^9, 3.63517609200102*^9}, {3.63517650056835*^9, 
   3.635176513521597*^9}, 3.635176675561821*^9, {3.6351767155675077`*^9, 
   3.63517672581034*^9}}],

Cell[BoxData[
 TemplateBox[{TemplateBox[{
     Graphics3DBox[{{{
         Opacity[0.2], 
         SphereBox[{0, 0, 0}, 1], 
         Opacity[0.5], 
         GrayLevel[0], 
         Thickness[Large], 
         Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
         Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
         Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], 
         Opacity[1], 
         GrayLevel[0], 
         Thickness[Large], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|+Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {0, 0, 1.15}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|-Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {0, 0, -1.15}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|+X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {1.15, 0, 0}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|-X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {-1.15, 0, 0}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|+Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {0, 1.15, 0}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|-Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {0, -1.15, 0}]}, {{{}, {}, {
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Dashing[{Small, Small}], 
           Line3DBox[CompressedData["
1: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
aZ3nLndR/f//7+xmU6H/fWev/J//H/XtZOI=
            "]]}}}, {{{}, {}, {
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Dashing[{Small, Small}], 
           Line3DBox[CompressedData["
1:eJxd2Xk0VlvYAHBJxkJFkaH0usZKmgzRRqOpS5FcFZHKHKWMkXnIFHrNM2V+
SaiwZYjMNJjneXpf5FIU37lrfd/ZZ33+sdZvWcs+5+z9PM9+HiFjmyum9HR0
dFpb6Oi2Yr9NLw47ceXRAN3//hyq4nj/leXZGae3o4mcBC/j7zpyScUQHD8i
xbGN4EwqdXJ0KjZgj8en+sVc5LMsN4zMbZ+AbcZ5Td8JLrGqSmtRdgNHDef3
FRH8Q6XlIre/J+CfDXzjT3RN/ixg6ws6v++qESB4/esI1mfKIUDWmVuhLwd5
Mcdn08aIMGAnk7PxguA1LxY22v3CQTRp0GQ6G3mKouOjtgdkcHl7DUUuC3mq
/0MBb6VEwB9S7fY+k7Cek/vkj8YkgQsX98UcJ3hY4oFe3ohkwOB/pYD9NfK7
Dl2sQ76pQC5n3ep+OvL4Z8pO0javwNDkxwtZCcjXvKLvvVHIB7EChQP58YTn
bW5eEeKjgLryyZrcOOS/Y40uT5ApANw84PoiBvn5orqPxmEF4EMTX9pmJPLb
w5n3RL3egNohhh1mgcj1pptJtfdLgMUCxxunB8jf/zBTfnoYgmGprEQja+QF
2rdc/ryBgCm/JljREvl0x3KHnEAlaJmgPu67h7zR0oE7JbUScHh0uufdQv4r
+NyYLOUjOOJhtDNNDXmkZV6fdX01yKbjMezhQ24UmCr6eLkO9J+t7UlPpeK+
fIyt1oSvDfBHah4fNp3HvXRa1Cc3rhOQlCtAZNks7oorq4L74wdAuOj6YYMn
07gb2xazs3WNgMM243fEFydwT1AN+9LYNQ54PBkafVtHkbvdWCsvnQIkjpjp
KJMh3GPtciku/LNg3ES8mTTcjfvO9c0XpTNzgG5Orn/q33bcTQ4uvDC/TQXM
YIdkeify1IfHQwdNqcAj4+r2m++Qe4QubtU0p4I9N86+gi7Is0ec1XY+pILE
pCM7tbciH0x/dhJ4UYEjiaKRzdGG+9KqIlkqnQrUlKczxtSacLdYjww0GKaC
HzathoY7kAeJsd/oH6MCJXNu4S+tjbirX/by1Juigjn/ZrYMHeQpwb++nKBR
wVJ3xtb1mw24f04zMAn/TQXKi2I/rW3qcXdW6PUa5KaBQXVbw5mgGtznzg+7
5qnQQHVhx2C/FnK6l8dmD52ngatSI35Nu5ELCiyPpV6kAY4C5ZDY6GoUByQe
ODtr0IDdcDkDfXoV7s/l1YTbdWkgb+9OnT/vK5G/VZ/lxvbxFc0AX9H6d7ib
qZ3q2eJFA67Xs8BOTeTpHe++hnrTQC/TzYXl9lIUD6N1NXh8aeD3jy+UrN4S
3BeDjAs4A2jgQGP9aAf1Le5js+yqr0JooO0kV40UVyHuBmaOdy2iaUD2RVT9
p6gC3HvpC1k9sPPffzYrVl8A+R6dbaJhsTTgM8tHeihCwd3Bbf1TFBZfJg4s
9S8+yMFdRNInXjOZBmqYhx93lKTh/lfZmr3mKxqwnCI9CctOxf3I9kryT8x7
TJuW1BJT0H6wFO2KweLglkE9/zyfJNy9G8SKarC46erxpd89Kwr3bT5RX3Ox
uMwkU8FWEvYS91qrzYmdWBzvKewfm3CIwJ2NdWSPFebhl3h+nLwYivuu58Ut
zFieYK5rzMq58Rx3hmqXa6qYH5+MdhqX8MOdqnVv3R1z88B7w77Bbri/dLOK
+4a5YtXcSKfEE9w/GttGLWE+3G/yWSXYCvdKIfMCRiwv5iq2MsQG6eN+kffK
5E7Mn+e63s+lV4L/58rCIvL/5V1p6xN7SfV3cG+PHc/cgXnzw3m3hjo73K/o
vTi1gf1f0kag1FNJZ9yv5RwdGsd8bOH3/si6Z7inWNdl1GA+nnFL8u4vb9yP
LRgGxGD+KSF/u7RkAO4ntjAG3sO85KBAi97FMNz5/YtHJ7D3XHEv5ik5Kxr3
5Obvy07Y9zJ9KTx6rToW93+WV6tYMOf8Z9yVvS8e96KpgbwQLL+2WU78KWBM
xl2xyH/IHdsPCjuY2xtl0nF/UJyX/zMDO78KqcstUbm4d9GpiJ1JooE5/q27
mtPy0PMWKk2dSaQB3WPvXlZR8nHX5tD5fArLr3bkCh3VMQrubOmjNDYsjyqE
CN8aXC/EXTXyZqc6mQbav72xoZcowZ1vOfHmwec0EButVfQuAznH6s8jFOz8
RoQKHbMgleIe8FNS45Q/DdC/DzEs43+HOx1juIWkDw28eq1wmIvjA+71jMuX
3rnRgLbRyr9Plypw32eW0mViSwPGlik6xfrVuP/KPeu5epkGPhQAG2+2Rtwl
XNfGZX9QgcpPQZsvmshHeELlIrE4nDa4J5o3FDlF3ipnapYKpO+A/cFcTbj/
OCe7/AiL80H6zkPcAs24u1nKSJC+UcFlh/iEkEOtuO+NNBLvLKICKfuDE1dT
2nHn8oyoTbeiglCvqG2ZWd9w72D9qCRWOw9y7afI21T7cQ9yYhdr2TsHij67
Mf1ZHcZdXeKiv+7eGfA5yEyX5fw47t80+77dc5oEml0DVupbp3BfqqqK3pI1
BtbiOhdEwmZwVzivKTSqPAya9+5iTI+dw730U3B9u0wvGGaq8FTipOKeZTaf
KbD+BdjsYnj1ghu5WeUs23rPFzDaMnW8bx9yn9+bVR3vv4ACA18v3b+Qp8mT
dG2dvgDZw7adQ3LIeXvLWS1/dQBlueaN67eRP1bIazRcaQcR39azazOR8/lK
z9N3twK1oLMX6POQu7Q3Vz8mt4LezgzBU4XIByRHIod1W4HSuRUvz/fIn57U
exLX0QJiH0LGtw3Iw80VFTIbm0GIq+Wg7TTysIp7ClJljWBT74Ol+gEa7tGm
8gy25Dqwu5q5RJaEfHKet/mKfh1IvN2tLCiC/JRD8qcjfHUga7fwng5J5Lbp
nv7fEj4BBa2s9L5TyEUPD28OptcCxRqxzy7qyD8tjSquFFaDhUcbTWPWyJ2b
ttmJh0Pw2y9jsusBcs+UdvW33BDs3nSXqrVD/tbZ1UwuqgJcYhk/5/MYuXzD
jXmJ+HKgZv3UMcsVeQNYfVac8QE02NBnOgUg5xy8Ih9YWgK4lUjuMgnIeyPs
j26n5INhEbVMyUTkL7v5RlJK88Bagp0KTxLytsZx+WMfc0FG2WR1TzLyyF8x
Lac7ssHXy2l/GNKRVzuOrNItvwLypduTywgu47BoYPI7AyhSxgotM5D3N79T
qmTIAKRcBaHiV8jXwm44mnOngfkRE2FqJvI+ewch31NJQFdwt4xZFvLmfbls
fq4J4ET57pI+gm99ke+/FhQHap7EbeRkI9dve+nWmBcFBqqXallyCOvR8B2T
gC/B5a+n1m4RnP/sty6v1gjwI0Q2c4ngfAIUVYmFUPBkuoMknYvcQDHj7jxd
MKCacLHdJ3iX/OZ2N6EA8LufdotM8MNsPg9ZVXzATsZ/9kOC2zPq+YYaewC7
f1Q1BgluFLnfQpjRFciKF4+vEvwAY8L3AxftgV5ozCxzHuE9lLddO8ppAaJc
l27uIniJ5jq7tLAeSMz7oMBF8IiP3bc5jQCkUv71ZSd4uWxnPp+5CewbTgZb
CK63ZqbH88gWxltXm8wR1iPEcT1L8LgjVNIxXG4l+Bve084cju4w09BlMZvg
d3iqKYHXvWC4xC1pTYIb3/oU+Wjvc8gSLvdoF8EFmFksBldCoOjDalIb4bt0
T2dqCs2GQb4e0ucTBK8I1z70pCES0h6el0ol7BPzROacIb94SOUr7pYkuIDg
u0Bzh0So/9VnMYewD2/N69mtvEmC7TnVZlGvkSvfk4mwTE2BL4es3bkI+7za
p9ldyCMDKkrHmicTzp17f7+E05k8KMcSqBhHOKcemw53x9XyYXWumERwPPKQ
xdfTqZIUuDafqK0XSzgX2ur+P2UKoJyH5cjTl8j/3eVkd1frDXyqJmJACkTu
43J38rh7CUzakp5ZY0V4rrbo50E9EO5oZX+caoH8npQHeUWqEiaS3MwdzZCr
Qv2eZLtKqJw23sxqinxiZthsZrUSVh20D602QJ62AFKV6avg4rhgTNBF5PlT
O/h+ctdA+dzheT8eQtzItdWkl6uH098fxXpzI38RfehP+ON6GPU+MMtpF3Ja
40Du/qJ6uOecyoLmdkKc7+74Jiz1Gb6YE5eK3kR5ROD2UvSYcAMU8iyXrB5D
fkhwsu4QRxN0+HOD2YKQ724LHy15PNAKWzaupwJ+5O1CGTf0Cr/A0V9OF1q8
UR7fZKK/NvmiF167+ieK9wnK+yf47ZPLzIbhs3FezR4hVCdcvV/sruozBvfR
n5Y/K43qCoZrTq9Vnk/CIjPx+ny+Edz/atJKid2Yhh1eYTmHk1DdMmG+Q22O
bg7W1sbaTq+hOqfALdTHpngecoiPNoX2I0+pqWjo+jAP9z1g+3qsEvkM63yr
/Md5OGubRH/PG3kf93ae6cZ5uPkmNDOUA7mmN7MzdWge5uZduU87+BX3S27W
NrEsVCjE8lZmx4UO3Od+rwXY61Jh2ohSRM0GqvdktzPLzn3H3m/dMauyMuQr
46oj9T1UKLd5hi3HCbm2ullx3AAVOs1cG7FbQfUkY/NQp/gEFU5/7mZPnm/A
nZ4rebh7GVvP5PH1kJ563OPmD4mFctJgE9nbSDG/BuWFeOnay8rYfvK4k3/F
EvmgeU4Z+zkarFeaEzYWR/7vywFYe4EGZToz2mxSUZ0sa/P3BI8GDR5k+nn2
ErkKxX8/kHD1Gg1GN72+v+FaiXu2cRbvPuy8PThD/ro9FNXzx0z/rpzwpUFB
Jr23v3ciZ6hzIlv402DLxRvhE+HoXuCuHRc8hdUHpyvFa1+Ti1He1LrY2xBE
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
            
            "]]}}}, {{{}, {}, {
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Dashing[{Small, Small}], 
           Line3DBox[CompressedData["
1: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
6j11u43q//9/Z7cYD//vO3vl/wHesGTi
            "]]}}}}, {{{
          RGBColor[
          0.8269766541666667, 0.3710841570833333, 0.3332304609583333], 
          PointSize[0.035], 
          Point3DBox[{0, 0, 1}]}, {
          RGBColor[
          0.8259019750000001, 0.36717784749999993`, 0.32908903524999994`], 
          PointSize[0.015], 
          
          Point3DBox[{0.001891828056697819, -0.015644526686925578`, 
           0.9998758271762279}]}, {
          RGBColor[
          0.8248272958333334, 0.36327153791666666`, 0.3249476095416666], 
          PointSize[0.015], 
          
          Point3DBox[{0.013324347399282484`, -0.058485856324716395`, 
           0.9981993119494462}]}, {
          RGBColor[
          0.8237526166666667, 0.3593652283333333, 0.32080618383333326`], 
          PointSize[0.015], 
          
          Point3DBox[{0.041296219259756246`, -0.11693063621971278`, 
           0.9922811338467052}]}, {
          RGBColor[
          0.8226779375000001, 0.35545891874999996`, 0.31666475812499995`], 
          PointSize[0.015], 
          Point3DBox[{0.08818145020876209, -0.1741175775480398, 
           0.9807686276731543}]}, {
          RGBColor[
          0.8216032583333334, 0.35155260916666664`, 0.31252333241666663`], 
          PointSize[0.015], 
          
          Point3DBox[{0.15061765406139688`, -0.21169203083554036`, 
           0.9656608133116756}]}, {
          RGBColor[
          0.8205285791666667, 0.3476462995833333, 0.30838190670833326`], 
          PointSize[0.015], 
          
          Point3DBox[{0.2197295758827424, -0.21415792572357498`, 
           0.9517643071328991}]}, {
          RGBColor[0.8194539000000001, 0.34373999, 0.30424048099999995`], 
          PointSize[0.015], 
          
          Point3DBox[{0.2826299881451781, -0.1723047161610572, 
           0.9436267135841985}]}, {
          RGBColor[
          0.8183792208333334, 0.3398336804166666, 0.3000990552916666], 
          PointSize[0.015], 
          
          Point3DBox[{0.32475150634958805`, -0.08496712545224132, 
           0.9419750775450786}]}, {
          RGBColor[
          0.8173045416666667, 0.3359273708333333, 0.29595762958333327`], 
          PointSize[0.015], 
          
          Point3DBox[{0.33252627768974596`, 0.04043676101427527, 
           0.9422266940627805}]}, {
          RGBColor[
          0.8162298625000001, 0.33202106124999997`, 0.29181620387499996`], 
          PointSize[0.015], 
          
          Point3DBox[{0.29612399233751086`, 0.18806148851412935`, 
           0.9364525923398067}]}, {
          RGBColor[
          0.8151551833333334, 0.32811475166666665`, 0.28767477816666664`], 
          PointSize[0.015], 
          
          Point3DBox[{0.2119716377745236, 0.33500298756920016`, 
           0.9180637358587349}]}, {
          RGBColor[
          0.8140805041666667, 0.3242084420833333, 0.2835333524583333], 
          PointSize[0.015], 
          
          Point3DBox[{0.0844963690606069, 0.45489532009644346`, 
           0.8865272761567623}]}, {
          RGBColor[
          0.8130058250000001, 0.32030213249999995`, 0.27939192674999996`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.07363072628606557, 0.5234847224315151, 
           0.8488476079529155}]}, {
          RGBColor[
          0.8119311458333334, 0.3163958229166666, 0.27525050104166665`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.24307324194208368`, 0.5240298052706615, 
           0.8162770131761387}]}, {
          RGBColor[
          0.8108564666666667, 0.3124895133333333, 0.2711090753333333], 
          PointSize[0.015], 
          
          Point3DBox[{-0.4007771015465678, 0.4502231479053009, 
           0.7979203168024823}]}, {
          RGBColor[0.8097817875, 0.30858320375, 0.26696764962499997`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.523392405167586, 0.306394527956181, 
           0.7950992286824324}]}, {
          RGBColor[
          0.8087071083333334, 0.30467689416666666`, 0.26282622391666666`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.5905452967895066, 0.10667010253145542`, 
           0.7999235848915333}]}, {
          RGBColor[
          0.8076324291666667, 0.3007705845833333, 0.2586847982083333], 
          PointSize[0.015], 
          
          Point3DBox[{-0.5878586968119017, -0.12572634471267166`, 
           0.7991339304696071}]}, {
          RGBColor[0.8065577500000001, 0.29686427499999996`, 0.2545433725], 
          PointSize[0.015], 
          
          Point3DBox[{-0.5096676770228483, -0.35996843220123476`, 
           0.7814483903731062}]}, {
          RGBColor[
          0.8054830708333334, 0.2929579654166667, 0.25040194679166666`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.3608719018286637, -0.5617292380140438, 
           0.7444674160973902}]}, {
          RGBColor[
          0.8044083916666667, 0.2890516558333333, 0.2462605210833333], 
          PointSize[0.015], 
          
          Point3DBox[{-0.1570321372618308, -0.6998039734337875, 
           0.6968610382517193}]}, {
          RGBColor[0.8033337125, 0.28514534625, 0.24211909537499998`], 
          PointSize[0.015], 
          
          Point3DBox[{0.0776951173116967, -0.7524489403230905, 
           0.6540520322975687}]}, {
          RGBColor[
          0.8022590333333334, 0.2812390366666666, 0.2379776696666666], 
          PointSize[0.015], 
          
          Point3DBox[{0.3141746784833392, -0.7104442096295733, 
           0.6297327182255188}]}, {
          RGBColor[
          0.8011843541666667, 0.27733272708333334`, 0.2338362439583333], 
          PointSize[0.015], 
          
          Point3DBox[{0.5222998342078007, -0.5767058031567419, 
           0.6281825370000669}]}, {
          RGBColor[0.8001096750000001, 0.2734264175, 0.22969481825], 
          PointSize[0.015], 
          
          Point3DBox[{0.6746393706731204, -0.3648478875283685, 
           0.6416757269087421}]}, {
          RGBColor[
          0.7990349958333334, 0.26952010791666664`, 0.22555339254166662`], 
          PointSize[0.015], 
          
          Point3DBox[{0.7497329144976708, -0.09850131729599332, 
           0.6543684339955451}]}, {
          RGBColor[
          0.7979603166666667, 0.2656137983333333, 0.2214119668333333], 
          PointSize[0.015], 
          
          Point3DBox[{0.7351851771194872, 0.18961293447739175`, 
           0.6508069532685248}]}, {
          RGBColor[0.7968856375, 0.26170748875, 0.21727054112499994`], 
          PointSize[0.015], 
          
          Point3DBox[{0.6300854703364526, 0.4612859699459596, 
           0.624665953932104}]}, {
          RGBColor[
          0.7958109583333334, 0.25780117916666667`, 0.21312911541666663`], 
          PointSize[0.015], 
          
          Point3DBox[{0.4457401259547828, 0.6795576490890728, 
           0.5826809947804594}]}, {
          RGBColor[
          0.7947362791666667, 0.25389486958333335`, 0.2089876897083333], 
          PointSize[0.015], 
          
          Point3DBox[{0.204104435177347, 0.8157531260621708, 
           0.5411914789247254}]}, {
          RGBColor[0.7936616, 0.24998856, 0.204846264], 
          PointSize[0.015], 
          
          Point3DBox[{-0.06558825491675846, 0.8533299468437433, 
           0.5172293327302958}]}, {
          RGBColor[
          0.7925869208333334, 0.24608225041666668`, 0.20070483829166663`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.3307932279018606, 0.7879631805723654, 
           0.5193167303645705}]}, {
          RGBColor[
          0.7915122416666667, 0.24217594083333333`, 0.19656341258333332`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.5593710894287858, 0.6263774872276539, 
           0.5429136467299587}]}, {
          RGBColor[0.7904375625, 0.23826963125, 0.192421986875], 
          PointSize[0.015], 
          
          Point3DBox[{-0.7230685403534485, 0.3861895036202029, 
           0.5727386430517095}]}, {
          RGBColor[
          0.7893628833333334, 0.23436332166666668`, 0.18828056116666664`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.8010470639641479, 0.09601014063887608, 
           0.5908516346841405}]}, {
          RGBColor[
          0.7882882041666667, 0.23045701208333333`, 0.18413913545833333`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.7831073071911072, -0.20696808292761587`, 
           0.5864359795179346}]}, {
          RGBColor[0.787213525, 0.2265507025, 0.17999770975], 
          PointSize[0.015], 
          
          Point3DBox[{-0.6715342053259457, -0.48308161541105255`, 
           0.5618487019911123}]}, {
          RGBColor[
          0.7861388458333334, 0.22264439291666666`, 0.17585628404166664`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.48068373245703666`, -0.6976105182358316, 
           0.5313028460284265}]}, {
          RGBColor[
          0.7850641666666667, 0.21873808333333333`, 0.17171485833333333`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.23451313414618852`, -0.8257416967580652, 
           0.5129856139776656}]}, {
          RGBColor[0.7839894875, 0.21483177374999998`, 0.16757343262499996`], 
          
          PointSize[0.015], 
          
          Point3DBox[{0.03686754259055856, -0.85382931643229, 
           0.5192458788513403}]}, {
          RGBColor[
          0.7829148083333334, 0.21092546416666666`, 0.16343200691666665`], 
          PointSize[0.015], 
          
          Point3DBox[{0.3007177911962492, -0.7790610860019721, 
           0.5501205634544808}]}, {
          RGBColor[
          0.7818401291666667, 0.20701915458333334`, 0.15929058120833334`], 
          PointSize[0.015], 
          
          Point3DBox[{0.5251869328567459, -0.6099933789946564, 
           0.5933689940831122}]}, {
          RGBColor[0.78076545, 0.20311284500000001`, 0.15514915549999997`], 
          PointSize[0.015], 
          
          Point3DBox[{0.6831406364951537, -0.3676211548140098, 
           0.631009950240255}]}, {
          RGBColor[
          0.7796907708333334, 0.19920653541666666`, 0.15100772979166666`], 
          PointSize[0.015], 
          
          Point3DBox[{0.7560448259214296, -0.08420708476869215, 
           0.6490804172613684}]}, {
          RGBColor[
          0.7786160916666667, 0.19530022583333334`, 0.14686630408333334`], 
          PointSize[0.015], 
          
          Point3DBox[{0.7368380039357629, 0.2018861039809932, 
           0.6452222539368391}]}, {
          RGBColor[0.7775414125, 0.19139391625, 0.14272487837499997`], 
          PointSize[0.015], 
          
          Point3DBox[{0.6307103049128014, 0.45358317923758307`, 
           0.629656105179268}]}, {
          RGBColor[
          0.7764667333333334, 0.18748760666666667`, 0.13858345266666666`], 
          PointSize[0.015], 
          
          Point3DBox[{0.4536762063470878, 0.6409675793621538, 
           0.6191433291259252}]}, {
          RGBColor[
          0.7753920541666667, 0.18358129708333334`, 0.13444202695833335`], 
          PointSize[0.015], 
          
          Point3DBox[{0.2298082816370145, 0.7437672082423568, 
           0.6276929931378958}]}, {
          RGBColor[0.774317375, 0.1796749875, 0.13030060124999998`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.011951553655660863`, 0.7519050545150648, 
           0.659163067351251}]}, {
          RGBColor[
          0.7732426958333334, 0.17576867791666664`, 0.12615917554166667`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.24118214311796315`, 0.6664508183395027, 
           0.7054604741412736}]}, {
          RGBColor[
          0.7721680166666667, 0.17186236833333332`, 0.12201774983333331`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.4297876747336442, 0.501025818517229, 
           0.7511695439953519}]}, {
          RGBColor[0.7710933375, 0.16795605875, 0.117876324125], 
          PointSize[0.015], 
          
          Point3DBox[{-0.5560098499391042, 0.28126308661853827`, 
           0.7821407308640207}]}, {
          RGBColor[
          0.7700186583333334, 0.16404974916666668`, 0.11373489841666666`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.6076717190385132, 0.0404707230838747, 
           0.7931564804336177}]}, {
          RGBColor[
          0.7689439791666667, 0.16014343958333332`, 0.10959347270833332`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.5835592387287141, -0.18723034393272786`, 
           0.7901920103400142}]}, {
          RGBColor[0.7678693, 0.15623713, 0.105452047], 
          PointSize[0.015], 
          
          Point3DBox[{-0.4926585845040621, -0.37293605295532517`, 
           0.7862609105891971}]}, {
          RGBColor[
          0.7667946208333334, 0.15233082041666665`, 0.10131062129166665`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.35191452260326644`, -0.49608449528845844`, 
           0.7937608848483946}]}, {
          RGBColor[
          0.7657199416666667, 0.14842451083333333`, 0.09716919558333333], 
          PointSize[0.015], 
          
          Point3DBox[{-0.18337184024989855`, -0.5454769300571138, 
           0.8178200822789987}]}, {
          RGBColor[0.7646452625, 0.14451820125, 0.093027769875], 
          PointSize[0.015], 
          
          Point3DBox[{-0.011064002944192186`, -0.5200510968402614, 
           0.8540634897442276}]}, {
          RGBColor[
          0.7635705833333333, 0.14061189166666666`, 0.08888634416666666], 
          PointSize[0.015], 
          
          Point3DBox[{0.14236905896286317`, -0.42965028257589755`, 
           0.8917015676404725}]}, {
          RGBColor[
          0.7624959041666667, 0.13670558208333333`, 0.08474491845833332], 
          PointSize[0.015], 
          
          Point3DBox[{0.25909139570630646`, -0.29411847365273747`, 
           0.9199815064049596}]}, {
          RGBColor[0.761421225, 0.1327992725, 0.08060349274999999], 
          PointSize[0.015], 
          
          Point3DBox[{0.3287227926974028, -0.13941926634966667`, 
           0.9340790082919849}]}, {
          RGBColor[
          0.7603465458333333, 0.12889296291666666`, 0.07646206704166666], 
          PointSize[0.015], 
          
          Point3DBox[{0.34938428934424426`, 0.008181047124465747, 
           0.9369438023848395}]}, {
          RGBColor[
          0.7592718666666667, 0.12498665333333334`, 0.07232064133333332], 
          PointSize[0.015], 
          
          Point3DBox[{0.3269242872773073, 0.12727754873299887`, 
           0.9364405672421185}]}, {
          RGBColor[0.7581971875, 0.12108034374999999`, 0.068179215625], 
          PointSize[0.015], 
          
          Point3DBox[{0.27284803176246647`, 0.20417673557346733`, 
           0.9401413788435796}]}, {
          RGBColor[
          0.7571225083333333, 0.11717403416666666`, 0.06403778991666666], 
          PointSize[0.015], 
          
          Point3DBox[{0.20167696385489894`, 0.2337777896830554, 
           0.9511437048633459}]}, {
          RGBColor[
          0.7560478291666667, 0.11326772458333334`, 0.05989636420833333], 
          PointSize[0.015], 
          
          Point3DBox[{0.12818900674397532`, 0.21955715190303554`, 
           0.9671412697213461}]}, {
          RGBColor[0.75497315, 0.10936141499999999`, 0.0557549385], 
          PointSize[0.015], 
          
          Point3DBox[{0.06476987032253384, 0.17281322564717788`, 
           0.9828226965937534}]}, {
          RGBColor[
          0.7538984708333333, 0.10545510541666667`, 0.05161351279166666], 
          PointSize[0.015], 
          
          Point3DBox[{0.01922051535038988, 0.11045439636001747`, 
           0.9936953245911985}]}, {
          RGBColor[
          0.7528237916666667, 0.10154879583333333`, 0.04747208708333333], 
          PointSize[0.015], 
          
          Point3DBox[{-0.0064531273536087164`, 0.051142047908063676`, 
           0.9986705403100286}]}, {
          RGBColor[0.7517491125, 0.09764248625, 0.043330661374999996`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.015890585358127558`, 0.010888940956734696`, 
           0.9998144429151911}]}, {
          RGBColor[
          0.7506744333333333, 0.09373617666666667, 0.03918923566666666], 
          PointSize[0.015], 
          
          Point3DBox[{-0.01694396160915576, -0.0003714395720887378, 
           0.9998563717842822}]}, {
          RGBColor[
          0.7495997541666667, 0.08982986708333332, 0.03504780995833333], 
          PointSize[0.015], 
          
          Point3DBox[{-0.019410133483273646`, 0.019443058673277478`, 
           0.9996225358542026}]}, {
          RGBColor[0.748525075, 0.0859235575, 0.03090638425], 
          PointSize[0.015], 
          
          Point3DBox[{-0.03244311688830346, 0.06428727951117241, 
           0.9974039251274388}]}, {
          RGBColor[
          0.7474503958333333, 0.08201724791666666, 0.026764958541666665`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.06209523190052132, 0.12108742967026906`, 
           0.9906977422761524}]}, {
          RGBColor[
          0.7463757166666667, 0.07811093833333332, 0.02262353283333333], 
          PointSize[0.015], 
          
          Point3DBox[{-0.10945728082377931`, 0.17241637283353006`, 
           0.97892374475931}]}, {
          RGBColor[0.7453010375, 0.07420462875, 0.018482107125], 
          PointSize[0.015], 
          
          Point3DBox[{-0.1698875036658654, 0.20051662636279238`, 
           0.9648478214984278}]}, {
          RGBColor[
          0.7442263583333333, 0.07029831916666666, 0.014340681416666666`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.23359095650387418`, 0.19148518610773224`, 
           0.9532936003880912}]}, {
          RGBColor[
          0.7431516791666667, 0.06639200958333333, 0.010199255708333334`], 
          PointSize[0.015], 
          
          Point3DBox[{-0.2873684476892853, 0.13824305239698292`, 
           0.9477912395335871}]}, {
          RGBColor[0.742077, 0.0624857, 0.00605783], 
          PointSize[0.035], 
          
          Point3DBox[{-0.3072590473967495, 0.09117608017716569, 
           0.9472480140894288}]}}}, {{{
          RGBColor[
           NCache[
            Rational[16, 51], 0.3137254901960784], 0.6582085294117647, 
           NCache[
            Rational[16, 51], 0.3137254901960784]], 
          PointSize[0.035], 
          Point3DBox[{0, 0, 1}]}, {
          RGBColor[
           NCache[
            Rational[5, 17], 0.29411764705882354`], 0.6484430588235294, 
           NCache[
            Rational[5, 17], 0.29411764705882354`]], 
          PointSize[0.015], 
          Point3DBox[{0., -0.19509032201612828`, 0.9807852804032305}]}, {
          RGBColor[
           NCache[
            Rational[14, 51], 0.27450980392156865`], 0.6386775882352941, 
           NCache[
            Rational[14, 51], 0.27450980392156865`]], 
          PointSize[0.015], 
          Point3DBox[{0., -0.38268343236508984`, 0.923879532511287}]}, {
          RGBColor[
           NCache[
            Rational[13, 51], 0.2549019607843137], 0.6289121176470588, 
           NCache[
            Rational[13, 51], 0.2549019607843137]], 
          PointSize[0.015], 
          Point3DBox[{0., -0.5555702330196023, 0.8314696123025453}]}, {
          RGBColor[
           NCache[
            Rational[4, 17], 0.23529411764705882`], 0.6191466470588235, 
           NCache[
            Rational[4, 17], 0.23529411764705882`]], 
          PointSize[0.015], 
          Point3DBox[{0., -0.7071067811865477, 0.7071067811865477}]}, {
          RGBColor[
           NCache[
            Rational[11, 51], 0.21568627450980393`], 0.6093811764705882, 
           NCache[
            Rational[11, 51], 0.21568627450980393`]], 
          PointSize[0.015], 
          Point3DBox[{0., -0.8314696123025456, 0.5555702330196023}]}, {
          RGBColor[
           NCache[
            Rational[10, 51], 0.19607843137254902`], 0.5996157058823529, 
           NCache[
            Rational[10, 51], 0.19607843137254902`]], 
          PointSize[0.015], 
          Point3DBox[{0., -0.9238795325112872, 0.3826834323650897}]}, {
          RGBColor[
           NCache[
            Rational[3, 17], 0.17647058823529413`], 0.5898502352941176, 
           NCache[
            Rational[3, 17], 0.17647058823529413`]], 
          PointSize[0.015], 
          Point3DBox[{0., -0.980785280403231, 0.1950903220161282}]}, {
          RGBColor[
           NCache[
            Rational[8, 51], 0.1568627450980392], 0.5800847647058823, 
           NCache[
            Rational[8, 51], 0.1568627450980392]], 
          PointSize[0.015], 
          Point3DBox[{0., -1.0000000000000007`, -1.1102230246251565`*^-16}]}, {
          RGBColor[
           NCache[
            Rational[7, 51], 0.13725490196078433`], 0.570319294117647, 
           NCache[
            Rational[7, 51], 0.13725490196078433`]], 
          PointSize[0.015], 
          Point3DBox[{0., -0.9807852804032312, -0.19509032201612853`}]}, {
          RGBColor[
           NCache[
            Rational[2, 17], 0.11764705882352941`], 0.5605538235294117, 
           NCache[
            Rational[2, 17], 0.11764705882352941`]], 
          PointSize[0.015], 
          Point3DBox[{0., -0.9238795325112876, -0.38268343236509006`}]}, {
          RGBColor[
           NCache[
            Rational[5, 51], 0.09803921568627451], 0.5507883529411765, 
           NCache[
            Rational[5, 51], 0.09803921568627451]], 
          PointSize[0.015], 
          Point3DBox[{0., -0.8314696123025461, -0.5555702330196026}]}, {
          RGBColor[
           NCache[
            Rational[4, 51], 0.0784313725490196], 0.5410228823529412, 
           NCache[
            Rational[4, 51], 0.0784313725490196]], 
          PointSize[0.015], 
          Point3DBox[{0., -0.7071067811865483, -0.707106781186548}]}, {
          RGBColor[
           NCache[
            Rational[1, 17], 0.058823529411764705`], 0.5312574117647059, 
           NCache[
            Rational[1, 17], 0.058823529411764705`]], 
          PointSize[0.015], 
          Point3DBox[{0., -0.555570233019603, -0.831469612302546}]}, {
          RGBColor[
           NCache[
            Rational[2, 51], 0.0392156862745098], 0.5214919411764706, 
           NCache[
            Rational[2, 51], 0.0392156862745098]], 
          PointSize[0.015], 
          Point3DBox[{0., -0.3826834323650904, -0.9238795325112877}]}, {
          RGBColor[
           NCache[
            Rational[1, 51], 0.0196078431372549], 0.5117264705882353, 
           NCache[
            Rational[1, 51], 0.0196078431372549]], 
          PointSize[0.015], 
          Point3DBox[{0., -0.1950903220161287, -0.9807852804032317}]}, {
          RGBColor[0, 0.501961, 0], 
          PointSize[0.035], 
          
          Point3DBox[{
           0., -1.9428902930940252`*^-16, -1.0000000000000013`}]}}}}, {
      ViewAngle -> 0.34, ImageSize -> 350, Boxed -> False}], 
     FormBox[
      FormBox[
       TemplateBox[{"\"First\"", "\"Second\""}, "LineLegend", 
        DisplayFunction -> (FormBox[
          StyleBox[
           StyleBox[
            PaneBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.09], 
                    Dashing[{0, Small}], 
                    RGBColor[0.742077, 0.0624857, 0.00605783]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.09], 
                    Dashing[{0, Small}], 
                    RGBColor[0.742077, 0.0624857, 0.00605783]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {40, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.09], 
                    Dashing[{0, Small}], 
                    RGBColor[0, 0.501961, 0]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.09], 
                    Dashing[{0, Small}], 
                    RGBColor[0, 0.501961, 0]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
              "Grid"], Alignment -> Left, AppearanceElements -> None, 
             ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
             "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
           FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
           False], TraditionalForm]& ), 
        InterpretationFunction :> (RowBox[{"LineLegend", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
                    RowBox[{"Dashing", "[", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "Small"}], "}"}], "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.742077, 0.0624857, 0.00605783], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.494718, 0.04165713333333333, 0.0040385533333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.742077, 0.0624857, 0.00605783]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.742077, 0.0624857, 0.00605783]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.742077, 0.0624857, 0.00605783], Editable -> 
                    False, Selectable -> False]}], "]"}], ",", 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
                    RowBox[{"Dashing", "[", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "Small"}], "}"}], "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0.501961, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0.3346406666666667, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "RGBColor[0, 0.501961, 0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0.501961, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0.501961, 0], Editable -> False, Selectable -> 
                    False]}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
       TraditionalForm], TraditionalForm]}, "Legended", 
    DisplayFunction -> (GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ), 
    InterpretationFunction -> (RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& ), Editable -> True],
   TemplateBox[{
     Graphics3DBox[{{{
         Opacity[0.2], 
         SphereBox[{0, 0, 0}, 1], 
         Opacity[0.5], 
         GrayLevel[0], 
         Thickness[Large], 
         Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
         Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
         Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], 
         Opacity[1], 
         GrayLevel[0], 
         Thickness[Large], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|+Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {0, 0, 1.15}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|-Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {0, 0, -1.15}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|+X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {1.15, 0, 0}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|-X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {-1.15, 0, 0}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|+Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {0, 1.15, 0}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|-Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {0, -1.15, 0}]}, {{{}, {}, {
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Dashing[{Small, Small}], 
           Line3DBox[CompressedData["
1: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
aZ3nLndR/f//7+xmU6H/fWev/J//H/XtZOI=
            "]]}}}, {{{}, {}, {
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Dashing[{Small, Small}], 
           Line3DBox[CompressedData["
1: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
d3iqKYHXvWC4xC1pTYIb3/oU+Wjvc8gSLvdoF8EFmFksBldCoOjDalIb4bt0
T2dqCs2GQb4e0ucTBK8I1z70pCES0h6el0ol7BPzROacIb94SOUr7pYkuIDg
u0Bzh0So/9VnMYewD2/N69mtvEmC7TnVZlGvkSvfk4mwTE2BL4es3bkI+7za
p9ldyCMDKkrHmicTzp17f7+E05k8KMcSqBhHOKcemw53x9XyYXWumERwPPKQ
xdfTqZIUuDafqK0XSzgX2ur+P2UKoJyH5cjTl8j/3eVkd1frDXyqJmJACkTu
43J38rh7CUzakp5ZY0V4rrbo50E9EO5oZX+caoH8npQHeUWqEiaS3MwdzZCr
Qv2eZLtKqJw23sxqinxiZthsZrUSVh20D602QJ62AFKV6avg4rhgTNBF5PlT
O/h+ctdA+dzheT8eQtzItdWkl6uH098fxXpzI38RfehP+ON6GPU+MMtpF3Ja
40Du/qJ6uOecyoLmdkKc7+74Jiz1Gb6YE5eK3kR5ROD2UvSYcAMU8iyXrB5D
fkhwsu4QRxN0+HOD2YKQ724LHy15PNAKWzaupwJ+5O1CGTf0Cr/A0V9OF1q8
UR7fZKK/NvmiF167+ieK9wnK+yf47ZPLzIbhs3FezR4hVCdcvV/sruozBvfR
n5Y/K43qCoZrTq9Vnk/CIjPx+ny+Edz/atJKid2Yhh1eYTmHk1DdMmG+Q22O
bg7W1sbaTq+hOqfALdTHpngecoiPNoX2I0+pqWjo+jAP9z1g+3qsEvkM63yr
/Md5OGubRH/PG3kf93ae6cZ5uPkmNDOUA7mmN7MzdWge5uZduU87+BX3S27W
NrEsVCjE8lZmx4UO3Od+rwXY61Jh2ohSRM0GqvdktzPLzn3H3m/dMauyMuQr
46oj9T1UKLd5hi3HCbm2ullx3AAVOs1cG7FbQfUkY/NQp/gEFU5/7mZPnm/A
nZ4rebh7GVvP5PH1kJ563OPmD4mFctJgE9nbSDG/BuWFeOnay8rYfvK4k3/F
EvmgeU4Z+zkarFeaEzYWR/7vywFYe4EGZToz2mxSUZ0sa/P3BI8GDR5k+nn2
ErkKxX8/kHD1Gg1GN72+v+FaiXu2cRbvPuy8PThD/ro9FNXzx0z/rpzwpUFB
Jr23v3ciZ6hzIlv402DLxRvhE+HoXuCuHRc8hdUHpyvFa1+Ti1He1LrY2xBE
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
            
            "]]}}}, {{{}, {}, {
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Dashing[{Small, Small}], 
           Line3DBox[CompressedData["
1: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
6j11u43q//9/Z7cYD//vO3vl/wHesGTi
            "]]}}}}, 
       GraphicsComplex3DBox[CompressedData["
1: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
vayAW1T4H6omD8s=
        "], {{{}, {}, {
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Thickness[0.01], 
           Line3DBox[CompressedData["
1:eJwl2Hf8juUbxvFvIVuyZwiRUUp+SkpWQ5Q0SMMoI3tvIWkZlZWi7FF2ZFX2
yN7Ze8ve2+99vvrj6DyOz3lefZ/nfu77uu6XPHWbV2t2T0JCwuXECQlR2yVK
SHjp3oSEMfJHQE21CLZFXa6fQT2qP0e9V+2pvqV/MOb1t/O/4pNj3vpm6vNY
Qf45Pi1fRL+42fF8R36Q3lV5EF3B/sYOYy8Qm9Aee5mpJ6+Q69GTNAHvhA/G
r8mDCUro4D+V8Pr433J9KkG/4J3x7/Hr8vfkIyV0xF/BG+Ar5YzgMTlRMHmH
/kR+hX5zvbLyI3wZ/gF+iVpUv39cA/lf9X/W/cp3wX+Rh5j/UC2B3dArxN/S
y0JD5Kv4Sv6IuRcpCdYJq4w1lFfJDWknNgn7GytEJbGJWFfsB/mmXNj/+7ac
NZh8TX8Vf1S/s16V+I35Knwufp36jP5PanP5gnqfdZ35KvjHZlfLmfDjcuJg
8i79yfxK/RZ65eTC/PN8On6p+qj+ALWefEp9yrpJ/Cf4j2Y/imsl38KL8Hfw
bNGTr+Or+WPmXqakWBfsVayRvEZuRE/TZLwbPhS/LQ+lZNQVfw1vjK+VG1Mp
moJ3x4fhd+RhlJw+waviTfB1cmaf6YScJJi8W38Kv0q/pV55eWc8I3JZNb28
TH3MzEC1vvyMdVPVHnGNzd2Vi+rdlbMHk2/or+GP61eiFFg37HWsqbxezmLN
Sfm+YPIe/an8av2iVBqbhn2K/SzXM18yHgj+0cT/PRzz1Rz6vdX35aPqz1o3
+bX4b/F9zXdRX43ngn+Vz82X1k9ptjtfjY+NY4PcjPZi07A18bfoWWw61hMb
Lt9Dj8Ueg+XE+vAf8MPN3Yp7EJsR389cV/U1bK9aWX5NzSOvV5+N76a2kFNZ
20N9A2tubqOcVe9fOWkweZ/+dH5t/P3Yg7DfsM+wEbG/0AgsNX2Kv4m3wDbJ
LagMzcB74SPxRDQSS0M98bfwlthmuSXtx37D1mHF4lnAZmKfY6Pk+vEMyImj
H3sov0B9UL+vWks+po6y7nZ8Z3xmfCfzn6hV45nkq/IP8c/p32/2M/5tvpXe
Fjmb/ik5WTD5gP4Mfr3+41ROPwNWDCur/zv/BT9ar4He0/IONUnMq4nkhbFf
mOmn1pZHW3dH3YCdivuEXtfLi5XB0ur34qvzrfW2yq2pHM3Cv4xzBr+PxmB3
sY3Y6fjN6QHsc6wG1kZ+N/ZZ+R88O38aT06f8W/jbfCD6kxsCrbBmlZqBWyX
+oRcXs0oL1cfj7NHbSCXt3a2+hU2NvYaGpvw3wGxCTsT15zSQV+YewdrK2+T
21IFmoN/jY/Dk9E4LD19idfE22Hb44ylijQX742Px5PT+HhU/b3N2Nm4lpQB
+8rcu1h7+b3YU+O3wXPwZ/C5agq1l1pd75DaXv8Q/zu+0brWWEW5OF+Bz8Sv
iGsS56faUD6tvmDdPL4P/qs8wXxDtRSWgn+CT8zn1p9g9l55C39OrxplxL7W
fw/rIO+M85hepD/wvnEe4inplzhTqDf+Pt4R2xXnMR3GZmGbsCfpJexPrF98
LjkVFY/7E8sTLLY3eSv/u3pev5v6uv4+9Y34fGq+uF/jnST2JbWlnNnaPuoH
WCdzu+WcemdjvwsmH9GfzW/WLxHnEfYX9g02UU5NE2OPpr54LbwztifOUapE
8/Fv8Ul4GpoUt5e/8w92QX6TsmL9zNXGush75QfNnJNT0ed8jXivwI+qc7Cp
8RuYbRO/H7Y7zlS5opo53qfU4vHeo34ce7q1C9TvsMnmPo7zX74/rnWc/fyi
2F/0v1HryMfVydYlUbfhF82+RW/I+fXLxrmt/w1fh++qty/OX6pMC/H+8Vzi
aWlKPMP0LV4X/wTbH+cvVaFF+ID4brEP0NS43+k7/EO8G3ZAzhW/tZw6mHxM
fy6/Vb+t3otySf4FPku8Y6lPxjuX2kg+E+ecdYv5gfFbytPMN1JLY+ni9+aT
8nn1p5m9T97OX9J7m3Ji/fU/wrrLB+OMpOPYPOwf7KnY07Al2CBsupyepmNJ
/f92YJfl6vQgNsBcPayH/H68T8hb1UN6udULevPUNOoX6jv6h9Ue+if4P/Bt
1j5NL+JZsRJYVf2l/OA462N/of/pJ8PyBYv3Jnknf0WvRtyX8sP65bBc+gP5
+rFP4p/qf6AWi31ZPayfR72o/4d6v/qlWjPeS/ROqn9i260rFXsctgz7Ps7/
2D9oRnxHGoQ3wHtiR+K8pWq0HB8S5yKeiWbG36TBeMM4D7CjcSbSv9hf2A7s
mbhfsRXYD7FPyJmppM+XHMsfTD+5vIu/qtedrxb7fdzvfIE4o+K9L94f1Fby
xXhWrPue/zj2f7mX+VpxxsR5rvcQfynOxNin5VP4fH6nudJxjbG/sR+xWXIW
moWlsG43dk2uGfebXNBcBSyv/hC+UewLerVjP5e3qcf18qqX9f5UH1C/Ut+N
dxG90/Hege2y7tn4bthKbCg2O/Yhmo2ltGYPdj3OX8qH/WCucdx38gk5n5kr
crpg8pl4V+B367fTeyneU2IP57Pxq2J/0v9BbSyfjfPbulX8MHyO2cbxridn
i2cnzjf+4eiZSyXv5W/EeUj5sR/1m8S9Jp+MM5eq02r8pzgj8ew0F3uYhuJN
45pg/8YZSzVoDf5zPFt4DpqHpfb39mE341mkAtgwc82wr+VTcn4zV+X0weSz
sYfye/Tb670c70RxbvDZ+dVqSf0f1SbyuXiGrVvLD48zQv7DfBP1OSxnPMt8
Sr5APFtm08j7+VvxDMbeIT+iXxEbybfmC5r7SW0e7xlYb3N14jzAtsc7VFwP
9Zp+Buotn9NbzO81+3zcd9g6bETcS7E/0Z/Y/dYdwG7HvU6PYD+ba4H1kc/I
BcxclzMGk8/rL+H36XfQqxRnB1+Jz8GvUZ/SH6o2lc/HPWvden4k/pfZXLF3
4Kni+wXTTysf5O/Ec0CFsOH6LbG+8tk4l+k92oCPwufjuWk+VphG4K3wfti5
OIfpfdqIj8YX4HloAVaERuKt44zEzsfZRxewpdh+rFz8LtgmbAy2UG7qc5aR
H4r9iE8d1zp+N/1v1bryCXWhdQ/Efh/7gXrXfI94j9HfH2dy7M1qIXlTnPvm
Rqlt5EtqUetH8W3iPU3+1nzdOPuwC3oF+Rtx7dRMcc+q7+kdiVn9i/yyOO/i
N7a2o/oKVp5/hc/JP61fy+xmfiy/SC8vLcIepdF4W/w77GKc3VSbtuDj8MWx
n9Bi7DEag7fD+2OX4kylOrQVH48viWedlmDFaCzeHh+AXZYf8bluypmDyZf0
l8dZG/eGmU5qZWyPWkGurD4or1VLmRumNov3EWv/USdgS809HHt0nLVYoWD6
6eKs4+MfqOrqP86O0+8gD5SvxDlJl7EV2CGsIn2IbcN+wZbFXhL7b5yTWOG4
VvyH/El1mdn06pHYk9V71E/VN/UPxJy176iF5c3xrqM/Wm2b6L9/z3vC+v8D
rbeAWg==
            "], VertexColors -> Automatic]}}}, 
        VertexColors -> CompressedData["
1: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
bHqzyz5Yl0CqIvvADVD+017q8jc1CwmyfHc0TQksCK9ITSErYf5iqL7bMQcG
ZysOOJwg0FG1z/cIxRnaz+7HZa3Ng6iDc4/KRQLaN9SytwdWY0llxMzD5nwE
7Hq4vOgG5Y+Z3BdN1jUIPn22XiGwEJsHXogw7lF5qBj/r1qVBl712OW1esVQ
qzAuCXhG4MeU19lWnlr0yaT1xswvhd2qXTKWryi/C7G/Ld5Ti4vbu1cvbS3D
ijXJehaZBFSEiPj7r+tg25vNuX6rAqtOpYtNlFP50xdUssijHsP0DUsF1lTB
7ELyS5lW6v5HVC3GjBvwzKz82vFfVehI2jUw/IHADosx7neZRkwc3xps+F81
nl1W+q+OpLjuYaPu+qlGvHMvu3S7pgZtLI9Q9jSBnGj1Zw9rmiDbF7VgYzQN
J9zt//nyk+hcUNE/96IZ+9hnT3t710Ji+Mj6cgkSoe8Ms97btcD+/Dm3Fss6
zK3Zwn9vLYmJsMp5Kze2wi8w5tDKDfV4vt4jcvkmEm28kgKL5rfhumP2YJNw
AyymCjjbQMLond2zU3SKP4bn6Xj+n+/mhZIT+0k8yOqToCW3Y+aH5r7G5kZU
Py5LaDpFwt3bztz2dge4wj6StplNCKo8uLLdngRrWWXLyvV0hLuuTnf3b8Zb
VV9DVw8SByM+kQHBdPy2ez2leLkFv23eKCX4k1ipc6vxzRQd5hMX+N4btuKG
bXvj6TASW/48vehrxUC61FmW/4o2xG6xWMVJJLH4X7jNxloG2L+2noqabsN4
a6fSbDYJjbUrVgerMDHhYpT8ht6O6PgJMquKRMlP1S73MCYaPXZknMrtgIve
YrvRdhJhfaUHls4xsf9JgZbfHjpuJK+MLe8lUfG13v/cORY2pTvO/pdNh8LH
J37Hv5J4vaNK2r+FhTuJojIX1zKw4OMvFe9fJHrSt7qe2czGPvLgaudgBrZL
LLhnsIiLa3V6tVWxbPycmj+3h4eJlI6Tz2RWUHlS1z5RKdCJqqAqnYZrTIRs
kjmjtJ7KsXxFxU6nTozsVbLi6WeiudX7E3MLF98PL7O49qETU63zjwseZmHz
li4pAQMuNgnf3l27qwu3Yry2Pq9gofGCgljLQSrHOOcmG5K64F30bCxaiQ0h
m95iK2suli3YypMo2g0iK0y4K4JN5d8jGTdHiq923W3TcOsGfXKbQMiCTgQ3
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
gkUIv2x4t9Kf8o4Hppu+XqDBW89kdrqgGGHjZXZV4QSiLN2zRVEL3n/b7O89
KAVzkbTxjSQC97a49XyRqINrSZUkZ185RNLS1unl/v/3Jmzhnf/V4cfBvaJV
4xVoqYl3kamh3pvNeOaj/HqcVhc6ufFMFfwv1pYvoVO9X+hifcanAc2vXI9o
b6+GqKWKztpPBDLX+onfONmIeeEfqm+vrkEX60YW5zuB/LArV7U3N0Ft4dPD
Grw0RH/4IV/1h3rP3/K6/P80UU5j/CCmm4bPVkyBbEES2yZL39DYzdD6t/rp
1/JaBFdvupImSWL+crczX+Kp3PijzWMUVofTKjyCFxVItDr53U2/2IpmI30X
8cv1eCOkvUJvG4mfnhZiZ6nzfanJtpi2vwG/PeLXKhiSkLP3exsv0I4lOx4n
bZRvxLIte6w3HCFx39nsoOxgO3w35Al0L27CVXf2c+IsiXO3hyIOlnSAG6MS
xB1pQp1xSEPBVRLyWk7u93fRYfErvqCI1oy44DyHWG8S9QGmPd1v6bB/qlV4
Oa0FfRXHggIDSYRfvJsmvZTqkcdLpeV9WqH/046rH0li+JzNpgI3BpxZ3T7m
R9sgG91fIJhKYmDrOmfjLwzss6gsv6hJ8Qvj4V0yn8TQr6X5q/YwoVKfFLdN
uAM2PpFl/bXU/i8Gszi5TOS4ZB4fHu+A2nJFt09MEm7VIquSVrIwV+mtQ7el
Y9k7+cuJ/STYCwd1C71ZVA9L7iU66PCpfNR65wfVXwqRy6pIFtyLamkuBgyQ
J9eoO82RGNe8PSF8kI21ns4h798ysMZostJLiItYc3ULrzI2Ns9Kr/xPjonn
hVmm+qu44J9sWFyj2Inysp/ZL54zwV8Q1SmuTPGt/9MGs8dUbozTYjb+ZeL3
hu8d/zS5CBrT0Wmf6UR6Y+q4lgsLFo/LTCZ2c9FD6q3aZd2Fb+3vZut7WWB+
+/P77VEuEua+5i6q6cKpW2kLQozZaK9PlPGx4UKS6zG/YUM3XtblezYXsWE5
1t95yZkLwSHeG4PPuqFa2/Vjbl0nCrYss3Wu5+CMQYX6S3YWHLqXy9vcuod/
JZIxn9kcdGjOLHtxMwf7BRXupOaEIGn/f/uOD3CQcMaUEJXJgz597FN92gvY
f824oTHKwYwr42p1Zj5k9CcP+xyLQxmbr9PvHwfdV2KbMg4V4nokjV4blwDH
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
/qJrcIscHR930TtprhU4Gv0tk95BIKV17vu02AacPvFBWW5rDeZZPmJccyPx
VKPnay6tHT+1rS68nWpCRsj9H0f8SNx9unZR0vYOfApyqQ5nNKNEaQ93LJHE
4fAzmbRgJoRFjqwWdW3D1fDK4pwMEvEX2dv+UD1mYhj54tBWBsrKgu8ojZFY
xbt4M+QzC6TdT71AMyYE8fXAMz0+3JScnG/+4SBOZIO3yRkWko+4L+V85eHz
qE/v6dpCeGxalMhITUaXk5DDZXGKY/NuvhKeVYLGeYYPBQzTYWXyoSPNnMCN
K6/nfUuuQrfU2YWpsnm4olSX43eRwJZnXauV5tCQsmL8jdv3Ymht0dacuEG9
f/LqQ/M+GnLL2MYSBaXQi8JFm26qL5wX52+ZakBU0V2GXWENhA7HiayVJxEy
U623Z14rLE93BzWL1MP5Vp7lASsS7hprQ9QvUn5jE5P/9WkjJD9sFJetJOF0
zKOnNLwTP3qCNz+50g6af79ZI0FC5OSM5x+LqTkSvTjxUpyJhpq39Vs28IEr
A2tpDRxonU/S1jdiwVcqMvIJjYefKqarp8JzIKM0c09HfRh0TvHneH/mISi/
/2uRayG+PzvayP3zADtTR47Np/jDE/4mIv64GB5JdcWEVxoULqrkVepQPRWf
ONPpbgX0361dfuxjNo5sHOyOyaT2ESfCRceWDvmwyy55jRXojEq8E8smkBV/
0/JUTQP+Shn91g2uQe6piu+ly0l0+C98OudNC1b2by/+yaKjQ97wywMzEqkC
Og7RlgxUvvzn8e9wI9z/fTJ2KaXO1cqCI+e8O2GrW+vfZdeOOO1wzfkUT6aE
lwq+echCufN9s19fO1BWbNfHE+DDmNd55oYfGwnBB77s7GBiIDF37mpDPhr0
nSW/Lu7CQZc8RdU4FhhX3A4+PMRHkYj6aLYVF+sl8reEdbNReNhv5CvVERM9
nn9WM4swfrX3jEZ2Co4tkPJ3tyZQXfPJnjGrGmfMSmd038zDI4U8j3BHAhcC
Nmmpsqrxa0Qk0NqkALq2eXNHqC6IuSmhdd6A8iHuNfMVB0oQ6hlJI/738yFN
Bb3OJrzWzDPteEFDEP2rhN9dEr1ksqypOxMnE629f69pw4MlEwJ/Kf+0n2P6
4+t7Dmx23uwVdWShIcSwvTyED4Mj8hERn7jwZBkRAhEcnKvbvYpHeebx9hMr
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
/wG3gylA
         "]], {
        PointSize[0.035], 
        RGBColor[0.742077, 0.0624857, 0.00605783], 
        Point3DBox[{0, 0, 1}], 
        RGBColor[
        0.8280513333333334, 0.37499046666666663`, 0.3373718866666666], 
        Point3DBox[{-0.3072590473967495, 0.09117608017716569, 
         0.9472480140894288}]}, 
       GraphicsComplex3DBox[CompressedData["
1:eJxN1wk0VG8bAHCVSvH9kWijjbT9kbK1E1kiO5E9S1KWUipkT2GyhyJLKokY
pEg8CkWGFlknxjrCjEuYku27ne98773OmXPM77z3eZ/7vs997jtbzrgbOi7m
4uKqwD9LuMh/AfQmxYsVvqt48P/Hjv5fJylhImej8iF0IFjrxxiGfLWLowyf
cyUIcK3i+viG8COn7jjXnqiFiWRBScnzhC/czvQKGP0E3wZ3ZFbNjiIPVtrd
WrjyG7i1v9LOtye8WSm40KK6FZR4A6fFXrKRh4aV7REpokOB+YL8mzYW8r06
0ztDPBig4WX1QpQxglzoZU3V3rM98I/NteDgjmHkaUImHvLb+2AXw23s5MMh
5O0bBJN6ivvhid+uPorDD+S0W2Y92A4mdIQHPSgXHkRuefiKsVPmIJT842Xl
FjOA/NcDhn8O6weEntQQOyrYjzxlpaCDqsIw/OaSPtd7uhe5H4bdtrQcgf03
49OYid3IL7lStB2MWFAhZ/jHtaYT+eaC55xSZTbkSswB/3g78nM1dnXyXKPw
erJAUVu1BXlZsJPD4bxROFgnQ1kj/RX5Mb5D+74qYPD0QKvWDhkacgHzds3s
BAy6TfqODF2sRr7txX+ymukYKAWcDBTAXiEv8lxh3z6Dwbtk2dCGxenIuwWO
ayrMYmCrPB9aH5UK6L6eziZ3tmMQ8hSr9o8vQS75UySs5B4GeV+ytvluq0bO
02z673ZZDLzrNsVlxtKQG1YG022yRmFt6QFlacuvyBNP2u125RmFEz+nzUGk
BbkOreK2ykE2FCekFz9e0YFc2tOhMcaKBXEPEpTjUjuRy0u8/Y/CuRHwi+hd
lhbUjfyfbuvYjGPDsMfF9bqsVi/yxjJzbLHwEOitW15W0dWHXEuCcyy3cBC0
vRXpGQEDyBkzHk1GekxQVF97jjrGRF6muUZdqLMfpLZVSa5S/YF8o1fdMI98
H/CGQvJ44hDy/p2C5lV3e+Bnoe1NyTfDyE/SlrD/CWCAAV9aWWnHCHJr6dP0
iHd0OLNZlJ+7mYWctcxhxZ2dbcDz2PVgSQYbubbByJoDO76B4tXEzw3Wo8gj
2e0RBqafAcvx7DAfIzxWy7Kbw18Hxqw5azc7DPlDjZEv3EWVUChRFGLymvAm
4S9ynVkFIO3Z6zbHIpyp6vz9b18K+l9fQv7ZmV+VKz4NjPL0zC7NEn3muv3V
9756JdCQP/bxMp3wUUk3l4pyDNKKZNcvVaxELt/0SLkOw6BPnck5O5mPnNuU
dmt+AYNYR9Wl5TYayDdVrFwegI/PHYzuvraRivLZrNRtl4XHT7YKiW/dX4nc
vZ+/f2d4KXSo0yCplbivdvaN9iU5GSClNep3Y4ZwKrYw7Hg3CnTDZZv3LxD5
/+qsjTHjewFTmXWdpoOEczIcRI1yMHAf80oSM3lHPO/ZUf71TAz88/Y1HJ0q
Qp4UeSKfMY+BrLNieq1tNPIoNXmJaQ4GtA3Uz0erslA+Qu1vJkppGBg/e+g9
FfIG+dCmii7u6+Ugci+oebyOyN9AgBLl7fcMmrCk+z5ThNPiWcsCn2fBp7ln
b3N+EfnzWrHFG/F57eW2/Tk1m4V8zjl3PT++/h5LjtTkN99BcSbVzzPqBzCo
3yC1au/pF8h/pgU/L7pXDLsUhZdr9hHzhszmF0/mxMCceNjCwjzhtmLF2f13
/eG+uqNSJ2mdmbZG/rLDBWBgVt98jkX44RtCk8czMNBwMryYb1+F/KB2S1hU
D94PO5Z6G/0sRm54fOL8vTkMbDosimz2JSGP7TqhxpjG15mZZVpxMxPl8+qy
TEFYEwack5s1RymvkavcSXpV4w6g/UNc4cw7Iv/MrTr3zg/mgYJyPz1inPD0
z7kPWGWZ0JJdQNP9Q+R/Mtu5I3wCX7cByrbE3znI4xuSy6vxdU7Xby4dsvFF
cXjV0o6zhzGIcHop5XeoEPmG5c8CNsa+go2hST75ncS8om38DrqB92F9yrXO
yDnCzaqFXOLzEyFvzldMZJ7IZ9GSQuFcfF4RKflJ5oZA5BazDY0zq5/AA9Mr
GrTfRJxhR48EBh6Xqijd4FuegFw8z9lcIzcQ3IrjAz8vEOMDOHb6WxPcwdZQ
9MU8aX+HLxnQZtuocJ3e9rhslPA5IRZlRQoG/Z7tT1qHif0V3X7L+F0XBo68
h/XLx14ir2l7nVqLv9e+e90tCBdNId6n1Kc5ovjzHJ1h+pbulIHyqU9121rV
goHolYgrVdGlyFOOp3X7yFfCyFc5n/MVRP6G8Y6a3+5QIfvE5GUzjHAH8car
XFUZwFDpCvWYIdVt76KWUrwOdH2OmkRynhPnpRStpnF8XSpPCOyY9zxHvE+t
6n012RgoL6sTvSlVgDzUSzNhT2QJmJxRZRR1EPMubnmb9XYkFXSnw2TuzxLe
pjsSuac8DmQ6vRZekfZXdm3sJhN83j7/3cMfRm8T/XYZ80G91lNYwfBuV/xF
xPGRPBYXij+fvxUoqvu+xSLfouaxVjYoHA4cqT3tS9rf9E9DlCPUW2C2hHY3
mbS/tfwfPmjjceJ+338vdiKeOIcEV+28/vd6q4SK74tDifd7fwBPkUgCiNM0
fS1I/eHa44rIfnx8x8pn0SMxl1Ccca/5rgu5F2G3xI2zs6R8uLibdE8l2MBV
c13qItL5+WcZ89lpfSokFmIPWjAiz3ZZVaYVfs6ZKFTSt5cmzlehm1JZevhz
xW8j2TDkTjpfhQc1GuPrLi9a4iYimIpcsiR84jleb6ywtBX2p9KJvq1mecS4
DQMz8ZTsR6uIettjJWx/7HIl/Lun1cnhDZG/uQrPTfr6AvgawjMgM0r494+X
ioPep0OW6yHXKVK9HaMo36gZw+uqU+eX31Qe8ukxJvvvugTE6OwXTDFCcZbo
Vr9yxuMGHd1hsOgJ8d6M9hlw2MNXCp8nLY/uaifmna46aHQlOh1icj+2CJDq
javBEyarYkBylwtrllRvjykhChvxeVU3dC/ItFGQq4pfsNjukA28lTZF1hwi
zpqfXx834vtNLaXG3mJEI7/j7Se0mh0Jkhi2V5W0v8qjfIkp5cHQQHc6X0mq
t3PXlZw5eF8q4fGzeXskgTiHHFaveohfL3Ap5KfLuiAUZ17nwNmlOknQkBQh
84fUJ7uvrthKw8fzBtV/Zzh4ozgh6de1Q4O8YW/IhRsj5Hw4HNtA6lW4LZ4z
M07KZ77CaS3j7/Ouw93CoVwm+vkbYZcQ3DHxcJb50ptovLuw5TuVNaFA6Q++
kkOKHy9y2WIK/870H3szcMMRjf9QfnomLNcOTOVE0xaRzmNcRtYRjxL0oG+A
25xc/5Pjt0qW81FhotL2gS3p96Pre+uX3En4fOx1XNv1ifo3yAypifuOwZYK
rd4b+UT9zyvv4FuL14G1A/OpOW8a8gQ940MTeP3v+aUyqJWWhvJhS832r8Pr
qU7l4u/YJuL3xeiRbrFHcZWQL3QBsyoj7nev3FpBK7sCyO/NZCayCVeKX7b4
mGY6OEip9MqRzpkr685aaOL137rllPvkZeLcuNtoPnXh7zpu7vlYT5VBcSy0
B3yn8PrvyhTLOXyGqH+NL8pjUtqlwLf4ms+ZNmLeF2Hpp8vFMmDoQJZLLel8
GCB5Ldb4QzS0rnO0EyXte7JaFvPv+aa6Oi2shxZJ9A3vOl7D8WzQGVFyHCWd
xy67zzZh+PjoV1pOth+jCE/draYcEw1aXnc7tpLqIbqH7qFZHQgsW96mT6R5
39KfdNbidex+5up+wf2JyFcEWb54gV8fzVl9hioRgOJcqN4qmuN0D5rHhD7U
kOp/uQyNvxwfr+dkWHtK1w/FcahqrKWw/aArLV2FQe63HXo1H8s94fUqffNp
Uj4xy+nnhvBxytckPH0yPdD4s/PPSlxxd20NuSf4JxSNlw5Q63+tcxvUw3p3
3iXF//HvpiE2/v2WsNlJhr4r0f/TW7cXB7mA4a78cPLvkcp1WrezqWfhgAxn
Kbn+5T89Mf79Nx+lmcElGXZEfGlrnXbcuTnidk4+Xmi8zEM6xWeNFzSlvJeb
IuXTXFQw8Af/vpfm2dBsYoHG79faV1qQawDGDSyPv8/jfwF8GdOH
        "], {{{}, {}, {
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Thickness[0.01], 
           
           Line3DBox[{1, 153, 121, 185, 95, 179, 147, 75, 173, 141, 115, 60, 
            168, 136, 110, 90, 51, 162, 130, 104, 84, 69, 2, 154, 122, 96, 76,
             61, 52, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
            19, 20, 21, 22, 23, 155, 123, 97, 77, 62, 53, 24, 156, 124, 98, 
            78, 63, 54, 163, 131, 105, 85, 70, 25, 157, 125, 99, 79, 174, 142,
             116, 64, 169, 137, 111, 181, 149, 91, 177, 145, 187, 119, 183, 
            151, 189, 55, 164, 132, 186, 106, 180, 148, 86, 175, 143, 117, 71,
             171, 139, 113, 93, 26, 158, 126, 100, 80, 65, 56, 165, 133, 107, 
            87, 72, 27, 159, 127, 101, 81, 66, 57, 28, 29, 30, 31, 32, 33, 34,
             35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 160, 128,
             102, 82, 67, 58, 166, 134, 108, 88, 73, 49, 161, 129, 103, 83, 
            68, 170, 138, 112, 92, 59, 167, 135, 109, 89, 176, 144, 118, 74, 
            172, 140, 114, 182, 150, 94, 178, 146, 188, 120, 184, 152, 190, 
            50}, VertexColors -> Automatic]}}}, 
        VertexColors -> CompressedData["
1:eJxF13s4VPkfB3CLSspdrkvpgihq3XJZH4lyKZdSCkkSwpZKSUlRaUsKlcXU
It2jJFMipJkzlISaw6J05phj7WIru1vbhX7nyXM+v3me85zn9c95zsy8P5ev
Ufi2lZtlZWRk6thLjr1Wf/v862D1qOeQqioFnMPr9xjyn+4F+wye3yMzCjh3
Pzmp4TKcAZFDPW8qllHoIV3Zzq66M6Azd25BVTiFLmjdLZbfzIMus6/Ztvsp
dJq74+XqFcXwSLg65O98Cl1KC6LW3LgIlg73FxKVFPqubE6/pv9VECw730W2
U+g1s/aPNjM3IFpPsTX0LwodJ/cuv9/pFmQ1HWr9oiBBW1qRH9W23gZKOeVC
1xwJOsJt9xba8A7wFxw52OwiQUvJOXMsGyshX3taqU2wBC023QOZp+/Cxdw5
13sTJeiUnpPfGyyuAut3rnfO5UjQeb4ea+vUq2GojzqZf0uCHl2iSvX01MAd
3qQq5acStEHeOTPz9FoYs3AcyuuXoEvLml9kBNTD9qA3IxvlaPTe7NfTVdIe
QvTGcnkXQxrdWWo2QRLbAOkyIwMhjjR6ncJ+1e3+j6Ay4oHeSCCNvn964Wi+
iQCiLp4OPLeDRrcdsMtvVhHC4uTByCOnaLSQV6iVOyCEQku/1EPXaXTvB+Vq
w1oClK/++MdHIY2+Xdk6tbxEBCVVN2bdktDosOIRl+69jVB70XhL0hcaLfor
crZSRBOMmc5MTdPtQwck0/PHPB6D747L/XK2feha+4c6Pxs+gdm/2AUW+PWh
ewPfVOhNbAajAM+CbT/1oXsvHbRY2tsMF4aiBtb93IeWtdZts6x4ClZeKocf
XOhD986UM5qZ1wKDYDeyvr4PnbfYd1XZ1mdgqhYXq9ndh1ZoGLJeHNgKJ/Ya
3Zv8oQ9tvuj9Z1udNkio71PSVJeimVtJ8aVpbRD32KIid54U/bnzkpPx+zY4
EfvJdK2nFP1V+1DS0MZ2sPzj+XWLCCl6g8Jk5Xsd7fBpzPzrklQp+kVeDj/M
8zmQXUrF7eelaOvFLS1rKtl71pcVCVVS9Eh++Y/+pi+gpje2ZTUpRf+q6G6Y
d+YFiBQGApe/laLX679Sqxt7AZIPQ5Y1igx6z0uD9QPbxTDrwI7uaBMGncZX
0d3wSgx/SuSzzF0Z9HgfIiExNUd2ShiDjvjWh2Lg7mXHmC0GFNr97Gb/lmuH
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
         "]], {
        PointSize[0.035], 
        RGBColor[0, 0.501961, 0], 
        Point3DBox[{0, 0, 1}], 
        RGBColor[
         NCache[
          Rational[1, 3], 0.3333333333333333], 0.667974, 
         NCache[
          Rational[1, 3], 0.3333333333333333]], 
        Point3DBox[{0., -1.9428902930940252`*^-16, -1.0000000000000013`}]}}, {
      ViewAngle -> 0.34, ImageSize -> 350, Boxed -> False}], 
     FormBox[
      FormBox[
       TemplateBox[{"\"First\"", "\"Second\""}, "LineLegend", 
        DisplayFunction -> (FormBox[
          StyleBox[
           StyleBox[
            PaneBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[0.742077, 0.0624857, 0.00605783]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[0.742077, 0.0624857, 0.00605783]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[0, 0.501961, 0]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[0, 0.501961, 0]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
              "Grid"], Alignment -> Left, AppearanceElements -> None, 
             ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
             "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
           FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
           False], TraditionalForm]& ), 
        InterpretationFunction :> (RowBox[{"LineLegend", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.742077, 0.0624857, 0.00605783], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.494718, 0.04165713333333333, 0.0040385533333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.742077, 0.0624857, 0.00605783]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.742077, 0.0624857, 0.00605783]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.742077, 0.0624857, 0.00605783], Editable -> 
                    False, Selectable -> False]}], "]"}], ",", 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0.501961, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0.3346406666666667, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "RGBColor[0, 0.501961, 0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0.501961, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0.501961, 0], Editable -> False, Selectable -> 
                    False]}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
       TraditionalForm], TraditionalForm]}, "Legended", 
    DisplayFunction -> (GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ), 
    InterpretationFunction -> (RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& ), Editable -> True]},
  "RowDefault"]], "Output",
 CellChangeTimes->{{3.6351687059731483`*^9, 3.635168766237788*^9}, {
   3.635168881169589*^9, 3.635168898107188*^9}, 3.635169096570068*^9, 
   3.6351691484644957`*^9, 3.63516922070492*^9, 3.635169303503327*^9, {
   3.6351693513249273`*^9, 3.635169406855343*^9}, 3.635171429569043*^9, 
   3.635171536735291*^9, {3.6351716244232264`*^9, 3.635171655370175*^9}, {
   3.635172640129674*^9, 3.6351726493842697`*^9}, 3.6351727163675957`*^9, 
   3.635172990666915*^9, {3.635173318217565*^9, 3.635173333850349*^9}, {
   3.635173386843692*^9, 3.635173474696169*^9}, {3.635173508175932*^9, 
   3.63517351783525*^9}, {3.6351760842267017`*^9, 3.635176105775032*^9}, 
   3.635176514194302*^9, 3.635176584192503*^9, {3.635176717455616*^9, 
   3.635176726724512*^9}, 3.6351785664765368`*^9, 3.635250168986353*^9}]
}, Open  ]],

Cell["Use a custom color scheme.", "Text",
 CellChangeTimes->{{3.6351767586843843`*^9, 3.6351767657064943`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"BlochPlot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"states1", ",", "states2"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"BlochPlotJoined", "\[Rule]", "#"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ImageSize", "\[Rule]", "350"}], ",", "\[IndentingNewLine]", 
      RowBox[{"BlochPlotLabels", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<First\>\"", ",", "\"\<Second\>\""}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"BlochPlotColors", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Red", ",", "Yellow"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Magenta", ",", "Cyan"}], "}"}]}], "}"}]}]}], 
     "\[IndentingNewLine]", "]"}], "&"}], "/@", 
   RowBox[{"{", 
    RowBox[{"False", ",", "True"}], "}"}]}], "//", "Row"}]], "Input",
 CellChangeTimes->{{3.63517673396525*^9, 3.635176747571904*^9}}],

Cell[BoxData[
 TemplateBox[{TemplateBox[{
     Graphics3DBox[{{{
         Opacity[0.2], 
         SphereBox[{0, 0, 0}, 1], 
         Opacity[0.5], 
         GrayLevel[0], 
         Thickness[Large], 
         Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
         Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
         Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], 
         Opacity[1], 
         GrayLevel[0], 
         Thickness[Large], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|+Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {0, 0, 1.15}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|-Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {0, 0, -1.15}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|+X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {1.15, 0, 0}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|-X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {-1.15, 0, 0}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|+Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {0, 1.15, 0}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|-Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {0, -1.15, 0}]}, {{{}, {}, {
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Dashing[{Small, Small}], 
           Line3DBox[CompressedData["
1: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
aZ3nLndR/f//7+xmU6H/fWev/J//H/XtZOI=
            "]]}}}, {{{}, {}, {
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Dashing[{Small, Small}], 
           Line3DBox[CompressedData["
1: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
d3iqKYHXvWC4xC1pTYIb3/oU+Wjvc8gSLvdoF8EFmFksBldCoOjDalIb4bt0
T2dqCs2GQb4e0ucTBK8I1z70pCES0h6el0ol7BPzROacIb94SOUr7pYkuIDg
u0Bzh0So/9VnMYewD2/N69mtvEmC7TnVZlGvkSvfk4mwTE2BL4es3bkI+7za
p9ldyCMDKkrHmicTzp17f7+E05k8KMcSqBhHOKcemw53x9XyYXWumERwPPKQ
xdfTqZIUuDafqK0XSzgX2ur+P2UKoJyH5cjTl8j/3eVkd1frDXyqJmJACkTu
43J38rh7CUzakp5ZY0V4rrbo50E9EO5oZX+caoH8npQHeUWqEiaS3MwdzZCr
Qv2eZLtKqJw23sxqinxiZthsZrUSVh20D602QJ62AFKV6avg4rhgTNBF5PlT
O/h+ctdA+dzheT8eQtzItdWkl6uH098fxXpzI38RfehP+ON6GPU+MMtpF3Ja
40Du/qJ6uOecyoLmdkKc7+74Jiz1Gb6YE5eK3kR5ROD2UvSYcAMU8iyXrB5D
fkhwsu4QRxN0+HOD2YKQ724LHy15PNAKWzaupwJ+5O1CGTf0Cr/A0V9OF1q8
UR7fZKK/NvmiF167+ieK9wnK+yf47ZPLzIbhs3FezR4hVCdcvV/sruozBvfR
n5Y/K43qCoZrTq9Vnk/CIjPx+ny+Edz/atJKid2Yhh1eYTmHk1DdMmG+Q22O
bg7W1sbaTq+hOqfALdTHpngecoiPNoX2I0+pqWjo+jAP9z1g+3qsEvkM63yr
/Md5OGubRH/PG3kf93ae6cZ5uPkmNDOUA7mmN7MzdWge5uZduU87+BX3S27W
NrEsVCjE8lZmx4UO3Od+rwXY61Jh2ohSRM0GqvdktzPLzn3H3m/dMauyMuQr
46oj9T1UKLd5hi3HCbm2ullx3AAVOs1cG7FbQfUkY/NQp/gEFU5/7mZPnm/A
nZ4rebh7GVvP5PH1kJ563OPmD4mFctJgE9nbSDG/BuWFeOnay8rYfvK4k3/F
EvmgeU4Z+zkarFeaEzYWR/7vywFYe4EGZToz2mxSUZ0sa/P3BI8GDR5k+nn2
ErkKxX8/kHD1Gg1GN72+v+FaiXu2cRbvPuy8PThD/ro9FNXzx0z/rpzwpUFB
Jr23v3ciZ6hzIlv402DLxRvhE+HoXuCuHRc8hdUHpyvFa1+Ti1He1LrY2xBE
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
            
            "]]}}}, {{{}, {}, {
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Dashing[{Small, Small}], 
           Line3DBox[CompressedData["
1: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
6j11u43q//9/Z7cYD//vO3vl/wHesGTi
            "]]}}}}, {{{
          RGBColor[1, 
           NCache[
            Rational[79, 80], 0.9875], 0], 
          PointSize[0.035], 
          Point3DBox[{0, 0, 1}]}, {
          RGBColor[1, 
           NCache[
            Rational[39, 40], 0.975], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.001891828056697819, -0.015644526686925578`, 
           0.9998758271762279}]}, {
          RGBColor[1, 
           NCache[
            Rational[77, 80], 0.9625], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.013324347399282484`, -0.058485856324716395`, 
           0.9981993119494462}]}, {
          RGBColor[1, 
           NCache[
            Rational[19, 20], 0.95], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.041296219259756246`, -0.11693063621971278`, 
           0.9922811338467052}]}, {
          RGBColor[1, 
           NCache[
            Rational[15, 16], 0.9375], 0], 
          PointSize[0.015], 
          Point3DBox[{0.08818145020876209, -0.1741175775480398, 
           0.9807686276731543}]}, {
          RGBColor[1, 
           NCache[
            Rational[37, 40], 0.925], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.15061765406139688`, -0.21169203083554036`, 
           0.9656608133116756}]}, {
          RGBColor[1, 
           NCache[
            Rational[73, 80], 0.9125], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.2197295758827424, -0.21415792572357498`, 
           0.9517643071328991}]}, {
          RGBColor[1, 
           NCache[
            Rational[9, 10], 0.9], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.2826299881451781, -0.1723047161610572, 
           0.9436267135841985}]}, {
          RGBColor[1, 
           NCache[
            Rational[71, 80], 0.8875], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.32475150634958805`, -0.08496712545224132, 
           0.9419750775450786}]}, {
          RGBColor[1, 
           NCache[
            Rational[7, 8], 0.875], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.33252627768974596`, 0.04043676101427527, 
           0.9422266940627805}]}, {
          RGBColor[1, 
           NCache[
            Rational[69, 80], 0.8625], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.29612399233751086`, 0.18806148851412935`, 
           0.9364525923398067}]}, {
          RGBColor[1, 
           NCache[
            Rational[17, 20], 0.85], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.2119716377745236, 0.33500298756920016`, 
           0.9180637358587349}]}, {
          RGBColor[1, 
           NCache[
            Rational[67, 80], 0.8375], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.0844963690606069, 0.45489532009644346`, 
           0.8865272761567623}]}, {
          RGBColor[1, 
           NCache[
            Rational[33, 40], 0.825], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.07363072628606557, 0.5234847224315151, 
           0.8488476079529155}]}, {
          RGBColor[1, 
           NCache[
            Rational[13, 16], 0.8125], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.24307324194208368`, 0.5240298052706615, 
           0.8162770131761387}]}, {
          RGBColor[1, 
           NCache[
            Rational[4, 5], 0.8], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.4007771015465678, 0.4502231479053009, 
           0.7979203168024823}]}, {
          RGBColor[1, 
           NCache[
            Rational[63, 80], 0.7875], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.523392405167586, 0.306394527956181, 
           0.7950992286824324}]}, {
          RGBColor[1, 
           NCache[
            Rational[31, 40], 0.775], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.5905452967895066, 0.10667010253145542`, 
           0.7999235848915333}]}, {
          RGBColor[1, 
           NCache[
            Rational[61, 80], 0.7625], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.5878586968119017, -0.12572634471267166`, 
           0.7991339304696071}]}, {
          RGBColor[1, 
           NCache[
            Rational[3, 4], 0.75], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.5096676770228483, -0.35996843220123476`, 
           0.7814483903731062}]}, {
          RGBColor[1, 
           NCache[
            Rational[59, 80], 0.7375], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.3608719018286637, -0.5617292380140438, 
           0.7444674160973902}]}, {
          RGBColor[1, 
           NCache[
            Rational[29, 40], 0.725], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.1570321372618308, -0.6998039734337875, 
           0.6968610382517193}]}, {
          RGBColor[1, 
           NCache[
            Rational[57, 80], 0.7125], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.0776951173116967, -0.7524489403230905, 
           0.6540520322975687}]}, {
          RGBColor[1, 
           NCache[
            Rational[7, 10], 0.7], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.3141746784833392, -0.7104442096295733, 
           0.6297327182255188}]}, {
          RGBColor[1, 
           NCache[
            Rational[11, 16], 0.6875], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.5222998342078007, -0.5767058031567419, 
           0.6281825370000669}]}, {
          RGBColor[1, 
           NCache[
            Rational[27, 40], 0.675], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.6746393706731204, -0.3648478875283685, 
           0.6416757269087421}]}, {
          RGBColor[1, 
           NCache[
            Rational[53, 80], 0.6625], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.7497329144976708, -0.09850131729599332, 
           0.6543684339955451}]}, {
          RGBColor[1, 
           NCache[
            Rational[13, 20], 0.65], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.7351851771194872, 0.18961293447739175`, 
           0.6508069532685248}]}, {
          RGBColor[1, 
           NCache[
            Rational[51, 80], 0.6375], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.6300854703364526, 0.4612859699459596, 
           0.624665953932104}]}, {
          RGBColor[1, 
           NCache[
            Rational[5, 8], 0.625], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.4457401259547828, 0.6795576490890728, 
           0.5826809947804594}]}, {
          RGBColor[1, 
           NCache[
            Rational[49, 80], 0.6125], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.204104435177347, 0.8157531260621708, 
           0.5411914789247254}]}, {
          RGBColor[1, 
           NCache[
            Rational[3, 5], 0.6], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.06558825491675846, 0.8533299468437433, 
           0.5172293327302958}]}, {
          RGBColor[1, 
           NCache[
            Rational[47, 80], 0.5875], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.3307932279018606, 0.7879631805723654, 
           0.5193167303645705}]}, {
          RGBColor[1, 
           NCache[
            Rational[23, 40], 0.575], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.5593710894287858, 0.6263774872276539, 
           0.5429136467299587}]}, {
          RGBColor[1, 
           NCache[
            Rational[9, 16], 0.5625], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.7230685403534485, 0.3861895036202029, 
           0.5727386430517095}]}, {
          RGBColor[1, 
           NCache[
            Rational[11, 20], 0.55], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.8010470639641479, 0.09601014063887608, 
           0.5908516346841405}]}, {
          RGBColor[1, 
           NCache[
            Rational[43, 80], 0.5375], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.7831073071911072, -0.20696808292761587`, 
           0.5864359795179346}]}, {
          RGBColor[1, 
           NCache[
            Rational[21, 40], 0.525], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.6715342053259457, -0.48308161541105255`, 
           0.5618487019911123}]}, {
          RGBColor[1, 
           NCache[
            Rational[41, 80], 0.5125], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.48068373245703666`, -0.6976105182358316, 
           0.5313028460284265}]}, {
          RGBColor[1, 
           NCache[
            Rational[1, 2], 0.5], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.23451313414618852`, -0.8257416967580652, 
           0.5129856139776656}]}, {
          RGBColor[1, 
           NCache[
            Rational[39, 80], 0.4875], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.03686754259055856, -0.85382931643229, 
           0.5192458788513403}]}, {
          RGBColor[1, 
           NCache[
            Rational[19, 40], 0.475], 0], 
          PointSize[0.015], 
          Point3DBox[{0.3007177911962492, -0.7790610860019721, 
           0.5501205634544808}]}, {
          RGBColor[1, 
           NCache[
            Rational[37, 80], 0.4625], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.5251869328567459, -0.6099933789946564, 
           0.5933689940831122}]}, {
          RGBColor[1, 
           NCache[
            Rational[9, 20], 0.45], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.6831406364951537, -0.3676211548140098, 
           0.631009950240255}]}, {
          RGBColor[1, 
           NCache[
            Rational[7, 16], 0.4375], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.7560448259214296, -0.08420708476869215, 
           0.6490804172613684}]}, {
          RGBColor[1, 
           NCache[
            Rational[17, 40], 0.425], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.7368380039357629, 0.2018861039809932, 
           0.6452222539368391}]}, {
          RGBColor[1, 
           NCache[
            Rational[33, 80], 0.4125], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.6307103049128014, 0.45358317923758307`, 
           0.629656105179268}]}, {
          RGBColor[1, 
           NCache[
            Rational[2, 5], 0.4], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.4536762063470878, 0.6409675793621538, 
           0.6191433291259252}]}, {
          RGBColor[1, 
           NCache[
            Rational[31, 80], 0.3875], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.2298082816370145, 0.7437672082423568, 
           0.6276929931378958}]}, {
          RGBColor[1, 
           NCache[
            Rational[3, 8], 0.375], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.011951553655660863`, 0.7519050545150648, 
           0.659163067351251}]}, {
          RGBColor[1, 
           NCache[
            Rational[29, 80], 0.3625], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.24118214311796315`, 0.6664508183395027, 
           0.7054604741412736}]}, {
          RGBColor[1, 
           NCache[
            Rational[7, 20], 0.35], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.4297876747336442, 0.501025818517229, 
           0.7511695439953519}]}, {
          RGBColor[1, 
           NCache[
            Rational[27, 80], 0.3375], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.5560098499391042, 0.28126308661853827`, 
           0.7821407308640207}]}, {
          RGBColor[1, 
           NCache[
            Rational[13, 40], 0.325], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.6076717190385132, 0.0404707230838747, 
           0.7931564804336177}]}, {
          RGBColor[1, 
           NCache[
            Rational[5, 16], 0.3125], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.5835592387287141, -0.18723034393272786`, 
           0.7901920103400142}]}, {
          RGBColor[1, 
           NCache[
            Rational[3, 10], 0.3], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.4926585845040621, -0.37293605295532517`, 
           0.7862609105891971}]}, {
          RGBColor[1, 
           NCache[
            Rational[23, 80], 0.2875], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.35191452260326644`, -0.49608449528845844`, 
           0.7937608848483946}]}, {
          RGBColor[1, 
           NCache[
            Rational[11, 40], 0.275], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.18337184024989855`, -0.5454769300571138, 
           0.8178200822789987}]}, {
          RGBColor[1, 
           NCache[
            Rational[21, 80], 0.2625], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.011064002944192186`, -0.5200510968402614, 
           0.8540634897442276}]}, {
          RGBColor[1, 
           NCache[
            Rational[1, 4], 0.25], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.14236905896286317`, -0.42965028257589755`, 
           0.8917015676404725}]}, {
          RGBColor[1, 
           NCache[
            Rational[19, 80], 0.2375], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.25909139570630646`, -0.29411847365273747`, 
           0.9199815064049596}]}, {
          RGBColor[1, 
           NCache[
            Rational[9, 40], 0.225], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.3287227926974028, -0.13941926634966667`, 
           0.9340790082919849}]}, {
          RGBColor[1, 
           NCache[
            Rational[17, 80], 0.2125], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.34938428934424426`, 0.008181047124465747, 
           0.9369438023848395}]}, {
          RGBColor[1, 
           NCache[
            Rational[1, 5], 0.2], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.3269242872773073, 0.12727754873299887`, 
           0.9364405672421185}]}, {
          RGBColor[1, 
           NCache[
            Rational[3, 16], 0.1875], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.27284803176246647`, 0.20417673557346733`, 
           0.9401413788435796}]}, {
          RGBColor[1, 
           NCache[
            Rational[7, 40], 0.175], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.20167696385489894`, 0.2337777896830554, 
           0.9511437048633459}]}, {
          RGBColor[1, 
           NCache[
            Rational[13, 80], 0.1625], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.12818900674397532`, 0.21955715190303554`, 
           0.9671412697213461}]}, {
          RGBColor[1, 
           NCache[
            Rational[3, 20], 0.15], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.06476987032253384, 0.17281322564717788`, 
           0.9828226965937534}]}, {
          RGBColor[1, 
           NCache[
            Rational[11, 80], 0.1375], 0], 
          PointSize[0.015], 
          
          Point3DBox[{0.01922051535038988, 0.11045439636001747`, 
           0.9936953245911985}]}, {
          RGBColor[1, 
           NCache[
            Rational[1, 8], 0.125], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.0064531273536087164`, 0.051142047908063676`, 
           0.9986705403100286}]}, {
          RGBColor[1, 
           NCache[
            Rational[9, 80], 0.1125], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.015890585358127558`, 0.010888940956734696`, 
           0.9998144429151911}]}, {
          RGBColor[1, 
           NCache[
            Rational[1, 10], 0.1], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.01694396160915576, -0.0003714395720887378, 
           0.9998563717842822}]}, {
          RGBColor[1, 
           NCache[
            Rational[7, 80], 0.0875], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.019410133483273646`, 0.019443058673277478`, 
           0.9996225358542026}]}, {
          RGBColor[1, 
           NCache[
            Rational[3, 40], 0.075], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.03244311688830346, 0.06428727951117241, 
           0.9974039251274388}]}, {
          RGBColor[1, 
           NCache[
            Rational[1, 16], 0.0625], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.06209523190052132, 0.12108742967026906`, 
           0.9906977422761524}]}, {
          RGBColor[1, 
           NCache[
            Rational[1, 20], 0.05], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.10945728082377931`, 0.17241637283353006`, 
           0.97892374475931}]}, {
          RGBColor[1, 
           NCache[
            Rational[3, 80], 0.0375], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.1698875036658654, 0.20051662636279238`, 
           0.9648478214984278}]}, {
          RGBColor[1, 
           NCache[
            Rational[1, 40], 0.025], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.23359095650387418`, 0.19148518610773224`, 
           0.9532936003880912}]}, {
          RGBColor[1, 
           NCache[
            Rational[1, 80], 0.0125], 0], 
          PointSize[0.015], 
          
          Point3DBox[{-0.2873684476892853, 0.13824305239698292`, 
           0.9477912395335871}]}, {
          RGBColor[1, 0, 0], 
          PointSize[0.035], 
          
          Point3DBox[{-0.3072590473967495, 0.09117608017716569, 
           0.9472480140894288}]}}}, {{{
          RGBColor[
           NCache[
            Rational[1, 17], 0.058823529411764705`], 
           NCache[
            Rational[16, 17], 0.9411764705882353], 1], 
          PointSize[0.035], 
          Point3DBox[{0, 0, 1}]}, {
          RGBColor[
           NCache[
            Rational[2, 17], 0.11764705882352941`], 
           NCache[
            Rational[15, 17], 0.8823529411764706], 1], 
          PointSize[0.015], 
          Point3DBox[{0., -0.19509032201612828`, 0.9807852804032305}]}, {
          RGBColor[
           NCache[
            Rational[3, 17], 0.17647058823529413`], 
           NCache[
            Rational[14, 17], 0.8235294117647058], 1], 
          PointSize[0.015], 
          Point3DBox[{0., -0.38268343236508984`, 0.923879532511287}]}, {
          RGBColor[
           NCache[
            Rational[4, 17], 0.23529411764705882`], 
           NCache[
            Rational[13, 17], 0.7647058823529411], 1], 
          PointSize[0.015], 
          Point3DBox[{0., -0.5555702330196023, 0.8314696123025453}]}, {
          RGBColor[
           NCache[
            Rational[5, 17], 0.29411764705882354`], 
           NCache[
            Rational[12, 17], 0.7058823529411765], 1], 
          PointSize[0.015], 
          Point3DBox[{0., -0.7071067811865477, 0.7071067811865477}]}, {
          RGBColor[
           NCache[
            Rational[6, 17], 0.35294117647058826`], 
           NCache[
            Rational[11, 17], 0.6470588235294118], 1], 
          PointSize[0.015], 
          Point3DBox[{0., -0.8314696123025456, 0.5555702330196023}]}, {
          RGBColor[
           NCache[
            Rational[7, 17], 0.4117647058823529], 
           NCache[
            Rational[10, 17], 0.5882352941176471], 1], 
          PointSize[0.015], 
          Point3DBox[{0., -0.9238795325112872, 0.3826834323650897}]}, {
          RGBColor[
           NCache[
            Rational[8, 17], 0.47058823529411764`], 
           NCache[
            Rational[9, 17], 0.5294117647058824], 1], 
          PointSize[0.015], 
          Point3DBox[{0., -0.980785280403231, 0.1950903220161282}]}, {
          RGBColor[
           NCache[
            Rational[9, 17], 0.5294117647058824], 
           NCache[
            Rational[8, 17], 0.47058823529411764`], 1], 
          PointSize[0.015], 
          Point3DBox[{0., -1.0000000000000007`, -1.1102230246251565`*^-16}]}, {
          RGBColor[
           NCache[
            Rational[10, 17], 0.5882352941176471], 
           NCache[
            Rational[7, 17], 0.4117647058823529], 1], 
          PointSize[0.015], 
          Point3DBox[{0., -0.9807852804032312, -0.19509032201612853`}]}, {
          RGBColor[
           NCache[
            Rational[11, 17], 0.6470588235294118], 
           NCache[
            Rational[6, 17], 0.35294117647058826`], 1], 
          PointSize[0.015], 
          Point3DBox[{0., -0.9238795325112876, -0.38268343236509006`}]}, {
          RGBColor[
           NCache[
            Rational[12, 17], 0.7058823529411765], 
           NCache[
            Rational[5, 17], 0.29411764705882354`], 1], 
          PointSize[0.015], 
          Point3DBox[{0., -0.8314696123025461, -0.5555702330196026}]}, {
          RGBColor[
           NCache[
            Rational[13, 17], 0.7647058823529411], 
           NCache[
            Rational[4, 17], 0.23529411764705882`], 1], 
          PointSize[0.015], 
          Point3DBox[{0., -0.7071067811865483, -0.707106781186548}]}, {
          RGBColor[
           NCache[
            Rational[14, 17], 0.8235294117647058], 
           NCache[
            Rational[3, 17], 0.17647058823529413`], 1], 
          PointSize[0.015], 
          Point3DBox[{0., -0.555570233019603, -0.831469612302546}]}, {
          RGBColor[
           NCache[
            Rational[15, 17], 0.8823529411764706], 
           NCache[
            Rational[2, 17], 0.11764705882352941`], 1], 
          PointSize[0.015], 
          Point3DBox[{0., -0.3826834323650904, -0.9238795325112877}]}, {
          RGBColor[
           NCache[
            Rational[16, 17], 0.9411764705882353], 
           NCache[
            Rational[1, 17], 0.058823529411764705`], 1], 
          PointSize[0.015], 
          Point3DBox[{0., -0.1950903220161287, -0.9807852804032317}]}, {
          RGBColor[1, 0, 1], 
          PointSize[0.035], 
          
          Point3DBox[{
           0., -1.9428902930940252`*^-16, -1.0000000000000013`}]}}}}, {
      ViewAngle -> 0.34, ImageSize -> 350, Boxed -> False}], 
     FormBox[
      FormBox[
       TemplateBox[{"\"First\"", "\"Second\""}, "LineLegend", 
        DisplayFunction -> (FormBox[
          StyleBox[
           StyleBox[
            PaneBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.09], 
                    Dashing[{0, Small}], 
                    RGBColor[1, 0, 0]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.09], 
                    Dashing[{0, Small}], 
                    RGBColor[1, 0, 0]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.09], 
                    Dashing[{0, Small}], 
                    RGBColor[1, 0, 1]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.09], 
                    Dashing[{0, Small}], 
                    RGBColor[1, 0, 1]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
              "Grid"], Alignment -> Left, AppearanceElements -> None, 
             ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
             "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
           FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
           False], TraditionalForm]& ), 
        InterpretationFunction :> (RowBox[{"LineLegend", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
                    RowBox[{"Dashing", "[", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "Small"}], "}"}], "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "RGBColor[1, 0, 0]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 0], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
                    RowBox[{"Dashing", "[", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "Small"}], "}"}], "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666666, 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "RGBColor[1, 0, 1]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
       TraditionalForm], TraditionalForm]}, "Legended", 
    DisplayFunction -> (GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ), 
    InterpretationFunction -> (RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& ), Editable -> True],
   TemplateBox[{
     Graphics3DBox[{{{
         Opacity[0.2], 
         SphereBox[{0, 0, 0}, 1], 
         Opacity[0.5], 
         GrayLevel[0], 
         Thickness[Large], 
         Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
         Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
         Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], 
         Opacity[1], 
         GrayLevel[0], 
         Thickness[Large], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|+Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {0, 0, 1.15}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|-Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {0, 0, -1.15}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|+X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {1.15, 0, 0}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|-X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {-1.15, 0, 0}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|+Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {0, 1.15, 0}], 
         Text3DBox[
          FormBox[
           StyleBox[
           "\"|-Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
            FontColor -> GrayLevel[0.3], StripOnInput -> False], 
           TraditionalForm], {0, -1.15, 0}]}, {{{}, {}, {
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Dashing[{Small, Small}], 
           Line3DBox[CompressedData["
1:eJxN2Xk4Vdv7AHBJxkKiCJW4CkmaDNFCg0zdVJKrIpLMUcqQyDzPHPNMGQ6H
hApL5kyhZJ7n6ezITVH8zn2e33evff45z/P5Y++1137fd73vs4WMbK6a0NPR
0V3ZQke3lfZvojrqxJ2PgSPVHO++sLw4S/f/P6c348mcNC8X6Dl6ScUA/M9P
HJXi2EZzJpUGOToVG9x3u9c3LpExMM9yy9Dc9inu24zyW77SXHxVDWtTdsX9
mMHi3mKav6+yXOLx88BdYD7gtd9/riWQA2x9cO/+ylUrSPPGV5GsL5RDcJd1
5lEYyMNACcdHk+bIMNztZPI2wmleG/5to8M3AvdY4WHj2VwMpCk6Pm5/SML9
8vZailwOBtL9Hgl6KSWj9YTUuL7Lpq3n1F75Y3EpuF9U3Rt3guZhyQf6+SJT
cWfwu1rI/goD9x16WEd80nGXy1u3epCJgcQXyk7SNi9xH5n+cDEnCQNrnrGm
rxUKcI8XLBoqSKQ9b2vrDyF+Cu4NFdO15AQM/I43vDxFQg5uH3AJj8PAheKG
D0Zhhbi/b+HP2IzCwN3RbNNDnq9xrxth2GEWgAHd2VbhugeluFt843jt9BAD
776bKT+XhLiPSuUkG1pjoFD7zrM/r5EzFdQGK1piYLZzpVNOsAr3tinqkwFT
DDRbOvCkpSPncO92y7+DgV/B5ydkKR9wP+puuDNDHQNRlvkD1o01uOfS8Rr0
8WPAMCD90JOVBtwHz9X1ZaZTwcpxtjpj/nb0vqK0ToyaLIKy2UPe5IRu3IWV
K0FU+TxQ/LG6b3/iEO4Rh9Yl9Z/OAiPbEna2njHcJW0m74ktTYEktbDPzT2T
uPN6MDT7fBoHSa631irKZtD1OeJmY4xHQLwdmfJMYB73SWOxVuHRXrBzfTO8
bG4Bd7oFucGZfzuA8cFv4eZ3qbgzgx0Smd0dIP3RidBhE+TuWde2337bAdxD
l7ZqmSPffevcS/isA+SOOavvfIQ8OeXoTu2tHWA488Up4IncUZiimcvRDpZX
FUlSmcjVlWezJtRbgMV6VID+KPLvNp8MDHa0gKDD7LcGJ5ArmfOIfP7UDDQu
e3roziBf8Gtly7reDNKCf30+iSFf7s3aun67CXzM0DeO+I1ceenwT2ubRuCs
0O85zIPhPqxhazAXVAsWLoy65KsgrynqHB68Ugvooo/PH7mA/JrUmG/Lrlqw
T3BlIl0VOUehckh8bA2oFX/o7KyJ3G60goE+sxoEyquLdOggz9+z8/qfd1Ug
8I3GPI8p8qta/j6HGt8CM/XTfVs8kbvczAE7td6CzM63X0K9kPcz3f620lEG
5mN1NHl9kP/+/pmS018KloKMCjn9kR9obhzvpL4BE/Psai9DkLef4q6V4i4C
+maO9y1ikcuGxzTWxxSCfvoiVvc45IPncuL1BAvB7uvbDoXFI/ee5xd+JEoB
Dq7r9TGJyKcOLA8uPcwDohLeiVqpyGuZR590lmaAv8rX7LVeIrecEX4alpsO
jm6vIv0keJ9Jy7J6chrQsDzUE/cK+ZZhXb987xTg1XS4uDabsG/unwfdcmLA
Nu+YL+Rc5EwylWylYdGgzmpzamce4fpFgxNTDpGAjXVstxXBIy7xfj+lGgq4
AkvamMnImRuac/JuBQKGmmc31Ah+YjrWaVLcF1CvmK67Edw8wHTUJ9gVRLta
JXQRXLF6Yaxb/Cn4YGQbs0zw0UHjjyrBVqBKyLyQMR85WfETQ3yQHlDluzq9
k+CBZJcHZHolqCwiKs9NcGnrk3uEG+/BjvjJ7B0Eb3206NrUYAev6oaf3iDc
V3gjQOq5hDO8kXdsZJLgE99+749qeAHTrBuyagk+mXVH4v4vL3j8m4F/HMHr
kwq2S0v4w5NbGANMCV56ULBNVzUMCviVjE8R9rnSNO45KScWprZ+XXEivC+T
aJHxGzXx8J+V1WoWgnP+M+nCPpAIi2eG8kNyCPFsOfWnkDEVKhb7jbgR4kFh
B3NHs0wmfFiSX/Azi5C/CukrbTFk2EOncvhsCvIFga1crRn5MK1IaeZsMnKd
42+jqykFUJvj+sfTSYR8J1VeV5ugQLbMcYwtgXDfEJE7w+tFUC3qdrcGCXlH
12sbevFSyL+SfPtgIPL42CvFb7NKIcfqz6MUQv5GhgodtxAug/4/JTRP+yGn
fxdiUC7wFtIxRlhIeCN/+UpBkpvjPWxkXLn01hW5tuGPf58vV8K9Zmk9xrbI
jSzTrpfo1cBf5HMeq5eRvy8ENl5szVDcZW1S9juqqyo/99l81mqGY7yhclGE
OpwxvDuWL7QZUuSt8mbmkUvfA/uDuVvg9/OyK48JdT5Iz3mER7AVulrKiAt3
Ib/skJgUcuQT3BNlKNZdjFzK/uDUtbQOyO0RWZdphTzUM2Zbdk4X7GT9oHS4
bhHli/0MaZvaIAxyYj/ctgedj8UfXZn+rI5CDXFVP509c7h/DDLTYbkwCbu0
BrpMnaZx1+oZstLYOgOXq6tjt+RM4L6W0P1NNGwOKlzQEhpXHkX5tYeLMTN+
AZbVBzd2yPSjvGaq9FDipMIcs8VswfXPuNtwMbwM56FCs6p5tvU+5ONtMycG
9lKh9+/N6s53yAv1fTx1/qLCDHlhHVsn5LKStt0jclTI11/BavmrE52Dcq0b
N+9S4ROF/GaDHx0orrrWc+uyqZDfR3qRvvcTOq+Dzl2kz6fSjv7Wmick5P3d
WftOF1HhkMRY1KgOcqXzPzw93lHh81O6TxM621A8P4KMb5qoMMJcUSG7uRX3
EBfLYdtZKgyrNFWQKm/GfVP3vaXGAQzGmsgz2JJQP7arhrlUVhiD04t8rVf1
kCff7VXeJ4rB0w6p9Uf5kefsEtndKYFB20wPv66kepSPV3IyB05j8JDk6OZw
Zh2qw7WHPz7TwGD98rjijyLUH357vNEyYY1B55ZtdmIRqC/97Zs13fMQgx5p
HRpveJDv2nSTqrPD4BtnFzO5mErcL7FMnvd+gkH5pluL4okVaJ+tnzvmuGCw
Cay+KMl6j3uTDX22kz8GOYevygeUof6ZR0nYTSYJg/2R9se2U1A/Pyqqni2R
jMHoXv6xtLJ8FJ9Jdiq8KRhsb56UP/6BjHtW+XRNXyoGo37FtZ3pzMX9y+WM
PwyZGKxxHFulW0FzhHzZ9tRymss4LOkb/85C+0aZKLLMwuBg61ulKgbkwmQF
oZKXGFwLu+VozpOB++KYsQg1G4MD9g5CPqfRvKOzb5eMWQ4GW/eS2XxdknA/
WbGrdIDmW8ML/NaCElD/8DRhIy8Xg3rt0a7N+TG4D9Us17Hk0daj6TMhDqNR
Pflyeu0OzQXOdfV4fopE/WeIbPYyzfkFKWri30JxfzrbKSxNxqC+Ytb9Rbpg
3KnG3GwPaN4jv7ndVcgfxcMgdodEc0k270esKt6472T8Zz+kuT2jrk+okTs6
L/5R0xymuWHUfgsRRheUv2Ilk6s0P8CY9PWAqj3uuqFx88z5tH2oaL9xjNMC
9xiX5dtcNC/VWmeXFtFFeZH/XoHWB8DID713OQ0BxNdP+deHneYVst0F/ObG
uA+MpoItNNddM9PlfWyLe6J1jfECbT1CHDdz9p1wxF3pusHKJ5q/5jvjzOHo
hnu2wbOlXJrf462hBNz0xD1C/I60Fs2N7tRHPd4TiDtLhNxjLpoLMrNYDP8I
wf3Qoxrhdtp76Z3N1hKaD8Odv0/440maV0ZoH3naFIU79uiCVDotTsyTmfNG
fBPR8/KX9ErQXHDf2wBzh2Tc9b54L+XR4vDOoq7dj9cpuHfk1ZjFvMKgsqlM
pGV6Gu7RI9Zu3LQ4r/FudRNyz8JdUTrePJWWd26Dg+JOZ/Nxl2MJUEyg5an7
psP9SfUC3GvIh8WDEzEYsvRqNl2CgvvaYrK2bjwtL7Q1/H7KFKLruFuOPY/G
4L9cTnb3r7zG/bm6qL5wAAa9n92fPuFWinvKlszsWivac7XHBgb1Qdx3fGJ/
km6BQVMpd9IPqSrck4VdzR3NMKgG9fpS7ZArZ0y2sppgcGpu1GxuFXn1QfvQ
Gn0MZnwD6cr01bgvTe6LC1LFYMHMDv6fPLW4y5NHF315aXWDbKtFL9eI++zX
x/FePBgMjz3yJ+IJ8ph3ATlOXBjEmofI+4uR7z6v8k1rO63O93Z2iUh9xD18
QUwqdpMKBe8ux06INOEu5FEhUTNBhUf2TTcc4WjB3eHPLWYL2nl3V+RY6ZOh
T7i3bdxMBwJU2CGUdUu36DPu47+cLrZ5LcBNJvob0+H9uN+49ieG7+kcPClg
n1puNor7i0k+rT6hGXjtQYmbmvcE7nvpz8ifk56EDDecXqkETuNebCbWWMA/
Bv9quZIWvzGLe6dnWJ5kyiCcMt+hvkC3gHtdXbzt7FoXLHQN9bYpWcSdQ2y8
JXSwC6bVVjb1vEe+9yHbl+NVXXCOdfGT/Afk87Yp9KZeXXCAZzvvbDPyzdeh
2aEcXVDLi9mZOoKcnH/1AXbwC7zkam0Tz0JF+8zyRmbHxU648HvN314HecaY
UmTtRguU3c4su/AVOV3Dcavy8hb4Y1JtrLEPudzmWbY8pxaorWFWkjCE3Gnu
xpjdj2bI2DrSLTaFfPZjL3vqYhOk504d7V0hrGf6xHpIXyNMWDxyOJQTw72F
5GWoWFALBxOl6y4rI6dzv1dw1bIWDpvnlbOfR96otCBiJFYL/40egnUXkct0
Z7XbpNdAWZu/p3g1kR9k+nnuEqkaSvqCpGs3kMe2vHqw4VIFc41y+PaaIX94
lvRle2gZPG7yd9WUD/J9TLpvfu8sgwwNTiQLP+RtqrcipiJKoZt2QvCMP/Iz
VWJ1r0glsPWKan9TEHIhthrbuaRiaH5Ke+JYBHK/yFn353kUaDukYemegNyu
XemPwFEKDNsWutcvEbmRiHuftUEBHLCuHfdJQt4p+PvmBxMyvOm+pd4qBfmV
sA4ZTrts+MvuWk1fOvJP8u7VgX6p0CFj22O5bOQW51SY7gemQMrL5tIPBNf9
Ca4/2ZcMo3Mf71LJQS4/IcFeLBYPVx2WdkrkIv/hr+J6SSoWUncFFEcQPCDX
MOvrSRJMvhphvUJwzb4wzjEQAUX3hB1OykPOmUm6YnghDK7I3zo8TfC7qtwv
iqOC4dOzyuAwGXmDRnNFSoo/rBiRsrpL8F9Dl69753pDlz6+onCCl0rGK98v
cYcCQ8s7ygmunqi/zcPdBeaTKG6DBBdlZxM7HmMPf+aps64S3Gq/b3upvgW0
q3iX819f8D+f0RZcYWbXhZeNft/lInjgG81/608rA7ujO45xE3yre+zo/YP3
gHP+Ajc7wRluGboGrNuCygcJnHQEn1M25hyedASXBvcLzxHWs/pmjnv3jBvo
93qm2ULwgCUmH51OX1AoPzruQPCMXbZ2lg2BYG3vhvY5gseLsu85eycUXO8W
7N5GcNIz8Z3K1yJB4cVM0UeE93I2/qMYo2ICqNPcGKAS4qRIaHjZUTIJmPgL
GD8juCdz79nv7Clg2wGvv+kJzpi6/ufaZioQ+SdPf/UV8vdnkz8OD2cCHoO1
895ZyC88PuK8kEwGUYebn8sQ4j9y7Ld7OykffFS55KyRjNy5meEEOaQApNyA
I7qEPBL7MNb2ElKA6j6faT1CPjqo32HnKygCLZw68/QxyNnX7g8JBJUA4/40
5llCvptcKz9Zz1wK5j2Eiz0CCfXH8P1Wc89ScIz/QOvuAOSsHVujUpzLQJLC
4iVRX+Tuuw5frDd7Bxh4h2znXhDqnsfYcu/5SrDQeWGY6THyp5YNWdlr1YD7
SqVs3FXk11JVS84o1oADQY5/c15BLvV68kajaw2YuuoY7KKFXMP2Cl0HQy1Q
4JX2VbxE2LcitqlE9jrg9fKp6zVF5HtMuyN4hBoAfz2Q7PkLeWh8esAvpWYQ
ln/JR/0bOhd+RR6LVC7uAGPtNoZsFsi52BxJpD294Dx5p+zmbnTerRcdsXl6
fQSsjmS6JPw1j/tRJsGBc9XjIEPKwUGvZgbV4ex3BaJZU6AtvkHQW3QK9w2t
pcqNe7MgsmzuVPW3MdzNnQeyuYLmQaTIGd7xi8O4d9MNsisqLYJD7ufrBq73
4H4gmz50exwVhGSDI9C4HXdjFo/Lu5Oo4J+5o+kOF5Cb+7KE8qZRgbT6rf1H
DyGPrDwbw5hDBXrMYv57u1D/M1Gqlub7lgoaqzUl5MfaUH14Odkk3E0FlmXP
SFzrqI/aN0sPKNsxUPZl77PQQ6gfy+uLi2/kwIC3P1O40Bzq36x0zA16uTCg
0ckampeH3Ie5iG+CFwOFv+zdKNLI7zzSP58kgoFeyu4e2zMNuKcHzH3OkMeA
/57p0GmtOty3ZQRp/jDEAF9F8CizzQfcL94ccNIzxoBi45/492LIz1or8742
wYBmsz6/2QTqb/uVHieqmWPgsceDimI95NymopVbH2HA4JFFhZBvJepDbFMa
ct0xUBQ7c3JI6h2qMz51JHtPDDgl5glQMt7inlM123LKGwOGReUnnPiQl/3F
eS/WDwOVzg6xq/RlKH/tE2QWQ2h+dmw6vusN7hg5mK0hjrZO1tD3BY5oXvg1
zrj8Ix4DsnZsbrxUNF/8vHn9tGAiBt6Up/E/M0KucJKtWzMZA9fYChnMotH8
ohbZaSObjgEFZVmLQdkc1BfxNZ3hz6D5suYbE6Fs1G9k8huv0Fybo/DGFMsr
3IUZGqr9sjBwdEx4paMvE/fozXdQKRsDq3Ha8/rPUnFfVpwz+Prf91Ata2XK
PTSXCRsU6xnlYCBsnl16MzYJd16Srd7tXAysvdBSFDoTh/qlo7wGLTSX1Lz5
LZMtBvUVuVUV0nkY+Jp482/hATQ//k1J8hqmuf7wlfesLmje1FJJph4iY+D6
nSL5hbhgVP9bZCj3aV5QTc15e8Yf9++SOk3xNF+RsRFwHfBC9U12WqGB5txO
lycUXV6gekseYZqleUbs1QLqGSdU55VlJGjzOEg6pEDSc0HzOJk0nsVBc500
aZ3nLndR/f//7+xmU6H/fWev/J//H/XtZOI=
            "]]}}}, {{{}, {}, {
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Dashing[{Small, Small}], 
           Line3DBox[CompressedData["
1:eJxd2Xk0VlvYAHBJxkJFkaH0usZKmgzRRqOpS5FcFZHKHKWMkXnIFHrNM2V+
SaiwZYjMNJjneXpf5FIU37lrfd/ZZ33+sdZvWcs+5+z9PM9+HiFjmyum9HR0
dFpb6Oi2Yr9NLw47ceXRAN3//hyq4nj/leXZGae3o4mcBC/j7zpyScUQHD8i
xbGN4EwqdXJ0KjZgj8en+sVc5LMsN4zMbZ+AbcZ5Td8JLrGqSmtRdgNHDef3
FRH8Q6XlIre/J+CfDXzjT3RN/ixg6ws6v++qESB4/esI1mfKIUDWmVuhLwd5
Mcdn08aIMGAnk7PxguA1LxY22v3CQTRp0GQ6G3mKouOjtgdkcHl7DUUuC3mq
/0MBb6VEwB9S7fY+k7Cek/vkj8YkgQsX98UcJ3hY4oFe3ohkwOB/pYD9NfK7
Dl2sQ76pQC5n3ep+OvL4Z8pO0javwNDkxwtZCcjXvKLvvVHIB7EChQP58YTn
bW5eEeKjgLryyZrcOOS/Y40uT5ApANw84PoiBvn5orqPxmEF4EMTX9pmJPLb
w5n3RL3egNohhh1mgcj1pptJtfdLgMUCxxunB8jf/zBTfnoYgmGprEQja+QF
2rdc/ryBgCm/JljREvl0x3KHnEAlaJmgPu67h7zR0oE7JbUScHh0uufdQv4r
+NyYLOUjOOJhtDNNDXmkZV6fdX01yKbjMezhQ24UmCr6eLkO9J+t7UlPpeK+
fIyt1oSvDfBHah4fNp3HvXRa1Cc3rhOQlCtAZNks7oorq4L74wdAuOj6YYMn
07gb2xazs3WNgMM243fEFydwT1AN+9LYNQ54PBkafVtHkbvdWCsvnQIkjpjp
KJMh3GPtciku/LNg3ES8mTTcjfvO9c0XpTNzgG5Orn/q33bcTQ4uvDC/TQXM
YIdkeify1IfHQwdNqcAj4+r2m++Qe4QubtU0p4I9N86+gi7Is0ec1XY+pILE
pCM7tbciH0x/dhJ4UYEjiaKRzdGG+9KqIlkqnQrUlKczxtSacLdYjww0GKaC
HzathoY7kAeJsd/oH6MCJXNu4S+tjbirX/by1Juigjn/ZrYMHeQpwb++nKBR
wVJ3xtb1mw24f04zMAn/TQXKi2I/rW3qcXdW6PUa5KaBQXVbw5mgGtznzg+7
5qnQQHVhx2C/FnK6l8dmD52ngatSI35Nu5ELCiyPpV6kAY4C5ZDY6GoUByQe
ODtr0IDdcDkDfXoV7s/l1YTbdWkgb+9OnT/vK5G/VZ/lxvbxFc0AX9H6d7ib
qZ3q2eJFA67Xs8BOTeTpHe++hnrTQC/TzYXl9lIUD6N1NXh8aeD3jy+UrN4S
3BeDjAs4A2jgQGP9aAf1Le5js+yqr0JooO0kV40UVyHuBmaOdy2iaUD2RVT9
p6gC3HvpC1k9sPPffzYrVl8A+R6dbaJhsTTgM8tHeihCwd3Bbf1TFBZfJg4s
9S8+yMFdRNInXjOZBmqYhx93lKTh/lfZmr3mKxqwnCI9CctOxf3I9kryT8x7
TJuW1BJT0H6wFO2KweLglkE9/zyfJNy9G8SKarC46erxpd89Kwr3bT5RX3Ox
uMwkU8FWEvYS91qrzYmdWBzvKewfm3CIwJ2NdWSPFebhl3h+nLwYivuu58Ut
zFieYK5rzMq58Rx3hmqXa6qYH5+MdhqX8MOdqnVv3R1z88B7w77Bbri/dLOK
+4a5YtXcSKfEE9w/GttGLWE+3G/yWSXYCvdKIfMCRiwv5iq2MsQG6eN+kffK
5E7Mn+e63s+lV4L/58rCIvL/5V1p6xN7SfV3cG+PHc/cgXnzw3m3hjo73K/o
vTi1gf1f0kag1FNJZ9yv5RwdGsd8bOH3/si6Z7inWNdl1GA+nnFL8u4vb9yP
LRgGxGD+KSF/u7RkAO4ntjAG3sO85KBAi97FMNz5/YtHJ7D3XHEv5ik5Kxr3
5Obvy07Y9zJ9KTx6rToW93+WV6tYMOf8Z9yVvS8e96KpgbwQLL+2WU78KWBM
xl2xyH/IHdsPCjuY2xtl0nF/UJyX/zMDO78KqcstUbm4d9GpiJ1JooE5/q27
mtPy0PMWKk2dSaQB3WPvXlZR8nHX5tD5fArLr3bkCh3VMQrubOmjNDYsjyqE
CN8aXC/EXTXyZqc6mQbav72xoZcowZ1vOfHmwec0EButVfQuAznH6s8jFOz8
RoQKHbMgleIe8FNS45Q/DdC/DzEs43+HOx1juIWkDw28eq1wmIvjA+71jMuX
3rnRgLbRyr9Plypw32eW0mViSwPGlik6xfrVuP/KPeu5epkGPhQAG2+2Rtwl
XNfGZX9QgcpPQZsvmshHeELlIrE4nDa4J5o3FDlF3ipnapYKpO+A/cFcTbj/
OCe7/AiL80H6zkPcAs24u1nKSJC+UcFlh/iEkEOtuO+NNBLvLKICKfuDE1dT
2nHn8oyoTbeiglCvqG2ZWd9w72D9qCRWOw9y7afI21T7cQ9yYhdr2TsHij67
Mf1ZHcZdXeKiv+7eGfA5yEyX5fw47t80+77dc5oEml0DVupbp3BfqqqK3pI1
BtbiOhdEwmZwVzivKTSqPAya9+5iTI+dw730U3B9u0wvGGaq8FTipOKeZTaf
KbD+BdjsYnj1ghu5WeUs23rPFzDaMnW8bx9yn9+bVR3vv4ACA18v3b+Qp8mT
dG2dvgDZw7adQ3LIeXvLWS1/dQBlueaN67eRP1bIazRcaQcR39azazOR8/lK
z9N3twK1oLMX6POQu7Q3Vz8mt4LezgzBU4XIByRHIod1W4HSuRUvz/fIn57U
exLX0QJiH0LGtw3Iw80VFTIbm0GIq+Wg7TTysIp7ClJljWBT74Ol+gEa7tGm
8gy25Dqwu5q5RJaEfHKet/mKfh1IvN2tLCiC/JRD8qcjfHUga7fwng5J5Lbp
nv7fEj4BBa2s9L5TyEUPD28OptcCxRqxzy7qyD8tjSquFFaDhUcbTWPWyJ2b
ttmJh0Pw2y9jsusBcs+UdvW33BDs3nSXqrVD/tbZ1UwuqgJcYhk/5/MYuXzD
jXmJ+HKgZv3UMcsVeQNYfVac8QE02NBnOgUg5xy8Ih9YWgK4lUjuMgnIeyPs
j26n5INhEbVMyUTkL7v5RlJK88Bagp0KTxLytsZx+WMfc0FG2WR1TzLyyF8x
Lac7ssHXy2l/GNKRVzuOrNItvwLypduTywgu47BoYPI7AyhSxgotM5D3N79T
qmTIAKRcBaHiV8jXwm44mnOngfkRE2FqJvI+ewch31NJQFdwt4xZFvLmfbls
fq4J4ET57pI+gm99ke+/FhQHap7EbeRkI9dve+nWmBcFBqqXallyCOvR8B2T
gC/B5a+n1m4RnP/sty6v1gjwI0Q2c4ngfAIUVYmFUPBkuoMknYvcQDHj7jxd
MKCacLHdJ3iX/OZ2N6EA8LufdotM8MNsPg9ZVXzATsZ/9kOC2zPq+YYaewC7
f1Q1BgluFLnfQpjRFciKF4+vEvwAY8L3AxftgV5ozCxzHuE9lLddO8ppAaJc
l27uIniJ5jq7tLAeSMz7oMBF8IiP3bc5jQCkUv71ZSd4uWxnPp+5CewbTgZb
CK63ZqbH88gWxltXm8wR1iPEcT1L8LgjVNIxXG4l+Bve084cju4w09BlMZvg
d3iqKYHXvWC4xC1pTYIb3/oU+Wjvc8gSLvdoF8EFmFksBldCoOjDalIb4bt0
T2dqCs2GQb4e0ucTBK8I1z70pCES0h6el0ol7BPzROacIb94SOUr7pYkuIDg
u0Bzh0So/9VnMYewD2/N69mtvEmC7TnVZlGvkSvfk4mwTE2BL4es3bkI+7za
p9ldyCMDKkrHmicTzp17f7+E05k8KMcSqBhHOKcemw53x9XyYXWumERwPPKQ
xdfTqZIUuDafqK0XSzgX2ur+P2UKoJyH5cjTl8j/3eVkd1frDXyqJmJACkTu
43J38rh7CUzakp5ZY0V4rrbo50E9EO5oZX+caoH8npQHeUWqEiaS3MwdzZCr
Qv2eZLtKqJw23sxqinxiZthsZrUSVh20D602QJ62AFKV6avg4rhgTNBF5PlT
O/h+ctdA+dzheT8eQtzItdWkl6uH098fxXpzI38RfehP+ON6GPU+MMtpF3Ja
40Du/qJ6uOecyoLmdkKc7+74Jiz1Gb6YE5eK3kR5ROD2UvSYcAMU8iyXrB5D
fkhwsu4QRxN0+HOD2YKQ724LHy15PNAKWzaupwJ+5O1CGTf0Cr/A0V9OF1q8
UR7fZKK/NvmiF167+ieK9wnK+yf47ZPLzIbhs3FezR4hVCdcvV/sruozBvfR
n5Y/K43qCoZrTq9Vnk/CIjPx+ny+Edz/atJKid2Yhh1eYTmHk1DdMmG+Q22O
bg7W1sbaTq+hOqfALdTHpngecoiPNoX2I0+pqWjo+jAP9z1g+3qsEvkM63yr
/Md5OGubRH/PG3kf93ae6cZ5uPkmNDOUA7mmN7MzdWge5uZduU87+BX3S27W
NrEsVCjE8lZmx4UO3Od+rwXY61Jh2ohSRM0GqvdktzPLzn3H3m/dMauyMuQr
46oj9T1UKLd5hi3HCbm2ullx3AAVOs1cG7FbQfUkY/NQp/gEFU5/7mZPnm/A
nZ4rebh7GVvP5PH1kJ563OPmD4mFctJgE9nbSDG/BuWFeOnay8rYfvK4k3/F
EvmgeU4Z+zkarFeaEzYWR/7vywFYe4EGZToz2mxSUZ0sa/P3BI8GDR5k+nn2
ErkKxX8/kHD1Gg1GN72+v+FaiXu2cRbvPuy8PThD/ro9FNXzx0z/rpzwpUFB
Jr23v3ciZ6hzIlv402DLxRvhE+HoXuCuHRc8hdUHpyvFa1+Ti1He1LrY2xBE
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
            
            "]]}}}, {{{}, {}, {
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Dashing[{Small, Small}], 
           Line3DBox[CompressedData["
1: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
6j11u43q//9/Z7cYD//vO3vl/wHesGTi
            "]]}}}}, 
       GraphicsComplex3DBox[CompressedData["
1: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
vayAW1T4H6omD8s=
        "], {{{}, {}, {
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Thickness[0.01], 
           Line3DBox[CompressedData["
1:eJwl2Hf8juUbxvFvIVuyZwiRUUp+SkpWQ5Q0SMMoI3tvIWkZlZWi7FF2ZFX2
yN7Ze8ve2+99vvrj6DyOz3lefZ/nfu77uu6XPHWbV2t2T0JCwuXECQlR2yVK
SHjp3oSEMfJHQE21CLZFXa6fQT2qP0e9V+2pvqV/MOb1t/O/4pNj3vpm6vNY
Qf45Pi1fRL+42fF8R36Q3lV5EF3B/sYOYy8Qm9Aee5mpJ6+Q69GTNAHvhA/G
r8mDCUro4D+V8Pr433J9KkG/4J3x7/Hr8vfkIyV0xF/BG+Ar5YzgMTlRMHmH
/kR+hX5zvbLyI3wZ/gF+iVpUv39cA/lf9X/W/cp3wX+Rh5j/UC2B3dArxN/S
y0JD5Kv4Sv6IuRcpCdYJq4w1lFfJDWknNgn7GytEJbGJWFfsB/mmXNj/+7ac
NZh8TX8Vf1S/s16V+I35Knwufp36jP5PanP5gnqfdZ35KvjHZlfLmfDjcuJg
8i79yfxK/RZ65eTC/PN8On6p+qj+ALWefEp9yrpJ/Cf4j2Y/imsl38KL8Hfw
bNGTr+Or+WPmXqakWBfsVayRvEZuRE/TZLwbPhS/LQ+lZNQVfw1vjK+VG1Mp
moJ3x4fhd+RhlJw+waviTfB1cmaf6YScJJi8W38Kv0q/pV55eWc8I3JZNb28
TH3MzEC1vvyMdVPVHnGNzd2Vi+rdlbMHk2/or+GP61eiFFg37HWsqbxezmLN
Sfm+YPIe/an8av2iVBqbhn2K/SzXM18yHgj+0cT/PRzz1Rz6vdX35aPqz1o3
+bX4b/F9zXdRX43ngn+Vz82X1k9ptjtfjY+NY4PcjPZi07A18bfoWWw61hMb
Lt9Dj8Ueg+XE+vAf8MPN3Yp7EJsR389cV/U1bK9aWX5NzSOvV5+N76a2kFNZ
20N9A2tubqOcVe9fOWkweZ/+dH5t/P3Yg7DfsM+wEbG/0AgsNX2Kv4m3wDbJ
LagMzcB74SPxRDQSS0M98bfwlthmuSXtx37D1mHF4lnAZmKfY6Pk+vEMyImj
H3sov0B9UL+vWks+po6y7nZ8Z3xmfCfzn6hV45nkq/IP8c/p32/2M/5tvpXe
Fjmb/ik5WTD5gP4Mfr3+41ROPwNWDCur/zv/BT9ar4He0/IONUnMq4nkhbFf
mOmn1pZHW3dH3YCdivuEXtfLi5XB0ur34qvzrfW2yq2pHM3Cv4xzBr+PxmB3
sY3Y6fjN6QHsc6wG1kZ+N/ZZ+R88O38aT06f8W/jbfCD6kxsCrbBmlZqBWyX
+oRcXs0oL1cfj7NHbSCXt3a2+hU2NvYaGpvw3wGxCTsT15zSQV+YewdrK2+T
21IFmoN/jY/Dk9E4LD19idfE22Hb44ylijQX742Px5PT+HhU/b3N2Nm4lpQB
+8rcu1h7+b3YU+O3wXPwZ/C5agq1l1pd75DaXv8Q/zu+0brWWEW5OF+Bz8Sv
iGsS56faUD6tvmDdPL4P/qs8wXxDtRSWgn+CT8zn1p9g9l55C39OrxplxL7W
fw/rIO+M85hepD/wvnEe4inplzhTqDf+Pt4R2xXnMR3GZmGbsCfpJexPrF98
LjkVFY/7E8sTLLY3eSv/u3pev5v6uv4+9Y34fGq+uF/jnST2JbWlnNnaPuoH
WCdzu+WcemdjvwsmH9GfzW/WLxHnEfYX9g02UU5NE2OPpr54LbwztifOUapE
8/Fv8Ul4GpoUt5e/8w92QX6TsmL9zNXGush75QfNnJNT0ed8jXivwI+qc7Cp
8RuYbRO/H7Y7zlS5opo53qfU4vHeo34ce7q1C9TvsMnmPo7zX74/rnWc/fyi
2F/0v1HryMfVydYlUbfhF82+RW/I+fXLxrmt/w1fh++qty/OX6pMC/H+8Vzi
aWlKPMP0LV4X/wTbH+cvVaFF+ID4brEP0NS43+k7/EO8G3ZAzhW/tZw6mHxM
fy6/Vb+t3otySf4FPku8Y6lPxjuX2kg+E+ecdYv5gfFbytPMN1JLY+ni9+aT
8nn1p5m9T97OX9J7m3Ji/fU/wrrLB+OMpOPYPOwf7KnY07Al2CBsupyepmNJ
/f92YJfl6vQgNsBcPayH/H68T8hb1UN6udULevPUNOoX6jv6h9Ue+if4P/Bt
1j5NL+JZsRJYVf2l/OA462N/of/pJ8PyBYv3Jnknf0WvRtyX8sP65bBc+gP5
+rFP4p/qf6AWi31ZPayfR72o/4d6v/qlWjPeS/ROqn9i260rFXsctgz7Ps7/
2D9oRnxHGoQ3wHtiR+K8pWq0HB8S5yKeiWbG36TBeMM4D7CjcSbSv9hf2A7s
mbhfsRXYD7FPyJmppM+XHMsfTD+5vIu/qtedrxb7fdzvfIE4o+K9L94f1Fby
xXhWrPue/zj2f7mX+VpxxsR5rvcQfynOxNin5VP4fH6nudJxjbG/sR+xWXIW
moWlsG43dk2uGfebXNBcBSyv/hC+UewLerVjP5e3qcf18qqX9f5UH1C/Ut+N
dxG90/Hege2y7tn4bthKbCg2O/Yhmo2ltGYPdj3OX8qH/WCucdx38gk5n5kr
crpg8pl4V+B367fTeyneU2IP57Pxq2J/0v9BbSyfjfPbulX8MHyO2cbxridn
i2cnzjf+4eiZSyXv5W/EeUj5sR/1m8S9Jp+MM5eq02r8pzgj8ew0F3uYhuJN
45pg/8YZSzVoDf5zPFt4DpqHpfb39mE341mkAtgwc82wr+VTcn4zV+X0weSz
sYfye/Tb670c70RxbvDZ+dVqSf0f1SbyuXiGrVvLD48zQv7DfBP1OSxnPMt8
Sr5APFtm08j7+VvxDMbeIT+iXxEbybfmC5r7SW0e7xlYb3N14jzAtsc7VFwP
9Zp+Buotn9NbzO81+3zcd9g6bETcS7E/0Z/Y/dYdwG7HvU6PYD+ba4H1kc/I
BcxclzMGk8/rL+H36XfQqxRnB1+Jz8GvUZ/SH6o2lc/HPWvden4k/pfZXLF3
4Kni+wXTTysf5O/Ec0CFsOH6LbG+8tk4l+k92oCPwufjuWk+VphG4K3wfti5
OIfpfdqIj8YX4HloAVaERuKt44zEzsfZRxewpdh+rFz8LtgmbAy2UG7qc5aR
H4r9iE8d1zp+N/1v1bryCXWhdQ/Efh/7gXrXfI94j9HfH2dy7M1qIXlTnPvm
Rqlt5EtqUetH8W3iPU3+1nzdOPuwC3oF+Rtx7dRMcc+q7+kdiVn9i/yyOO/i
N7a2o/oKVp5/hc/JP61fy+xmfiy/SC8vLcIepdF4W/w77GKc3VSbtuDj8MWx
n9Bi7DEag7fD+2OX4kylOrQVH48viWedlmDFaCzeHh+AXZYf8bluypmDyZf0
l8dZG/eGmU5qZWyPWkGurD4or1VLmRumNov3EWv/USdgS809HHt0nLVYoWD6
6eKs4+MfqOrqP86O0+8gD5SvxDlJl7EV2CGsIn2IbcN+wZbFXhL7b5yTWOG4
VvyH/El1mdn06pHYk9V71E/VN/UPxJy176iF5c3xrqM/Wm2b6L9/z3vC+v8D
rbeAWg==
            "], VertexColors -> Automatic]}}}, 
        VertexColors -> CompressedData["
1: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
         "]], {
        PointSize[0.035], 
        RGBColor[1, 0, 0], 
        Point3DBox[{0, 0, 1}], 
        RGBColor[1, 1, 0], 
        Point3DBox[{-0.3072590473967495, 0.09117608017716569, 
         0.9472480140894288}]}, 
       GraphicsComplex3DBox[CompressedData["
1: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
        "], {{{}, {}, {
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Thickness[0.01], 
           
           Line3DBox[{1, 153, 121, 185, 95, 179, 147, 75, 173, 141, 115, 60, 
            168, 136, 110, 90, 51, 162, 130, 104, 84, 69, 2, 154, 122, 96, 76,
             61, 52, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
            19, 20, 21, 22, 23, 155, 123, 97, 77, 62, 53, 24, 156, 124, 98, 
            78, 63, 54, 163, 131, 105, 85, 70, 25, 157, 125, 99, 79, 174, 142,
             116, 64, 169, 137, 111, 181, 149, 91, 177, 145, 187, 119, 183, 
            151, 189, 55, 164, 132, 186, 106, 180, 148, 86, 175, 143, 117, 71,
             171, 139, 113, 93, 26, 158, 126, 100, 80, 65, 56, 165, 133, 107, 
            87, 72, 27, 159, 127, 101, 81, 66, 57, 28, 29, 30, 31, 32, 33, 34,
             35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 160, 128,
             102, 82, 67, 58, 166, 134, 108, 88, 73, 49, 161, 129, 103, 83, 
            68, 170, 138, 112, 92, 59, 167, 135, 109, 89, 176, 144, 118, 74, 
            172, 140, 114, 182, 150, 94, 178, 146, 188, 120, 184, 152, 190, 
            50}, VertexColors -> Automatic]}}}, 
        VertexColors -> CompressedData["
1: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
         "]], {
        PointSize[0.035], 
        RGBColor[1, 0, 1], 
        Point3DBox[{0, 0, 1}], 
        RGBColor[0, 1, 1], 
        Point3DBox[{0., -1.9428902930940252`*^-16, -1.0000000000000013`}]}}, {
      ViewAngle -> 0.34, ImageSize -> 350, Boxed -> False}], 
     FormBox[
      FormBox[
       TemplateBox[{"\"First\"", "\"Second\""}, "LineLegend", 
        DisplayFunction -> (FormBox[
          StyleBox[
           StyleBox[
            PaneBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[1, 0, 0]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[1, 0, 0]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[1, 0, 1]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[1, 0, 1]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
              "Grid"], Alignment -> Left, AppearanceElements -> None, 
             ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
             "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
           FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
           False], TraditionalForm]& ), 
        InterpretationFunction :> (RowBox[{"LineLegend", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "RGBColor[1, 0, 0]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 0], Editable -> False, Selectable -> 
                    False]}], "]"}], ",", 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666666, 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], "RGBColor[1, 0, 1]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 1], Editable -> False, Selectable -> 
                    False]}], "]"}]}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
       TraditionalForm], TraditionalForm]}, "Legended", 
    DisplayFunction -> (GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ), 
    InterpretationFunction -> (RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& ), Editable -> True]},
  "RowDefault"]], "Output",
 CellChangeTimes->{3.635176748100898*^9, 3.635178569054934*^9, 
  3.6352501752383003`*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Example 4", "Subsubsection",
 CellChangeTimes->{{3.6351695922110157`*^9, 3.635169598059272*^9}, {
  3.635176444103703*^9, 3.635176444289158*^9}, {3.635176492600243*^9, 
  3.6351764927267923`*^9}}],

Cell["\<\
Various orders of Interpolation for 4 pure states in a single trajectory.\
\>", "Text",
 CellChangeTimes->{{3.6351764560710278`*^9, 3.635176478438898*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"BlochPlot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}], "/", 
         RowBox[{"Sqrt", "[", "2", "]"}]}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"I", ",", "1"}], "}"}], "/", 
         RowBox[{"Sqrt", "[", "2", "]"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"BlochPlotJoined", "\[Rule]", "True"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"InterpolationOrder", "\[Rule]", "#"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ImageSize", "\[Rule]", "200"}]}], "\[IndentingNewLine]", "]"}],
     "&"}], "/@", 
   RowBox[{"Range", "[", "3", "]"}]}], "//", "Row"}]], "Input",
 CellChangeTimes->{{3.6351695991697617`*^9, 3.635169607364154*^9}, {
  3.635169729733963*^9, 3.6351697676451187`*^9}, {3.635169896440961*^9, 
  3.635169966991107*^9}, {3.6351700316259813`*^9, 3.635170074919507*^9}, {
  3.635171414186624*^9, 3.635171415957601*^9}, {3.635172318957591*^9, 
  3.635172333085135*^9}, {3.635172367542933*^9, 3.6351723966517277`*^9}, {
  3.635172980714443*^9, 3.635172981263337*^9}}],

Cell[BoxData[
 TemplateBox[{Graphics3DBox[{{{
       Opacity[0.2], 
       SphereBox[{0, 0, 0}, 1], 
       Opacity[0.5], 
       GrayLevel[0], 
       Thickness[Large], 
       Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
       Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
       Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], 
       Opacity[1], 
       GrayLevel[0], 
       Thickness[Large], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 0, 1.15}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 0, -1.15}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {1.15, 0, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {-1.15, 0, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 1.15, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, -1.15, 0}]}, {{{}, {}, {
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
aZ3nLndR/f//7+xmU6H/fWev/J//H/XtZOI=
          "]]}}}, {{{}, {}, {
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
d3iqKYHXvWC4xC1pTYIb3/oU+Wjvc8gSLvdoF8EFmFksBldCoOjDalIb4bt0
T2dqCs2GQb4e0ucTBK8I1z70pCES0h6el0ol7BPzROacIb94SOUr7pYkuIDg
u0Bzh0So/9VnMYewD2/N69mtvEmC7TnVZlGvkSvfk4mwTE2BL4es3bkI+7za
p9ldyCMDKkrHmicTzp17f7+E05k8KMcSqBhHOKcemw53x9XyYXWumERwPPKQ
xdfTqZIUuDafqK0XSzgX2ur+P2UKoJyH5cjTl8j/3eVkd1frDXyqJmJACkTu
43J38rh7CUzakp5ZY0V4rrbo50E9EO5oZX+caoH8npQHeUWqEiaS3MwdzZCr
Qv2eZLtKqJw23sxqinxiZthsZrUSVh20D602QJ62AFKV6avg4rhgTNBF5PlT
O/h+ctdA+dzheT8eQtzItdWkl6uH098fxXpzI38RfehP+ON6GPU+MMtpF3Ja
40Du/qJ6uOecyoLmdkKc7+74Jiz1Gb6YE5eK3kR5ROD2UvSYcAMU8iyXrB5D
fkhwsu4QRxN0+HOD2YKQ724LHy15PNAKWzaupwJ+5O1CGTf0Cr/A0V9OF1q8
UR7fZKK/NvmiF167+ieK9wnK+yf47ZPLzIbhs3FezR4hVCdcvV/sruozBvfR
n5Y/K43qCoZrTq9Vnk/CIjPx+ny+Edz/atJKid2Yhh1eYTmHk1DdMmG+Q22O
bg7W1sbaTq+hOqfALdTHpngecoiPNoX2I0+pqWjo+jAP9z1g+3qsEvkM63yr
/Md5OGubRH/PG3kf93ae6cZ5uPkmNDOUA7mmN7MzdWge5uZduU87+BX3S27W
NrEsVCjE8lZmx4UO3Od+rwXY61Jh2ohSRM0GqvdktzPLzn3H3m/dMauyMuQr
46oj9T1UKLd5hi3HCbm2ullx3AAVOs1cG7FbQfUkY/NQp/gEFU5/7mZPnm/A
nZ4rebh7GVvP5PH1kJ563OPmD4mFctJgE9nbSDG/BuWFeOnay8rYfvK4k3/F
EvmgeU4Z+zkarFeaEzYWR/7vywFYe4EGZToz2mxSUZ0sa/P3BI8GDR5k+nn2
ErkKxX8/kHD1Gg1GN72+v+FaiXu2cRbvPuy8PThD/ro9FNXzx0z/rpzwpUFB
Jr23v3ciZ6hzIlv402DLxRvhE+HoXuCuHRc8hdUHpyvFa1+Ti1He1LrY2xBE
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
          "]]}}}, {{{}, {}, {
        
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
6j11u43q//9/Z7cYD//vO3vl/wHesGTi
          "]]}}}}, 
     GraphicsComplex3DBox[CompressedData["
1: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
      "], {{{}, {}, {
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Thickness[0.01], 
         Line3DBox[{1, 133, 109, 89, 72, 59, 51, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
          11, 12, 13, 14, 15, 16, 134, 110, 90, 73, 60, 52, 141, 117, 97, 80, 
          67, 17, 135, 111, 91, 74, 61, 146, 122, 102, 154, 130, 158, 85, 151,
           127, 107, 53, 142, 118, 98, 81, 68, 18, 136, 112, 92, 75, 62, 54, 
          19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 137, 113, 
          93, 76, 63, 55, 143, 119, 99, 82, 69, 33, 138, 114, 94, 77, 64, 147,
           123, 103, 86, 56, 144, 120, 100, 153, 129, 83, 150, 126, 157, 106, 
          155, 131, 159, 70, 148, 124, 104, 87, 34, 139, 115, 95, 78, 65, 57, 
          35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 140, 
          116, 96, 79, 66, 58, 145, 121, 101, 84, 71, 149, 125, 105, 88, 152, 
          128, 108, 156, 132, 160, 50}, VertexColors -> Automatic]}}}, 
      VertexColors -> CompressedData["
1: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
dWY8B/8DbMekAA==
       "]], {
      PointSize[0.035], 
      RGBColor[0.742077, 0.0624857, 0.00605783], 
      Point3DBox[{0, 0, 1}], 
      RGBColor[0.8280513333333334, 0.37499046666666663`, 0.3373718866666666], 
      
      Point3DBox[{0, -1, 0}]}}, {
    ViewAngle -> 0.34, ImageSize -> 200, Boxed -> False}],Graphics3DBox[{{{
       Opacity[0.2], 
       SphereBox[{0, 0, 0}, 1], 
       Opacity[0.5], 
       GrayLevel[0], 
       Thickness[Large], 
       Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
       Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
       Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], 
       Opacity[1], 
       GrayLevel[0], 
       Thickness[Large], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 0, 1.15}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 0, -1.15}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {1.15, 0, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {-1.15, 0, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 1.15, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, -1.15, 0}]}, {{{}, {}, {
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
aZ3nLndR/f//7+xmU6H/fWev/J//H/XtZOI=
          "]]}}}, {{{}, {}, {
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
d3iqKYHXvWC4xC1pTYIb3/oU+Wjvc8gSLvdoF8EFmFksBldCoOjDalIb4bt0
T2dqCs2GQb4e0ucTBK8I1z70pCES0h6el0ol7BPzROacIb94SOUr7pYkuIDg
u0Bzh0So/9VnMYewD2/N69mtvEmC7TnVZlGvkSvfk4mwTE2BL4es3bkI+7za
p9ldyCMDKkrHmicTzp17f7+E05k8KMcSqBhHOKcemw53x9XyYXWumERwPPKQ
xdfTqZIUuDafqK0XSzgX2ur+P2UKoJyH5cjTl8j/3eVkd1frDXyqJmJACkTu
43J38rh7CUzakp5ZY0V4rrbo50E9EO5oZX+caoH8npQHeUWqEiaS3MwdzZCr
Qv2eZLtKqJw23sxqinxiZthsZrUSVh20D602QJ62AFKV6avg4rhgTNBF5PlT
O/h+ctdA+dzheT8eQtzItdWkl6uH098fxXpzI38RfehP+ON6GPU+MMtpF3Ja
40Du/qJ6uOecyoLmdkKc7+74Jiz1Gb6YE5eK3kR5ROD2UvSYcAMU8iyXrB5D
fkhwsu4QRxN0+HOD2YKQ724LHy15PNAKWzaupwJ+5O1CGTf0Cr/A0V9OF1q8
UR7fZKK/NvmiF167+ieK9wnK+yf47ZPLzIbhs3FezR4hVCdcvV/sruozBvfR
n5Y/K43qCoZrTq9Vnk/CIjPx+ny+Edz/atJKid2Yhh1eYTmHk1DdMmG+Q22O
bg7W1sbaTq+hOqfALdTHpngecoiPNoX2I0+pqWjo+jAP9z1g+3qsEvkM63yr
/Md5OGubRH/PG3kf93ae6cZ5uPkmNDOUA7mmN7MzdWge5uZduU87+BX3S27W
NrEsVCjE8lZmx4UO3Od+rwXY61Jh2ohSRM0GqvdktzPLzn3H3m/dMauyMuQr
46oj9T1UKLd5hi3HCbm2ullx3AAVOs1cG7FbQfUkY/NQp/gEFU5/7mZPnm/A
nZ4rebh7GVvP5PH1kJ563OPmD4mFctJgE9nbSDG/BuWFeOnay8rYfvK4k3/F
EvmgeU4Z+zkarFeaEzYWR/7vywFYe4EGZToz2mxSUZ0sa/P3BI8GDR5k+nn2
ErkKxX8/kHD1Gg1GN72+v+FaiXu2cRbvPuy8PThD/ro9FNXzx0z/rpzwpUFB
Jr23v3ciZ6hzIlv402DLxRvhE+HoXuCuHRc8hdUHpyvFa1+Ti1He1LrY2xBE
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
          "]]}}}, {{{}, {}, {
        
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
6j11u43q//9/Z7cYD//vO3vl/wHesGTi
          "]]}}}}, 
     GraphicsComplex3DBox[CompressedData["
1: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
s2dH9ccI3P5qT7YtTQn+B9OyoS4=
      "], {{{}, {}, {
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Thickness[0.01], 
         Line3DBox[CompressedData["
1:eJwl1Xe4j3UYBvBj7723Y50jW0UyCsmKRJQGkWjIiux1jp1K0ZBViZJRpEFZ
WZXKbFAoRdmr7NHnufrjc+77+/xe7/xel8Suvdv2SpOQkDDen8jq/hyU8+hH
S24kLelITwYykokajj8k5/MMd3ETzcyvylVM4lEyU9P8L/ku/WnFfWbZ+Vaf
zs00t74mV/Mc3ehklo+d+pv01BP5Xc8S96n/Ld+jj16e0QyI68vCjOBn62dl
JcbQ2vp+mYPv9Dd4Qi/JPr0WLfTrcg2TeYys8azmh+WCOCd3U5ts8Rx+OyLf
ZyBtuIXs5CAnucgd13DsUbmQQdxDnXj/8VFYK56nO3niGmbH5CIGx/uxLsJu
vS0d9ZwM4/v4NjKZFGZYPylLsV+/Nb5bfH/W6S/Qg7zkIz8FKEghCsdzOPa4
XMwQ2lE3vqd5Wr7UX+RxisSzmJ2QSxga78+6KHv0e3lAz8XW2BeyIjP1p2Rp
fov3IqswjnrWrWU6hrLeuq+swJR4T7IYv8S3pLOen136WxSN57Y+KT9gGO2p
H9/QPD0b9JfiXVEsns/slPyQ4XSgAcWp57fTcikjYk9zGyUoSak4t2POyGWM
jD3H7ZSO8/jtrPyIUfH9aBh7xjwDG/WX432QGOc2+0cuZ3S8Px40y802fRaN
Yh9ZZ2ST3k8mMTW+ryzOSH6N/SkrM5ae1o/IAvygv83TehkO6GXivvV/5cek
xLVpHHvPPBOb9Wnx7ygbz2J2Tn5CKg9xB+UoTwWS4p4dd15+yhgepgnJcX6/
XZCfMZZO3Bl7zzwzX+mv0IuKcX6zi3IF42IPxHXN8rBdn03T2H/WWfhafzX2
rF6CvXpvuugFGc6P1gPkDaQyN64nyzKKP6wHy6pxTNy7vCRXMj7eazyTWV52
6HNoFnvPOivf6K/Rh0rxfGaX5edMiHuhOZWpQlWqUZ0a8TyOvyK/YCJdaRF7
1TwbW/TX6Ru/WRfiJ/2deFa9HH/qQ2S1NP//v1DT+j82g6Yg
          "], VertexColors -> 
          Automatic]}}}, VertexColors -> CompressedData["
1:eJwNl3lUjG0YxrWgXZt2LSpRtNKmutJGypYQoURJ8bVY0yJbloiolBIi7StK
y7RP0sykmSYjkVQ07yBRsvM9f3XOe+ZM897P/fx+16UTEOYVKDxt2rQzQtOm
iZC/JndbnVUaR6EQ+clI+28ZuiOafVW6j6BVffWG98xR/HfjuotscgV+X3Mb
y645h7qTDCV+/yguLW99NehyH2opbql/FVPw9N+HtHfUKJo35k7r7n8A+Sfn
n93nXMfePmZ39rdRXHV8kdMaUoXdZ65fWF59C/vu3KyNn8HH3PGUsjPqj5D0
bFSK73kX548r7dylyEeLqLhbSFkNdLPo2R65eZBcG18XocuH9mvh5XMC6yCc
lDkrwLUIijH5LGtzPjRT1jzmytOw7Kze8URuKZbWH8gWcuRjYekGduGdBhz5
rSlsp1AB+gcLrcnVfPxuH8+Zb9SEiU6D+5KDlQg1u7adv5WPkD0KcyWnmnCP
+/2DXdIDZPY82pQWwseCqNeDn+qbcS5AN++bRRWMg1jT/ovioz10jFuf0oIr
Mzq7E/9UY0AqIXj5GT4+yL6QVt3eCs5b65PH82swfscsfmUaH+PpYjHbrNtg
2a+bu/ZwHS6mZ66bmcuHS9LggrsydDC8g5cX2NPgdrvgDb2SDx3LVI2jz+hI
Fz8YufNtAwKuF+qUNvPxsumCi3VZO1wEcQnRPk24nrdGO/0pmc9f/4rTUY/h
s89AZcq4GZa5o11FA+T7NY+sr/PuQNyvizu2Kbdg6zQHq6iPfFQVWS+ZMHqC
eg+d0HO/WpAdZr19xS8+Kt73+tZOPkF6jYpNUHcrnJ/qL1kmQSFRpqp6T1cn
Tpl3NZhUt0HUubpzqQqFj8ORPvkZDEg9GRUrTKJjreJMtXF9Cjfn9VlT/kwU
6xgrUDva8bfXXbVrMQUzzxOr5W1Y8D9t3qu4/DGeFJnySpworNQTK+gU7kLp
jEzfzxod+BYh4Vq9joLT627r0FddkLnanFEr+gRlqTl7j/pTOD/TWUzmwVOc
faOYvoL/BCdZA174j8KizytktB26kbWKueVMfSfqvkpTi2IpiHbLWZQUdqOt
bVlvZQ4Ds8zf2GsmUtARc/8pJMtGwmZ1xUtRTHxgRHp2pFMYmfJ+s2k/GwHl
Ogqmniws2vhNIiuPgvIm4WGd12ysln/3hGbahcRJrbMRDykkyWqeue/MwbNk
Gdff05/C4+TSh+FtFA4u7XetKecgXOPrYYOPTzF/3q9bERwKtxpn5CUo9cB7
6Gb18YBuXJoX5bZwkML+nzPmbzjag+hrvgpezG5sVhZkyn6i8PBefuu1dz1Y
6DXVqQI2oPGvbOo3haXFj4RyPLgoVG8dsSpk45zczAMzpAQw1Q3Zol3DRYXg
vy2rNDnYuov1+amaAF1rxzk39XpBVzMzdb3MgQfDyjhzvgDlvJGP78724t5m
/eDUnxxkz01Vu2wlgHD3Ud2cr72Qy/7+q39fD2SS0ugJrgJc0zn2S8/3Gdw/
//l8tK8HMzdtNLRaLwB3gc9EfsMzXMxVXfHbiYudsuKQCxAg/g5n+m1DHnz9
FH/uf8jFy1d+8h/DBIg8VFfrf4mHbwbLZFy0e3Fw34kTgccEOO5eIPL8Hw+n
Sicd46/14sfrs0yh9lHYGbkvku0ox/58haRe2ZPoDPaY9V6djy+fT7c7n6+F
fKopb+PBAsgGpbj0GvJx02bBzB9L6zFX0r9jSqoE87NkLOfY8KF/24uJfho8
b/m8aXIoR7w3d+Docj7kszMl/8Y04uHOOy/u/KiAyqW3DmMb+LBQOTGUcbkJ
rDWya/Wq7wPZ7/j5N/i4fnWSE3+nDUIqblMxW+pBZeVkvCsinx+y1b0USYd5
2djWBLkG6J0bO+YgR8EuSlFMfDEDHX9eDH+YS0ehkd+X2VoUlk+/17HiDwNb
v0okuX+nw+BgvqrfIgp7akpa/zCZOLvedDKO244RR/vvtKUUHKzp0WM3WBBr
D1IRqXyMwaQ5SeYrKbQf/zCuFt6FAc/Sn72XO3Bzx9SNqoMUMvxLbgUd6Iap
+EyVGyYMvL16WGHeKQrye0vSNr3qht6l0kltGSb+/l3gOpFM4cS/ro/Fy9iY
PJV99fUQE9JyD43Mb1H4e89oyK6ADZ83J8cONbCwNTfxSUIpBY6F7MMQOQ7k
vY7O3JbZhclss4jsUQpXu3kHD5X3oGdyftjD6WwwMyZzRaYoHCkoH9JQ5eJ9
1ctN+QfYGFESuRInKsDD3XLGO05wsUgk46bTCBtfbAXmoQoCTLMtURoc46Je
eK2r+yYOuNeELz/UEQApIf6tG3thaWvkuY/OQb5+xMqCwwL89DP3y3rMg8P7
6wZDvr1QdJondrFlFLqRt3Qu7yyH747JujdHjsHwq2mNgQofW6KXz+Bp1OK6
yi/bdRfzIe0rEa9rwIe/lJJBYncdrjD/hC5cUAzNC/1CRUv4yFFju0scpmHf
iOD2jIIybDt716HBmQ+te0f+85ZthJLpjrGwhAqM0aRMIrz4SA+rcXqzrQn+
0llC6R73oaxz4cGPDD5c0+IMPu1rQ9aPB6x3/DrUqd38eiifD7tHF+9lONIx
7YQR51oeDRYLz79olKYw7PzWz0aIgXnp3utkPrZhk1XiQL46hesHLlw+wmBg
sV8UI6qVjro2XkbeAsK9cOe4iTQmrtuWiSzObEdEYquYmzUFqxbdwPhQFh7k
MqcSYx5jw5w883A3CuLrfzIjbbrQUaBXNLyxA8nXQr7/jCD/d370JufN3Qgq
2mMjP9WJ7janvwXxFKSyX+8SbuvG1ILvI3ueM5CQfrr5bBLZBxGpA7z5bDh8
erneqpSJ2DEFu9gsCp9XN+1YmcTGQAcnfv1pFtpil4XIFVE44Cru6fadDVPz
8mDpoC40B/T6vh2mcCrwU1dgag/muzk1i1DduOLzSfv8FwpK+QvXv/jXg8RT
e5IHN7ORrCp0u3aaAN/F314T2s1F6CxjJ/vHbNjfO9LzaJYA6aWJ1tO4XFQd
er2GYcuByt/RJidNAc5ElmRU2Pci1tDYoa+Qg5bjwcaM/QJYvp+6EFfEQ6b4
mJqCQy9CXgYGlmrxcT64LaH8Wy0S5YL2b91WCPkITfEzxnwMBNmNBuXVo8K9
Ra95vARmxctCLtnxkW/AXX0QxN9ddRF/88sRpL5sjs9tkgcuh8TJ97VhtyVP
U4FZD2Wte/Yby/gwlOLfPHWXjsCXFaMHohug+M5Ln6ZIIaXUufx5EAMhO3cc
YvjQ8UfLYsbJuRQmUxunqZowkZCYtVZ1UTuu6kdlKJlRYAmriIuJsHBgb8XI
E+nH+BlQPD/nDAVV2+iO4qlueE/uEn3uzMTBwK6ObakULH4l7z6xhY1CNf+e
M8os3LDYqD56h4Lkv7QAkzY2uD8Wb73+jYXp/T8MY39Q6CtcHOlnzsVKao1m
+CU2LBWnn3QSE2A/3b6t6QYX41Mif5YLcZD31PfKHGUBdtO7JhvFe9GU1GT7
eD8Hl55EBZ2JFoDG3WdWO8zDG+byxRVRvZg7MZnLaRpF2mym+lqzcqRSLyRj
9WKwpU5Xxk2JDxnH+fe039XAb8vg3tWq+biwgX5jpT4fTQelrLjX67CyhGm/
vLoIqqIto58t+PDbdPnsJxcaNladkXviUAbPnAtjr5cR/huO3vzX1wA3Jcfv
vZ4V2LJBO69yLR8r1Xu/nHJpwoIPO16wZ9/HqaHtanPTCeevta6bt74NwSF7
a9TL63B38w3dxnt8OOpa8bMNyHm9f3LhViQNdX94Z6ZJkftVwEpkj3bCO1BO
TIvTBmP7295fVCm4FB87cLmSAe0UU4FcAR0Jez/1MQwoeHkk+Y5FM6FX+l9i
Ulw7HpXPkDtvSWHJzJ7N7l4snE/9F9i94zEujbwXveRCoWCpUJ2mZhdsn/ud
FNh04HzlXf054RTEpIcqKzy6ceK3WqdnXydct+VPvI8jz6u/MzZVd2PrN41t
STQGPALvH+u5QOHnacPqvRok5+j9thi+ysTibc5tOdcpCHLO67Dj2ci2+/mk
OZiFH3uyajcWUHDrOq384D2513M9MgI9upDvYsAWG6LwyyQ6+tWZHnDGVgsK
X3Tja/Xe7axxCoF5IZI2Ez3wfW9SGuPJBl8tPv/5X7KH/V3MdZu55L2OXK19
xMZwf+Od19ICvOUfdb/czsUDU4MNFxZyYFuxZfM5DQGK3qyumm/Wi5wcE6tL
Nzh4arJL+2WEAD2mfXfCbvDQkX4txcikF9dzfGqZc/iwX5Q772dTLVav98jd
TBUgObRvXulCPtBt/q0soh4hhslT/XElWKQ3f+0zWz5277p6cYt0A+Hp+YLX
+8vBealwMv4myc9XyvLdG9pgkZckseJqPaZtvxuaXcKH8eHkN+cSSW53XZsT
69aArOpbnD/yFPgKC1+Gr2Ig3VRz0Ut7Orj67jFMbQo3WJUjpkpMhDetD6uQ
b8c21uU+WxMKagMB74T5TPx+Hb5X73M7wn7JaY6cJnxbn2IiLOhGQ/O5mN/z
mbAx/52Qf5XCltjyQuXVbHStOXbf4g8TG3JO35HKIZxfv2NuVRUbafu25or1
s7DH9nBw0zcK8wsjDRv0uVBfq7RU6gQbF2efOu8/Q4DUNIMfspe5mBW7ejX9
Cxurpt8JcJktwP1/tOlrf3PRsELM8WwgB1mHD/qkRwmwVW3tiqJeHmS3fi55
EtKLJP81Ab/n8/EvR0vZaUY9nr83vi6XWQxdxa/qu6z4GHklJ6lfQIOTuIFq
jjiZZ/+tx8aFfFivGtmVspmODJWLypde0nDc7GCw3xwK43YZxf4jDKwwbCl+
84qOFsYmEYfLFAqPfzR1WsKGSi1tf2IHE7YqJzKyhAV4Zv0roOIAF57nhscb
e9lIDzcTuSIngMeBLIPwN1w8qr+2UsKdg6uHdr73M+Uj7o8rb86renwPnvC6
F1CKeWpzLtvoUXDfztQQWsFE+sa3ZseXt6Mi/ZaEwjXCvaj9eh+DSC946zjR
b8bCoHxCtJ6EAF6T6y+FF3HBDq8p6pzFwQn1uAOHYgXQvpSo9uQzD/fts2vT
SY7O93h54Cvp12tH36iYqpTj/qKu+yuPHkWk5g3rDbP5CM5ROUTvrMGyX5zp
q17ngcHJWbhdj4+IwpmN34/VIW/Og3vecUVQdny4ZTbhWMPXTwZDRiSvam10
LxQvg0tZfPs46bkL9mZb9zY0wO+cyR8x0wrM0jHc2bOGD93PQ53PrJqQ1N/W
PvazErbOK1ZZXiN5Q+Xdu2bXNjydu8Kk6modVKKybIdJD215LnlOR50OVW1V
gZ4PDcfexQ1oS1J40998e05/J+lFYTvz2tqg6lg8S5lwTHVFVJDGPQbSjC/8
eJVJR6jjrx+v5lH4/siiM/Q/Jvi7Vz9dGt4OX+f5s4uXUKgsMOSWuBIfSWfc
iPR+jIUrZP7Ldqbwo0y08oBsFw6ExX7aZ9SBmU3L7IzDKKgfSx3ku3RDNne/
vKCzE/ELfMekCMfOOJ8+JlxBnm83ydAuZ6DEo3PgO+lx0o9rfKyUSF5tkNSr
SWDisqLv2YcZFEaZYccVj7IRP3Vx7MgWFhQGnwRE5VMok3f5E/KWDbfr6RVy
Dl3IXNKdqPaGcHt28zrV4z2Y59wbF9fTjbzdRn/GSP+Szju3m/+hB62aV+s7
XdlIyUTx6B+yn63Oo1FeXFx/PscuqoJN8sWw5ATpX5IJX9Y9b+TivjSDt1ef
A4ZESm6xugB2GTddRgx7cX97uYUgjYPeGQEZI+EC3Fm/0iQ4jQd//73saoNe
VE7njPRrkNx4KXUqO7cWZpP2Dj5lBejmVz1sNiL5QdT4GHdjPdqvH/GjXEtg
6K/e+oP0mnbhiYWrJmnghEa4rt1cjrP2fx6mZJPPy3Ps35a34bpfSPzQoXoc
jL1zoqWYj/KFQSekjtERd/TmP6GFDfC/tXyBJuHYFTftL/WODJheizm7y5SO
xvneVp9JT4ncU/ysXpyc75ayuNjp7XC6nfXD05hCs4fYhvgXTLRkrC1nD7Wj
8HGbynTCsZTX2sPFw90In5/1KEmdiSwVhXesKxTCGuA5tJx4R5B0R3yciYrN
N3Zr3aYgHOt24kcZG0cMxp80MllQEyyZOUT6QndBcsI+LS5OnIxy3xLNhnWa
c1LYdAH0j2Up2JzjQrNpYuok8ZLWrfbOTYoC9GUtkUn/SvqCfnFL8HYOclbv
Z986IoChfXPPnS4e7um2Czbs7EXXq4WfZxGOlfPUbga9r4PlViURrYBi6Kzl
J52x5MMpJqJQ+TINR6I1QvQHyuD26+aAVwEftcI105VX0eG56uUBhRYa9i6O
1z2lQYH+/Er2Bx4DDW1z6ku66dCr/C9g5yUKDS0xHCkTNoq9WTt31DHxLn3Z
jSIhkot0wmP79nGxlXk2I66LjVDJDaG5sqQXyymaPnpBOJaxlCVYxkHPhOPR
/SbEO+bL/Jxa6rGx70Xd/QWlkJ8z32O7LgWtn3SZi0uZkP3suGyVbTsUjlXv
sU4jz2uF26v92VCKXztcocdC4lXXYxbiAgy/7ChIv8vF4P3t3ufEODj7Jfpj
XIwAnyp+5zYLeFg5ff83veO90OjoOtC1mI9pNabU7200BKyq6RvdXwYT22yp
zDzCpX0ByzUW01FZddRE4yINzrZpGSw1cr6yCSdEGxko/MF94VpFB3+uQ3Oe
DoUOs5ovd+cy8VP/u99brXbwPN4anEwh/ddOR3yVNxt2D8Nat0mwMJTSlrBu
pgCipZUD/DQu/tkU5M74yYb+c6ECR2s+TqEy1JzM/TEXsWZ65dhef7tcgvTu
qmuz2uSC6Bgdtq+V+EZDqnFIia0m4cntm7XccQY4l4JuzH5Ph/eP01s9zfjo
6li55se3etz4LilIzyzF6spzRR8J/79ZjZyYu4/0z5VmIjPAwuIr7YdnSwrQ
LPn6wIpKLpoXKYpIKXMQ4xL/a1+cAOv2ql3q/s6DxqEnsVKXe/Hh25qXCYT/
i7r3Kt+SLEfz08dnzHKj8PdpH+ulIh9pPbIDyrQaVHp4enm25CE0WW5yVJeP
DpfpIomRdejpNfDt31EEpQFjxTxzPsbabh721SLvu97+rdqnUjQ+PGoeRfhv
JP1T1LGiAR+c8o7l6FRAMMOkeSfh/6yXVNUxsyYsWz9lF/uxEqkT9UFNaSTH
+hyumIU2CP9bEnLydB04YhpuBwn/T1oc6htSpCOytklldCUNb7ZwxCskSP78
Wlfcyu2E9T/N5Pe0NlxqNttXoEJBROmQ39BNMs9fNkIuqXRsMxSS2E34zwxL
OF64m4lOF4cI+T3tKJayUbYn/B8/ulHOn8wx+ElgTesq0keibs6dR/ivE5JQ
clO8C7JLL+Sa6HWA7nb5cdV/FPSsww6fWtaNjT9uVj1q7UT2pQehN2IptJ/z
6OOVdCMk2bp6TwEDAw0bkhIJ/9N2Hy/QUCD7c0FBQy+eCYfxIIED4f+7HQFm
VYfYCO/hxXuvZ0E7c7BKgvB/eLFuuNsQGys3NtJ2W3VhdqnenjuDFLgzR+yq
Y3uwdp+KO/9pN+IbzzOPEf4PzsuY3UT14PCjttYIJzYoXy3jMML/Cau4Sek1
XMw9Gn75eQnhj8vXxhjC/xvexhtj6rkw/62h+kqH5JDqcg8Hwv8ZXx9LthC+
0+rHK65d5cDny2BvMOG/xFvhgyNXeDBqe/bpj24vHKplju4k/G9rurj987Va
3HapPr/pSgHC8/RjPQj/3W4atQa512PC64NC+IISLPibEpNI+D/FzolpH6VB
dkbgVTHPcgx/jHiqSfjvun6nmEVhG1hLferKguthIq2b5E34H3Gmm8M6QgdP
cblxm2YDWhQzvUvlyNz81P4E2DIQ02lUlb+AjsWFfSknCf+3WRU8PSHCxNz5
2xKG/5LniTnizxZRSBX2lWrsYeLuIUev/P52dCzSTEs9RaFHf9TuxGA3mL65
z3iKTLASs1P9Cf+/b59547EL6ZvVaZkHKCb8lhQ8yb9F4Z+cjXlmMRvBorZb
M+ksTCxLfRZJ+H93we3FrhpcWM4pWit0hI2kjbqy30QF2DfxTJt1movcHW4e
w6NsnNv3PO6NAnkeGiFv94ULO8W/In1bONC3/SKtT/h/pStKVZvBQ+QZU/Es
v17sy8p8lGHAh1ikyvD3V3XYpXi+Ote1GFpjO1aoEv5Heuj8vHyShi9lIjPS
WssglKglGMnnI3qb7sbnbnTcGz15p/cBDUMPpx9XIvwvu3fpWiWbgZ/JjFaF
Tjo26P+Um0qisGKni+4XI5JPdHp9mQ+YsNuso2VB+F+eWnh+XwgXI/v6P77q
JD37eZCWCeH/9ME1i7fyuLA6e1HG14GDyMqyZX+M+UhgOtzhPqjHqeTV4bbS
pTiTXZI/PpeCREfLzPVLmPBsGFtx36IdLl+cVBmk1xds6VS6sY0N/1U+/Rqa
LLxZry9UR3q60TqR6oW3uQjeUJHPF+VAauDnAhHC/03OD9/bj/KgtOfV7NDY
XqgHrTD2J/w3PTtofWgdDS+P3zros7kMgidzVBYR/h/rYF57tYgOqXVztw8c
o+FRnfo3P8L/LQMnojsfMfCu/cRQURkd2++2atoS/t//9/B9iAYTlhO5uz1U
2yHWGM6bTfjPfsnfbL6O5O0Th+s6RFiw2nBXrI/0lFVzP76PucrFmf5fPwKn
2NA7FB3AIf3igUxAXdFDGqaHWTAopXKoeOrUZ5F+cfhLlGKPHx2OcW/5TIoG
yfJPEizSL2aEZd2/LmBAZptibvQIHZPVk7rPSC+Yt3PF1URBPTrLj2VrHStF
vP5s33jC/+PPi3pmhrBJ37D5FW5N+rfXvR9ZJP9LxKueeFnKhfvToE2hChz8
M/ln9YXk/5o/HK7nVx74fRZZXhd6oZKz9PZJktuT5jk+D7amoVvwX4mNXhnc
87r6tpM+eCaz7NXULCaKLwodVpZqR0juGculpN+9nXPk1++VpO/MOVOUPcXE
hVDtniaSN37krX64YT0dE5WL3dY9pWGq8if9M9m3fom03HkDDJz6FvZgOY+O
JT2Bf4qI368HJ2WJ5nPhIy81zVCKgzmGG+rslvDBoeIzTobQwFfh2B9OKsO9
55uPjJP50zI3P9q9iezn6G7GF1nCyZKRNfnEm2Y9Oc0y30ifbXmUWvaZjgH2
u68XiQejrt3d/eAhFzYXmkuL1Tj47iPUSBEPCl7scPf+zcM6eT+/9qu9kO4S
v7yGeDDTpVLJZ3o5ntxq+3zXNgpt84+k3yIeXPhBSn5ZVQ0EE2e/M+7noW68
g1dMPDgpJ6rPDa2DoGLHw+z1RZhd8n48jHgwofiwlooqDaJjphY9b0rx59Hh
YHviweJXBqEHCxtQqTXsGKZWAV6U2bgR8WDCuo8LvY2boDZr1pG2d5Vo9Ti8
/zTxYPv3xrSqpW3Q/Fg8MySuDuXd/R4OxIMj/kXHW+XouHlG0XSFCw3ys2O0
oogHB4VsKtPYnRhIn8q7WNuGlScmMyOJB7/HTPrSsxj4b0h2+rdkOjZqiV4x
Ih60ZJi8ct9F7rmFZUtsYDs2RCxLn048eHnnBxMbOxZ2GXgu37vyMYbk+b8p
J9I7li83WjKjC4O3rsZf1u6A3nkr6WjiwQLFl04cdOOobpWYdlMnip12FAYS
D74tNk5wKu6GkpG9mwzpYYeOqL/zJh58afV23SU5NkYildP7YpgkP+zNFCEe
DCz2FZ95kA1B82/3ljUs5H1/79+TR+EP/cqCB4NseD7gtMov7oKXoIu3m3hQ
9/hB8xkxPQgUtjWe09WNvaG2i1cQD3a+u/XBiN+Ddae3Lac7sqFoN+uTOfGg
cqT6r02ruHjXmWErRvjNNfybsYx4cHSpp09XLRcRE3Sb2dpkT6QbNWcSDwrm
bv1kOq8Xze9lI8aSOVAL1p40JB6kLXp9bW4yD7JTkv+05/ZCVLbExYB4cGvf
uStqybXo/zBhyjtZgKYZr/xliQcj9xq+LXOqh4TJvP8s1Eswn7VuszfxYFLN
Ub2Tb2gw7tleu8u1HHJuC18O3+AjbKLoY9+9NowueOqTtqMeUr1DV+cQD3Ie
TI8uPUiH6NB1V32VBkx0uYQcIh5M3ntN2NKKgbm7RFgr59HxKSSr1ZN40Cvb
gBk4jYkmmcXn037RYRyfm3ydePDfNtHg7d1k7oHWdxSet+PZYCd3G/HgxIpO
6sNAN458LQiMkWMi0HXXxwXEg/Ymoa62zmyszr6ubPiOcFG37Og+4sG4reYS
HwrZGPyyXV+8hYXXH10clhIPJlH5khVqXMgJnLneJNfUWCqwa4kHkxcdMFA+
xcWeyrCv8u/YcPB+43OPeLDK65Ji0jgXMZJ5enKbORgtM1s4elgAN+WNdtuf
8OBTE6jSuI3kkV9eWduJBxdDeboTrw7R461ye6yIB2ma+kOEGxIWP26viqXB
ZOW39auryjDg9fpTCfFg/3mfv4+c6WR+vFrLUhqyDnWUvVankCstk5LaRbhx
JOdxezsdYwONexqJBy9a5DN2GbKRLtbHO17BRJCN3ODUNAG4T5cnVwdzkdcg
mi79hHi8MezHxCwB1jzeZ1nay8XhY5YmV+04aJHbrd9CPFiZYU+fU1qPzH1n
O//8LYGTXzivhnjwr/EyUUtz0k/v0j2DTNvxskgsIoV48KOhceOsrWyILt66
iaPGguTi2S1xxINrEm/RDt3kYuG9F14qIhyw1tuuoEcTzl9Ilol5y8Pv6/L6
SdG9UFsyXXIB8WBH2KNBcw8aVDVSWmU9y/A4+dWcqXt8DH4VcmwwpMNG89BB
RNGwP2ZAfwHx4BpXoSMlDwmfSza/215Mh2pgwioR4sGCoMX8VapMcPtiQv/O
bsftI5Ymrwn/Z5d4CueuYWP+nmiruGksBCxJeZJFPBix9fyX9mQuPBbq302d
JB50tUYm8aDnlM3O4DIadO0WfXGVLcdXhTfNgcSDPK2y+vtb6djrYTPNeJiG
9vBKmzTiwV+9auWxowwUO7/PN35Dh7Ny8cxM4kEv0+UPucP1eHOh5vtQeClU
Xr+odCcebM+fFXM0mOzhX7vD85aw8NA8rdafeNC4tursvBIupLQvC2XKcdCU
67DxAfHgXreyb+cneOiS3FN08DzxYMT3WE/iQQMZlXh9cxpmnQ749VmpDKLB
yWLziQdjhI1f9EkxsfLA86OdYu0Q8VuVJErmsGCs/06YOxv1IokG3hNM7LEY
fH6OeHBz78ltlmvp0I4/u62yg4aK/bTJWuLB7gjFHPF+ck8H3B797KHD//6G
hjDiwYYcozur73GhvnNJ4WYJDjR+yBEO87GH7bPMcRcN8+7TE02OlwFXtLpr
iAeF99L8X2wg+9kVujxfmoX+fXlxEcSD82x1Gj5PMGBZcCkjYIwO8cpnVeuI
B7PYy/77e5+L3y8FPi9VOKjtcnxVRDx4Q9dh75WfPFi5pPxHJffiKKUUVEu4
safbsOfmDCYSliWcMBVuh16r34g6eS8107GSb+50RKmZXjhQR0PV/iWO38h+
zlQOKh/K4eKu6Nm/j2ZwoH4tcd01sofpt8SSazbRcGu02OBWUBnCpxcd8yS/
/4LU6YpGLzaGMvdDYSYLfpFV1n3kvN65xkRfKefidJx9ydLZHKj2xLXVknP5
5hBsWuxAw9W10X7HzcpQdsef9Y38noyjqtIHN9Lx+O2g8XgvDRITB+34ZJ6H
jD+n1hZwkdI8tOGnNAeavukD+8k8bYULPreH01AYN/CpIbMMMlop2gbk3h1h
fJ311YeNtUK71tgrshD4QUfnNZmn3V49utFPkpP73yT/nqTDarj5lsExASyv
nJ6n9JeH0MEFa++k9uJ/ps5A9A==
       "]], {
      PointSize[0.035], 
      RGBColor[0.742077, 0.0624857, 0.00605783], 
      Point3DBox[{0, 0, 1}], 
      RGBColor[0.8280513333333334, 0.37499046666666663`, 0.3373718866666666], 
      
      Point3DBox[{0, -1, 0}]}}, {
    ViewAngle -> 0.34, ImageSize -> 200, Boxed -> False}],Graphics3DBox[{{{
       Opacity[0.2], 
       SphereBox[{0, 0, 0}, 1], 
       Opacity[0.5], 
       GrayLevel[0], 
       Thickness[Large], 
       Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
       Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
       Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], 
       Opacity[1], 
       GrayLevel[0], 
       Thickness[Large], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 0, 1.15}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 0, -1.15}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {1.15, 0, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {-1.15, 0, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|+Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, 1.15, 0}], 
       Text3DBox[
        FormBox[
         StyleBox[
         "\"|-Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold, 
          FontColor -> GrayLevel[0.3], StripOnInput -> False], 
         TraditionalForm], {0, -1.15, 0}]}, {{{}, {}, {
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
aZ3nLndR/f//7+xmU6H/fWev/J//H/XtZOI=
          "]]}}}, {{{}, {}, {
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
d3iqKYHXvWC4xC1pTYIb3/oU+Wjvc8gSLvdoF8EFmFksBldCoOjDalIb4bt0
T2dqCs2GQb4e0ucTBK8I1z70pCES0h6el0ol7BPzROacIb94SOUr7pYkuIDg
u0Bzh0So/9VnMYewD2/N69mtvEmC7TnVZlGvkSvfk4mwTE2BL4es3bkI+7za
p9ldyCMDKkrHmicTzp17f7+E05k8KMcSqBhHOKcemw53x9XyYXWumERwPPKQ
xdfTqZIUuDafqK0XSzgX2ur+P2UKoJyH5cjTl8j/3eVkd1frDXyqJmJACkTu
43J38rh7CUzakp5ZY0V4rrbo50E9EO5oZX+caoH8npQHeUWqEiaS3MwdzZCr
Qv2eZLtKqJw23sxqinxiZthsZrUSVh20D602QJ62AFKV6avg4rhgTNBF5PlT
O/h+ctdA+dzheT8eQtzItdWkl6uH098fxXpzI38RfehP+ON6GPU+MMtpF3Ja
40Du/qJ6uOecyoLmdkKc7+74Jiz1Gb6YE5eK3kR5ROD2UvSYcAMU8iyXrB5D
fkhwsu4QRxN0+HOD2YKQ724LHy15PNAKWzaupwJ+5O1CGTf0Cr/A0V9OF1q8
UR7fZKK/NvmiF167+ieK9wnK+yf47ZPLzIbhs3FezR4hVCdcvV/sruozBvfR
n5Y/K43qCoZrTq9Vnk/CIjPx+ny+Edz/atJKid2Yhh1eYTmHk1DdMmG+Q22O
bg7W1sbaTq+hOqfALdTHpngecoiPNoX2I0+pqWjo+jAP9z1g+3qsEvkM63yr
/Md5OGubRH/PG3kf93ae6cZ5uPkmNDOUA7mmN7MzdWge5uZduU87+BX3S27W
NrEsVCjE8lZmx4UO3Od+rwXY61Jh2ohSRM0GqvdktzPLzn3H3m/dMauyMuQr
46oj9T1UKLd5hi3HCbm2ullx3AAVOs1cG7FbQfUkY/NQp/gEFU5/7mZPnm/A
nZ4rebh7GVvP5PH1kJ563OPmD4mFctJgE9nbSDG/BuWFeOnay8rYfvK4k3/F
EvmgeU4Z+zkarFeaEzYWR/7vywFYe4EGZToz2mxSUZ0sa/P3BI8GDR5k+nn2
ErkKxX8/kHD1Gg1GN72+v+FaiXu2cRbvPuy8PThD/ro9FNXzx0z/rpzwpUFB
Jr23v3ciZ6hzIlv402DLxRvhE+HoXuCuHRc8hdUHpyvFa1+Ti1He1LrY2xBE
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
          "]]}}}, {{{}, {}, {
        
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Dashing[{Small, Small}], 
         Line3DBox[CompressedData["
1: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
6j11u43q//9/Z7cYD//vO3vl/wHesGTi
          "]]}}}}, 
     GraphicsComplex3DBox[CompressedData["
1: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
dlIvDkp/8FvFSwWwl5EQmxqH+p18dWuPDGG3zYcYJgcFKurvCWq9Kgb31Sc0
VojNYtnu/B8jD7PBaaNNS9juGDwabUn2TnfHo0K0EwY4A6P1dcOMpA5smQnb
JCiTi9XJ/FbiQY0opBPR9KKiE791Zuo36pJwXtzck+xGwfxtYaEVCmS8273u
55ErhN4Jt3z2taehbEQkm+jPTvw18ufn3ZFcVN927FXUCQZaHrV/dH9HJ/J8
Ldl1cWMOqovouF33Hkf19u0114trcHGhqJR57zVqvJQp1tnMRLn9VsvLEoh/
1KVfxq6Owfqd9JfsnUxcVpwqi80jYeyC9qWlv8FYFHhJSIWfhZt9+T7fMvRE
2jcltQRNY4wqeGNCZSP0yHNIwlk7C/641b/cZ+IPIda8ezCKiRGxNo2fbwxD
53GxjWypubB8uqhw1VOiTvYf2RrRIxCku1tvwowEXB8zArKM6cjK+qx1pHQU
bn1qOfTOggQak7N9VqVD6KOQv8+hcBxOqf080RuXCwY35/7dpPSieNDwfHfO
BNxhVe38wJcNts0nFiziujDTUWou7CXBz1cltmWUJKEs5dNNU/UycI3r9B7q
ZIFDnX2B2SMSvqfO/+OwqQHW7fLKp2Ms2GjxLYXtQAlaV/UHkUnNEDwRUk1p
Y8G6PZxVNlpVaCB5X3SHVTtcY5iPfXjKgkBDPeHJoFpM2b/K8OFUJ0Q55bqX
byF424vntmNWM1Za7Xu8n70bLq9qkDnBwQSX85Hs29LacbPA3sNaLhTIs+8e
3XF8Bgz3770nFdSFN+7tqSzcTwW9oQSRoF1TUHv1Mr/Z2x7MZYQJ5O2hgjWT
eutc+lc4PFlT48c5iMfX+jx/dpECR3QzV5kpfQK/kh8h0XtmUNTDb6Xi2w8g
Lv94blS7E3+orFx+uJyLjhe7x8gOHbg2bHQnGx8Zf4d+8y27SsJH7YlnBU36
cWnKeShhBxmVpdZtC1Anofn5sUDeW3Q8N3d92GFtMVZ9CN/3peEJLlN47PzY
WVjNW0XeqZ6EJXoZ/LblnpiqfbD/4XoWztSLr2r1pUPSAwPBxq0kqNp4v+OI
1whqeRuwmnMYcP/pATExZxIcb81TvbBhGA1m5R7fLxyDN+qPlH12kYAmIp8r
ZT6ASQ1l02vKCT11SHkZ4Z+BHEsVMjb3q6BBOLE1gs4Ct1z19R5fClBmsKr7
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

      "], {{{}, {}, {
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2], 
         Thickness[0.01], 
         Line3DBox[CompressedData["
1:eJwl1WWYlVUYBdChpbtz6O6W7jSwCxElLMYgRQVbQaVURJFSQBDsLuzubuzu
blz78ceavd8zd5h7zvnuUDi5aMKMYgUFBdt9SY7x5Wd5A3PZg24UpwQlKUVp
xnrtL/JG5rEn3ZlivTJP6Ss4mjKMs/arvIlT2IuZ1hrxpr6BHkw1V+Fp/RLO
1jvyhX5MflZvzk79MjmIa/XFsgeb+N68Ro5iG7uZx8vf5M0s0fswXz9DtuNT
fW9m6Y1Zx1t5D3IAm7nafL7syjV8Y14tR9BTnyar8ox+Kccy39yC9/UtlM25
mn+Xt3AqE+hFuZyj7/0hb+U09qE35alARSrl/LzuT3kbp7MvfaicffjeX/J2
FrAffZluvRrP5uw4jir5/db+lnewkDPN7flM35/ZehPezr7kwOxfv0B2YyPf
mq+SI7mO3XP3sjrP6cuyxkr9HNmJL/XjcwZ6Sz7Qt1I1+zb/I+/MHXEA/aiW
vfrev/KuvFcOpD/VqUFNalGbOtTNGfiZXfJuzuIgBuSZsl6D5/XLmUG97Dsf
CO7JM8jBzDEX8o6+kYG5Y3NNXtCXy36s0s+VnflKv0IOYwtFuVfZivV8aF4p
B+fc9AvzLPGDXj/7zmeTe3NuHMKg3J21WryYf58TaJCzsFac+/IeOJTBNMye
rZfgfv08DmMIjWhMEwppSrPs2WtLsiPPPRMZmjuzVpuX9Cs5keZ5b9ZK8UCe
DQ5nWM7UWh1e1ldzUp5Zc2s+0rfRIu/VXJoH9aWyL4tyX7IDG/jcvEoOzeee
Sea5sinv6ptYpHfnO304RXpdXskzysm0zP6tleEhfTFHMIJW2Wv+bvBw7oTJ
jKR19mW9LI/oF3Eko2jDJOvleFS/mKMYnfuxVo9X9TXMpG1+p7XyPKYvYQrz
zM14T9/MmJyxuT6v6Stkf9bmHmWX/G3i69yHHM5WZpkXyDZ8nOdbDmF73rfs
xY96u+xPr8DjOXumMjZ3Za0Br+vrmE377NlaRZ7QlzGNcXSgI53oTJecgddV
4sl8RpjO+NyDtYa8oa9nDgvNbflEvz5nqPfmJ32tHF3s//+vupr/A+ssvVs=

          "], VertexColors -> Automatic]}}}, VertexColors -> CompressedData["
1:eJwV13lYTG8fBvBSEimtWqWkFS1CibpJUkp2IkSUUmlBKZXwkyVKIW2SaN+z
tMykfdM0TacZ2UVozoRKiyzxPu9fc13nmqvOPMv3/tyabn5b3KcICQkVCgsJ
iZBPo/sNa5Rq+iEXOLhA428xOAF1Lkqck2hQddo+wOrH0dvJNtJxpfhzy/Zb
WuUlMM61z+a/6kfsuoY3vTYPoHLD9uZf+Rvo/Pcl4TPdj7odmUKcVw8h23b5
2QMqGT4vWJy0H/24vuplRsORxzh8IfnKuvJ0+N67UxUpxse8oRvFF1QrEPOs
fybf8T4un5l98JA8H/Wi022PFFdCK7UpzSEzGxKbIhkBWnxovJuybo47A1Ni
Uma5rc2HfFhOh/liPtRvbGzhylZj9cX5Z6K5RVjBPJ4mvIqPhUXbu/LuPcHJ
P+pTVsqVoumL6dxRJz7+NA9l6C2oxchT3QcSvWXwNrm1j7+HjyNecvMkxmuR
xZ34sjLmIVK6K3YmHOFDP+Rd7yCzDpfctLJ/mD6GoUeH0NEQPpq9v3GZN+oR
L/aUEz1ZjrczozzXXeDji/RLSeV9DaA+mZ87k1OJoXsmkesT+BhKFA/ba96I
Za+0MjcFM3A1MWXztEw+bGJ69e9LNaF9m+e6XMtq2N7Nfd9Uxofmsptqoc+a
kDj9RODBT0/glpynWVTHx+vaKzbmxc2wEUREnXKuRXL2Ro3ETrI+f/eXng9p
gbOvrtK4YR2WZfaz89+Sv69+citjWysifl89sFexHnuErMxCvvLxON986ciC
NjAdNL0v/a5Hmp/5PrvffJQO8FyqRtuQWKm03IPTgDWd2ktXz6ARLfW43Iv9
FP8tZj8xKm+E6JrypyuUaHztC3TOSWrHzLZ+8byYJmySn6YypE3jjs4Lc3o/
CwWahnL0gWb85dkrs5fQMHE86yS7vAP7zy/mya9rQVu+cU+hNY3188Vzn05h
o0gsxWVYrRU/AmasLd9Mw/odx9z7DRtS1+uSqkTbUHwzwyd0P43L09aISz3s
xMX38ol2/Dac63i7BUdpLBq2k9Kw4iB1A2v3BeZTMMYk6UXhNEQ5MqaFeRw0
Nq7mlWW0Y9bi95bq0TQ0xe1/CUt3IWqXqnxsCAtf2gMdWxNpfBzf9n7nsS64
lWjKGTt2YNGOHzNSs2ko7pzSp/muC06yn9uqjdmIHp17MeARjRhp9QsP1lB4
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
6tJ1TwuwLP68zuy/PfDu1d907yYP/wNxthdG
       "]], {
      PointSize[0.035], 
      RGBColor[0.742077, 0.0624857, 0.00605783], 
      Point3DBox[{0, 0, 1}], 
      RGBColor[0.8280513333333334, 0.37499046666666663`, 0.3373718866666666], 
      
      Point3DBox[{0, -1, 0}]}}, {
    ViewAngle -> 0.34, ImageSize -> 200, Boxed -> False}]},
  "RowDefault"]], "Output",
 CellChangeTimes->{{3.6351696033772*^9, 3.6351696081597443`*^9}, {
   3.635169721956808*^9, 3.6351697679819107`*^9}, 3.635169893500396*^9, {
   3.635169933316512*^9, 3.635169967709256*^9}, {3.6351700283847733`*^9, 
   3.635170077056101*^9}, {3.635171410410887*^9, 3.635171416577189*^9}, 
   3.635171621687605*^9, {3.635172321160695*^9, 3.635172333403344*^9}, {
   3.635172367867776*^9, 3.6351723969772043`*^9}, 3.635172634109406*^9, 
   3.635172981819173*^9, {3.6351754784850273`*^9, 3.6351755014446077`*^9}, 
   3.6351760749129963`*^9, 3.635178573488118*^9, 3.6352501945306892`*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Example 5", "Subsubsection",
 CellChangeTimes->{{3.6351769173630667`*^9, 3.6351769216678047`*^9}, {
  3.6352502494143343`*^9, 3.635250249541436*^9}, {3.635253527039732*^9, 
  3.6352535271237803`*^9}, {3.635256535052739*^9, 3.63525653517592*^9}, {
  3.635256666891369*^9, 3.635256667002322*^9}}],

Cell[TextData[{
 "Set the ",
 StyleBox["ViewPoint", "Input"],
 " to a dynamic variable to sync the rotation of multiple Bloch spheres."
}], "Text",
 CellChangeTimes->{{3.63517692319379*^9, 3.635176923213087*^9}, {
   3.6351769807919903`*^9, 3.63517702620428*^9}, 3.635178108652595*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", "vp", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"vp", "=", 
     RowBox[{
      RowBox[{"Options", "[", 
       RowBox[{"Graphics3D", ",", "ViewPoint"}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "2"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"BlochPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"states1", ",", "states2"}], "}"}], ",", 
         RowBox[{"(*", 
          RowBox[{
          "these", " ", "states", " ", "are", " ", "defined", " ", "in", " ", 
           "Example", " ", "3"}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"BlochPlotJoined", "\[Rule]", "#"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"ImageSize", "\[Rule]", "350"}], ",", "\[IndentingNewLine]", 
         
         RowBox[{"BlochPlotLabels", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<First\>\"", ",", "\"\<Second\>\""}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"ViewPoint", "\[Rule]", 
          RowBox[{"Dynamic", "[", "vp", "]"}]}]}], "\[IndentingNewLine]", 
        "]"}], "&"}], "/@", 
      RowBox[{"{", 
       RowBox[{"False", ",", "True"}], "}"}]}], "//", "Row"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.635176936578022*^9, 3.6351769842630367`*^9}, {
  3.635177043650742*^9, 3.635177053151376*^9}, {3.6351781385753403`*^9, 
  3.635178187699349*^9}, {3.6352464543761168`*^9, 3.635246514375045*^9}, {
  3.635250289795156*^9, 3.635250291273036*^9}, {3.6352503451735287`*^9, 
  3.635250366724988*^9}, {3.635250401141708*^9, 3.6352504013078012`*^9}, {
  3.635256464819705*^9, 3.635256488999823*^9}, {3.635256524713224*^9, 
  3.6352565253014507`*^9}, {3.635256651517077*^9, 3.635256661176161*^9}}],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`vp$$ = {
  1.4276391881505284`, -1.542401509313027, 2.6519509672174935`}}, 
  TemplateBox[{TemplateBox[{
      Graphics3DBox[{{{
          Opacity[0.2], 
          SphereBox[{0, 0, 0}, 1], 
          Opacity[0.5], 
          GrayLevel[0], 
          Thickness[Large], 
          Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
          Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
          Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], 
          Opacity[1], 
          GrayLevel[0], 
          Thickness[Large], 
          Text3DBox[
           FormBox[
            StyleBox[
            "\"|+Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold,
              FontColor -> GrayLevel[0.3], StripOnInput -> False], 
            TraditionalForm], {0, 0, 1.15}], 
          Text3DBox[
           FormBox[
            StyleBox[
            "\"|-Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold,
              FontColor -> GrayLevel[0.3], StripOnInput -> False], 
            TraditionalForm], {0, 0, -1.15}], 
          Text3DBox[
           FormBox[
            StyleBox[
            "\"|+X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold,
              FontColor -> GrayLevel[0.3], StripOnInput -> False], 
            TraditionalForm], {1.15, 0, 0}], 
          Text3DBox[
           FormBox[
            StyleBox[
            "\"|-X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold,
              FontColor -> GrayLevel[0.3], StripOnInput -> False], 
            TraditionalForm], {-1.15, 0, 0}], 
          Text3DBox[
           FormBox[
            StyleBox[
            "\"|+Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold,
              FontColor -> GrayLevel[0.3], StripOnInput -> False], 
            TraditionalForm], {0, 1.15, 0}], 
          Text3DBox[
           FormBox[
            StyleBox[
            "\"|-Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold,
              FontColor -> GrayLevel[0.3], StripOnInput -> False], 
            TraditionalForm], {0, -1.15, 0}]}, {{{}, {}, {
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2], 
            Dashing[{Small, Small}], 
            Line3DBox[CompressedData["
1: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
aZ3nLndR/f//7+xmU6H/fWev/J//H/XtZOI=
             "]]}}}, {{{}, {}, {
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2], 
            Dashing[{Small, Small}], 
            Line3DBox[CompressedData["
1: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
d3iqKYHXvWC4xC1pTYIb3/oU+Wjvc8gSLvdoF8EFmFksBldCoOjDalIb4bt0
T2dqCs2GQb4e0ucTBK8I1z70pCES0h6el0ol7BPzROacIb94SOUr7pYkuIDg
u0Bzh0So/9VnMYewD2/N69mtvEmC7TnVZlGvkSvfk4mwTE2BL4es3bkI+7za
p9ldyCMDKkrHmicTzp17f7+E05k8KMcSqBhHOKcemw53x9XyYXWumERwPPKQ
xdfTqZIUuDafqK0XSzgX2ur+P2UKoJyH5cjTl8j/3eVkd1frDXyqJmJACkTu
43J38rh7CUzakp5ZY0V4rrbo50E9EO5oZX+caoH8npQHeUWqEiaS3MwdzZCr
Qv2eZLtKqJw23sxqinxiZthsZrUSVh20D602QJ62AFKV6avg4rhgTNBF5PlT
O/h+ctdA+dzheT8eQtzItdWkl6uH098fxXpzI38RfehP+ON6GPU+MMtpF3Ja
40Du/qJ6uOecyoLmdkKc7+74Jiz1Gb6YE5eK3kR5ROD2UvSYcAMU8iyXrB5D
fkhwsu4QRxN0+HOD2YKQ724LHy15PNAKWzaupwJ+5O1CGTf0Cr/A0V9OF1q8
UR7fZKK/NvmiF167+ieK9wnK+yf47ZPLzIbhs3FezR4hVCdcvV/sruozBvfR
n5Y/K43qCoZrTq9Vnk/CIjPx+ny+Edz/atJKid2Yhh1eYTmHk1DdMmG+Q22O
bg7W1sbaTq+hOqfALdTHpngecoiPNoX2I0+pqWjo+jAP9z1g+3qsEvkM63yr
/Md5OGubRH/PG3kf93ae6cZ5uPkmNDOUA7mmN7MzdWge5uZduU87+BX3S27W
NrEsVCjE8lZmx4UO3Od+rwXY61Jh2ohSRM0GqvdktzPLzn3H3m/dMauyMuQr
46oj9T1UKLd5hi3HCbm2ullx3AAVOs1cG7FbQfUkY/NQp/gEFU5/7mZPnm/A
nZ4rebh7GVvP5PH1kJ563OPmD4mFctJgE9nbSDG/BuWFeOnay8rYfvK4k3/F
EvmgeU4Z+zkarFeaEzYWR/7vywFYe4EGZToz2mxSUZ0sa/P3BI8GDR5k+nn2
ErkKxX8/kHD1Gg1GN72+v+FaiXu2cRbvPuy8PThD/ro9FNXzx0z/rpzwpUFB
Jr23v3ciZ6hzIlv402DLxRvhE+HoXuCuHRc8hdUHpyvFa1+Ti1He1LrY2xBE
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
             
             "]]}}}, {{{}, {}, {
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2], 
            Dashing[{Small, Small}], 
            Line3DBox[CompressedData["
1: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
6j11u43q//9/Z7cYD//vO3vl/wHesGTi
             "]]}}}}, {{{
           RGBColor[
           0.8269766541666667, 0.3710841570833333, 0.3332304609583333], 
           PointSize[0.035], 
           Point3DBox[{0, 0, 1}]}, {
           RGBColor[
           0.8259019750000001, 0.36717784749999993`, 0.32908903524999994`], 
           PointSize[0.015], 
           
           Point3DBox[{0.001891828056697819, -0.015644526686925578`, 
            0.9998758271762279}]}, {
           RGBColor[
           0.8248272958333334, 0.36327153791666666`, 0.3249476095416666], 
           PointSize[0.015], 
           
           Point3DBox[{0.013324347399282484`, -0.058485856324716395`, 
            0.9981993119494462}]}, {
           RGBColor[
           0.8237526166666667, 0.3593652283333333, 0.32080618383333326`], 
           PointSize[0.015], 
           
           Point3DBox[{0.041296219259756246`, -0.11693063621971278`, 
            0.9922811338467052}]}, {
           RGBColor[
           0.8226779375000001, 0.35545891874999996`, 0.31666475812499995`], 
           PointSize[0.015], 
           
           Point3DBox[{0.08818145020876209, -0.1741175775480398, 
            0.9807686276731543}]}, {
           RGBColor[
           0.8216032583333334, 0.35155260916666664`, 0.31252333241666663`], 
           PointSize[0.015], 
           
           Point3DBox[{0.15061765406139688`, -0.21169203083554036`, 
            0.9656608133116756}]}, {
           RGBColor[
           0.8205285791666667, 0.3476462995833333, 0.30838190670833326`], 
           PointSize[0.015], 
           
           Point3DBox[{0.2197295758827424, -0.21415792572357498`, 
            0.9517643071328991}]}, {
           RGBColor[0.8194539000000001, 0.34373999, 0.30424048099999995`], 
           PointSize[0.015], 
           
           Point3DBox[{0.2826299881451781, -0.1723047161610572, 
            0.9436267135841985}]}, {
           RGBColor[
           0.8183792208333334, 0.3398336804166666, 0.3000990552916666], 
           PointSize[0.015], 
           
           Point3DBox[{0.32475150634958805`, -0.08496712545224132, 
            0.9419750775450786}]}, {
           RGBColor[
           0.8173045416666667, 0.3359273708333333, 0.29595762958333327`], 
           PointSize[0.015], 
           
           Point3DBox[{0.33252627768974596`, 0.04043676101427527, 
            0.9422266940627805}]}, {
           RGBColor[
           0.8162298625000001, 0.33202106124999997`, 0.29181620387499996`], 
           PointSize[0.015], 
           
           Point3DBox[{0.29612399233751086`, 0.18806148851412935`, 
            0.9364525923398067}]}, {
           RGBColor[
           0.8151551833333334, 0.32811475166666665`, 0.28767477816666664`], 
           PointSize[0.015], 
           
           Point3DBox[{0.2119716377745236, 0.33500298756920016`, 
            0.9180637358587349}]}, {
           RGBColor[
           0.8140805041666667, 0.3242084420833333, 0.2835333524583333], 
           PointSize[0.015], 
           
           Point3DBox[{0.0844963690606069, 0.45489532009644346`, 
            0.8865272761567623}]}, {
           RGBColor[
           0.8130058250000001, 0.32030213249999995`, 0.27939192674999996`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.07363072628606557, 0.5234847224315151, 
            0.8488476079529155}]}, {
           RGBColor[
           0.8119311458333334, 0.3163958229166666, 0.27525050104166665`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.24307324194208368`, 0.5240298052706615, 
            0.8162770131761387}]}, {
           RGBColor[
           0.8108564666666667, 0.3124895133333333, 0.2711090753333333], 
           PointSize[0.015], 
           
           Point3DBox[{-0.4007771015465678, 0.4502231479053009, 
            0.7979203168024823}]}, {
           RGBColor[0.8097817875, 0.30858320375, 0.26696764962499997`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.523392405167586, 0.306394527956181, 
            0.7950992286824324}]}, {
           RGBColor[
           0.8087071083333334, 0.30467689416666666`, 0.26282622391666666`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.5905452967895066, 0.10667010253145542`, 
            0.7999235848915333}]}, {
           RGBColor[
           0.8076324291666667, 0.3007705845833333, 0.2586847982083333], 
           PointSize[0.015], 
           
           Point3DBox[{-0.5878586968119017, -0.12572634471267166`, 
            0.7991339304696071}]}, {
           RGBColor[0.8065577500000001, 0.29686427499999996`, 0.2545433725], 
           PointSize[0.015], 
           
           Point3DBox[{-0.5096676770228483, -0.35996843220123476`, 
            0.7814483903731062}]}, {
           RGBColor[
           0.8054830708333334, 0.2929579654166667, 0.25040194679166666`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.3608719018286637, -0.5617292380140438, 
            0.7444674160973902}]}, {
           RGBColor[
           0.8044083916666667, 0.2890516558333333, 0.2462605210833333], 
           PointSize[0.015], 
           
           Point3DBox[{-0.1570321372618308, -0.6998039734337875, 
            0.6968610382517193}]}, {
           RGBColor[0.8033337125, 0.28514534625, 0.24211909537499998`], 
           PointSize[0.015], 
           
           Point3DBox[{0.0776951173116967, -0.7524489403230905, 
            0.6540520322975687}]}, {
           RGBColor[
           0.8022590333333334, 0.2812390366666666, 0.2379776696666666], 
           PointSize[0.015], 
           
           Point3DBox[{0.3141746784833392, -0.7104442096295733, 
            0.6297327182255188}]}, {
           RGBColor[
           0.8011843541666667, 0.27733272708333334`, 0.2338362439583333], 
           PointSize[0.015], 
           
           Point3DBox[{0.5222998342078007, -0.5767058031567419, 
            0.6281825370000669}]}, {
           RGBColor[0.8001096750000001, 0.2734264175, 0.22969481825], 
           PointSize[0.015], 
           
           Point3DBox[{0.6746393706731204, -0.3648478875283685, 
            0.6416757269087421}]}, {
           RGBColor[
           0.7990349958333334, 0.26952010791666664`, 0.22555339254166662`], 
           PointSize[0.015], 
           
           Point3DBox[{0.7497329144976708, -0.09850131729599332, 
            0.6543684339955451}]}, {
           RGBColor[
           0.7979603166666667, 0.2656137983333333, 0.2214119668333333], 
           PointSize[0.015], 
           
           Point3DBox[{0.7351851771194872, 0.18961293447739175`, 
            0.6508069532685248}]}, {
           RGBColor[0.7968856375, 0.26170748875, 0.21727054112499994`], 
           PointSize[0.015], 
           
           Point3DBox[{0.6300854703364526, 0.4612859699459596, 
            0.624665953932104}]}, {
           RGBColor[
           0.7958109583333334, 0.25780117916666667`, 0.21312911541666663`], 
           PointSize[0.015], 
           
           Point3DBox[{0.4457401259547828, 0.6795576490890728, 
            0.5826809947804594}]}, {
           RGBColor[
           0.7947362791666667, 0.25389486958333335`, 0.2089876897083333], 
           PointSize[0.015], 
           
           Point3DBox[{0.204104435177347, 0.8157531260621708, 
            0.5411914789247254}]}, {
           RGBColor[0.7936616, 0.24998856, 0.204846264], 
           PointSize[0.015], 
           
           Point3DBox[{-0.06558825491675846, 0.8533299468437433, 
            0.5172293327302958}]}, {
           RGBColor[
           0.7925869208333334, 0.24608225041666668`, 0.20070483829166663`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.3307932279018606, 0.7879631805723654, 
            0.5193167303645705}]}, {
           RGBColor[
           0.7915122416666667, 0.24217594083333333`, 0.19656341258333332`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.5593710894287858, 0.6263774872276539, 
            0.5429136467299587}]}, {
           RGBColor[0.7904375625, 0.23826963125, 0.192421986875], 
           PointSize[0.015], 
           
           Point3DBox[{-0.7230685403534485, 0.3861895036202029, 
            0.5727386430517095}]}, {
           RGBColor[
           0.7893628833333334, 0.23436332166666668`, 0.18828056116666664`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.8010470639641479, 0.09601014063887608, 
            0.5908516346841405}]}, {
           RGBColor[
           0.7882882041666667, 0.23045701208333333`, 0.18413913545833333`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.7831073071911072, -0.20696808292761587`, 
            0.5864359795179346}]}, {
           RGBColor[0.787213525, 0.2265507025, 0.17999770975], 
           PointSize[0.015], 
           
           Point3DBox[{-0.6715342053259457, -0.48308161541105255`, 
            0.5618487019911123}]}, {
           RGBColor[
           0.7861388458333334, 0.22264439291666666`, 0.17585628404166664`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.48068373245703666`, -0.6976105182358316, 
            0.5313028460284265}]}, {
           RGBColor[
           0.7850641666666667, 0.21873808333333333`, 0.17171485833333333`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.23451313414618852`, -0.8257416967580652, 
            0.5129856139776656}]}, {
           RGBColor[0.7839894875, 0.21483177374999998`, 0.16757343262499996`], 
           PointSize[0.015], 
           
           Point3DBox[{0.03686754259055856, -0.85382931643229, 
            0.5192458788513403}]}, {
           RGBColor[
           0.7829148083333334, 0.21092546416666666`, 0.16343200691666665`], 
           PointSize[0.015], 
           
           Point3DBox[{0.3007177911962492, -0.7790610860019721, 
            0.5501205634544808}]}, {
           RGBColor[
           0.7818401291666667, 0.20701915458333334`, 0.15929058120833334`], 
           PointSize[0.015], 
           
           Point3DBox[{0.5251869328567459, -0.6099933789946564, 
            0.5933689940831122}]}, {
           RGBColor[0.78076545, 0.20311284500000001`, 0.15514915549999997`], 
           PointSize[0.015], 
           
           Point3DBox[{0.6831406364951537, -0.3676211548140098, 
            0.631009950240255}]}, {
           RGBColor[
           0.7796907708333334, 0.19920653541666666`, 0.15100772979166666`], 
           PointSize[0.015], 
           
           Point3DBox[{0.7560448259214296, -0.08420708476869215, 
            0.6490804172613684}]}, {
           RGBColor[
           0.7786160916666667, 0.19530022583333334`, 0.14686630408333334`], 
           PointSize[0.015], 
           
           Point3DBox[{0.7368380039357629, 0.2018861039809932, 
            0.6452222539368391}]}, {
           RGBColor[0.7775414125, 0.19139391625, 0.14272487837499997`], 
           PointSize[0.015], 
           
           Point3DBox[{0.6307103049128014, 0.45358317923758307`, 
            0.629656105179268}]}, {
           RGBColor[
           0.7764667333333334, 0.18748760666666667`, 0.13858345266666666`], 
           PointSize[0.015], 
           
           Point3DBox[{0.4536762063470878, 0.6409675793621538, 
            0.6191433291259252}]}, {
           RGBColor[
           0.7753920541666667, 0.18358129708333334`, 0.13444202695833335`], 
           PointSize[0.015], 
           
           Point3DBox[{0.2298082816370145, 0.7437672082423568, 
            0.6276929931378958}]}, {
           RGBColor[0.774317375, 0.1796749875, 0.13030060124999998`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.011951553655660863`, 0.7519050545150648, 
            0.659163067351251}]}, {
           RGBColor[
           0.7732426958333334, 0.17576867791666664`, 0.12615917554166667`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.24118214311796315`, 0.6664508183395027, 
            0.7054604741412736}]}, {
           RGBColor[
           0.7721680166666667, 0.17186236833333332`, 0.12201774983333331`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.4297876747336442, 0.501025818517229, 
            0.7511695439953519}]}, {
           RGBColor[0.7710933375, 0.16795605875, 0.117876324125], 
           PointSize[0.015], 
           
           Point3DBox[{-0.5560098499391042, 0.28126308661853827`, 
            0.7821407308640207}]}, {
           RGBColor[
           0.7700186583333334, 0.16404974916666668`, 0.11373489841666666`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.6076717190385132, 0.0404707230838747, 
            0.7931564804336177}]}, {
           RGBColor[
           0.7689439791666667, 0.16014343958333332`, 0.10959347270833332`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.5835592387287141, -0.18723034393272786`, 
            0.7901920103400142}]}, {
           RGBColor[0.7678693, 0.15623713, 0.105452047], 
           PointSize[0.015], 
           
           Point3DBox[{-0.4926585845040621, -0.37293605295532517`, 
            0.7862609105891971}]}, {
           RGBColor[
           0.7667946208333334, 0.15233082041666665`, 0.10131062129166665`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.35191452260326644`, -0.49608449528845844`, 
            0.7937608848483946}]}, {
           RGBColor[
           0.7657199416666667, 0.14842451083333333`, 0.09716919558333333], 
           PointSize[0.015], 
           
           Point3DBox[{-0.18337184024989855`, -0.5454769300571138, 
            0.8178200822789987}]}, {
           RGBColor[0.7646452625, 0.14451820125, 0.093027769875], 
           PointSize[0.015], 
           
           Point3DBox[{-0.011064002944192186`, -0.5200510968402614, 
            0.8540634897442276}]}, {
           RGBColor[
           0.7635705833333333, 0.14061189166666666`, 0.08888634416666666], 
           PointSize[0.015], 
           
           Point3DBox[{0.14236905896286317`, -0.42965028257589755`, 
            0.8917015676404725}]}, {
           RGBColor[
           0.7624959041666667, 0.13670558208333333`, 0.08474491845833332], 
           PointSize[0.015], 
           
           Point3DBox[{0.25909139570630646`, -0.29411847365273747`, 
            0.9199815064049596}]}, {
           RGBColor[0.761421225, 0.1327992725, 0.08060349274999999], 
           PointSize[0.015], 
           
           Point3DBox[{0.3287227926974028, -0.13941926634966667`, 
            0.9340790082919849}]}, {
           RGBColor[
           0.7603465458333333, 0.12889296291666666`, 0.07646206704166666], 
           PointSize[0.015], 
           
           Point3DBox[{0.34938428934424426`, 0.008181047124465747, 
            0.9369438023848395}]}, {
           RGBColor[
           0.7592718666666667, 0.12498665333333334`, 0.07232064133333332], 
           PointSize[0.015], 
           
           Point3DBox[{0.3269242872773073, 0.12727754873299887`, 
            0.9364405672421185}]}, {
           RGBColor[0.7581971875, 0.12108034374999999`, 0.068179215625], 
           PointSize[0.015], 
           
           Point3DBox[{0.27284803176246647`, 0.20417673557346733`, 
            0.9401413788435796}]}, {
           RGBColor[
           0.7571225083333333, 0.11717403416666666`, 0.06403778991666666], 
           PointSize[0.015], 
           
           Point3DBox[{0.20167696385489894`, 0.2337777896830554, 
            0.9511437048633459}]}, {
           RGBColor[
           0.7560478291666667, 0.11326772458333334`, 0.05989636420833333], 
           PointSize[0.015], 
           
           Point3DBox[{0.12818900674397532`, 0.21955715190303554`, 
            0.9671412697213461}]}, {
           RGBColor[0.75497315, 0.10936141499999999`, 0.0557549385], 
           PointSize[0.015], 
           
           Point3DBox[{0.06476987032253384, 0.17281322564717788`, 
            0.9828226965937534}]}, {
           RGBColor[
           0.7538984708333333, 0.10545510541666667`, 0.05161351279166666], 
           PointSize[0.015], 
           
           Point3DBox[{0.01922051535038988, 0.11045439636001747`, 
            0.9936953245911985}]}, {
           RGBColor[
           0.7528237916666667, 0.10154879583333333`, 0.04747208708333333], 
           PointSize[0.015], 
           
           Point3DBox[{-0.0064531273536087164`, 0.051142047908063676`, 
            0.9986705403100286}]}, {
           RGBColor[0.7517491125, 0.09764248625, 0.043330661374999996`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.015890585358127558`, 0.010888940956734696`, 
            0.9998144429151911}]}, {
           RGBColor[
           0.7506744333333333, 0.09373617666666667, 0.03918923566666666], 
           PointSize[0.015], 
           
           Point3DBox[{-0.01694396160915576, -0.0003714395720887378, 
            0.9998563717842822}]}, {
           RGBColor[
           0.7495997541666667, 0.08982986708333332, 0.03504780995833333], 
           PointSize[0.015], 
           
           Point3DBox[{-0.019410133483273646`, 0.019443058673277478`, 
            0.9996225358542026}]}, {
           RGBColor[0.748525075, 0.0859235575, 0.03090638425], 
           PointSize[0.015], 
           
           Point3DBox[{-0.03244311688830346, 0.06428727951117241, 
            0.9974039251274388}]}, {
           RGBColor[
           0.7474503958333333, 0.08201724791666666, 0.026764958541666665`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.06209523190052132, 0.12108742967026906`, 
            0.9906977422761524}]}, {
           RGBColor[
           0.7463757166666667, 0.07811093833333332, 0.02262353283333333], 
           PointSize[0.015], 
           
           Point3DBox[{-0.10945728082377931`, 0.17241637283353006`, 
            0.97892374475931}]}, {
           RGBColor[0.7453010375, 0.07420462875, 0.018482107125], 
           PointSize[0.015], 
           
           Point3DBox[{-0.1698875036658654, 0.20051662636279238`, 
            0.9648478214984278}]}, {
           RGBColor[
           0.7442263583333333, 0.07029831916666666, 0.014340681416666666`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.23359095650387418`, 0.19148518610773224`, 
            0.9532936003880912}]}, {
           RGBColor[
           0.7431516791666667, 0.06639200958333333, 0.010199255708333334`], 
           PointSize[0.015], 
           
           Point3DBox[{-0.2873684476892853, 0.13824305239698292`, 
            0.9477912395335871}]}, {
           RGBColor[0.742077, 0.0624857, 0.00605783], 
           PointSize[0.035], 
           
           Point3DBox[{-0.3072590473967495, 0.09117608017716569, 
            0.9472480140894288}]}}}, {{{
           RGBColor[
            NCache[
             Rational[16, 51], 0.3137254901960784], 0.6582085294117647, 
            NCache[
             Rational[16, 51], 0.3137254901960784]], 
           PointSize[0.035], 
           Point3DBox[{0, 0, 1}]}, {
           RGBColor[
            NCache[
             Rational[5, 17], 0.29411764705882354`], 0.6484430588235294, 
            NCache[
             Rational[5, 17], 0.29411764705882354`]], 
           PointSize[0.015], 
           Point3DBox[{0., -0.19509032201612828`, 0.9807852804032305}]}, {
           RGBColor[
            NCache[
             Rational[14, 51], 0.27450980392156865`], 0.6386775882352941, 
            NCache[
             Rational[14, 51], 0.27450980392156865`]], 
           PointSize[0.015], 
           Point3DBox[{0., -0.38268343236508984`, 0.923879532511287}]}, {
           RGBColor[
            NCache[
             Rational[13, 51], 0.2549019607843137], 0.6289121176470588, 
            NCache[
             Rational[13, 51], 0.2549019607843137]], 
           PointSize[0.015], 
           Point3DBox[{0., -0.5555702330196023, 0.8314696123025453}]}, {
           RGBColor[
            NCache[
             Rational[4, 17], 0.23529411764705882`], 0.6191466470588235, 
            NCache[
             Rational[4, 17], 0.23529411764705882`]], 
           PointSize[0.015], 
           Point3DBox[{0., -0.7071067811865477, 0.7071067811865477}]}, {
           RGBColor[
            NCache[
             Rational[11, 51], 0.21568627450980393`], 0.6093811764705882, 
            NCache[
             Rational[11, 51], 0.21568627450980393`]], 
           PointSize[0.015], 
           Point3DBox[{0., -0.8314696123025456, 0.5555702330196023}]}, {
           RGBColor[
            NCache[
             Rational[10, 51], 0.19607843137254902`], 0.5996157058823529, 
            NCache[
             Rational[10, 51], 0.19607843137254902`]], 
           PointSize[0.015], 
           Point3DBox[{0., -0.9238795325112872, 0.3826834323650897}]}, {
           RGBColor[
            NCache[
             Rational[3, 17], 0.17647058823529413`], 0.5898502352941176, 
            NCache[
             Rational[3, 17], 0.17647058823529413`]], 
           PointSize[0.015], 
           Point3DBox[{0., -0.980785280403231, 0.1950903220161282}]}, {
           RGBColor[
            NCache[
             Rational[8, 51], 0.1568627450980392], 0.5800847647058823, 
            NCache[
             Rational[8, 51], 0.1568627450980392]], 
           PointSize[0.015], 
           
           Point3DBox[{
            0., -1.0000000000000007`, -1.1102230246251565`*^-16}]}, {
           RGBColor[
            NCache[
             Rational[7, 51], 0.13725490196078433`], 0.570319294117647, 
            NCache[
             Rational[7, 51], 0.13725490196078433`]], 
           PointSize[0.015], 
           Point3DBox[{0., -0.9807852804032312, -0.19509032201612853`}]}, {
           RGBColor[
            NCache[
             Rational[2, 17], 0.11764705882352941`], 0.5605538235294117, 
            NCache[
             Rational[2, 17], 0.11764705882352941`]], 
           PointSize[0.015], 
           Point3DBox[{0., -0.9238795325112876, -0.38268343236509006`}]}, {
           RGBColor[
            NCache[
             Rational[5, 51], 0.09803921568627451], 0.5507883529411765, 
            NCache[
             Rational[5, 51], 0.09803921568627451]], 
           PointSize[0.015], 
           Point3DBox[{0., -0.8314696123025461, -0.5555702330196026}]}, {
           RGBColor[
            NCache[
             Rational[4, 51], 0.0784313725490196], 0.5410228823529412, 
            NCache[
             Rational[4, 51], 0.0784313725490196]], 
           PointSize[0.015], 
           Point3DBox[{0., -0.7071067811865483, -0.707106781186548}]}, {
           RGBColor[
            NCache[
             Rational[1, 17], 0.058823529411764705`], 0.5312574117647059, 
            NCache[
             Rational[1, 17], 0.058823529411764705`]], 
           PointSize[0.015], 
           Point3DBox[{0., -0.555570233019603, -0.831469612302546}]}, {
           RGBColor[
            NCache[
             Rational[2, 51], 0.0392156862745098], 0.5214919411764706, 
            NCache[
             Rational[2, 51], 0.0392156862745098]], 
           PointSize[0.015], 
           Point3DBox[{0., -0.3826834323650904, -0.9238795325112877}]}, {
           RGBColor[
            NCache[
             Rational[1, 51], 0.0196078431372549], 0.5117264705882353, 
            NCache[
             Rational[1, 51], 0.0196078431372549]], 
           PointSize[0.015], 
           Point3DBox[{0., -0.1950903220161287, -0.9807852804032317}]}, {
           RGBColor[0, 0.501961, 0], 
           PointSize[0.035], 
           
           Point3DBox[{
            0., -1.9428902930940252`*^-16, -1.0000000000000013`}]}}}}, {
       ViewAngle -> 0.34, ImageSize -> 350, ViewPoint -> 
        Dynamic[$CellContext`vp$$], Boxed -> False}], 
      FormBox[
       FormBox[
        TemplateBox[{"\"First\"", "\"Second\""}, "LineLegend", 
         DisplayFunction -> (FormBox[
           StyleBox[
            StyleBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  TagBox[
                   GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.09], 
                    Dashing[{0, Small}], 
                    RGBColor[0.742077, 0.0624857, 0.00605783]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.09], 
                    Dashing[{0, Small}], 
                    RGBColor[0.742077, 0.0624857, 0.00605783]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {40, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.09], 
                    Dashing[{0, Small}], 
                    RGBColor[0, 0.501961, 0]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.09], 
                    Dashing[{0, Small}], 
                    RGBColor[0, 0.501961, 0]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
               "Grid"], Alignment -> Left, AppearanceElements -> None, 
              ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
              "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
            FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
            False], TraditionalForm]& ), 
         InterpretationFunction :> (RowBox[{"LineLegend", "[", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
                    RowBox[{"Dashing", "[", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "Small"}], "}"}], "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.742077, 0.0624857, 0.00605783], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.494718, 0.04165713333333333, 
                    0.0040385533333333334`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "\[InvisibleSpace]"}], 
                    "RGBColor[0.742077, 0.0624857, 0.00605783]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.742077, 0.0624857, 0.00605783]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.742077, 0.0624857, 0.00605783], Editable -> 
                    False, Selectable -> False]}], "]"}], ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
                    RowBox[{"Dashing", "[", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "Small"}], "}"}], "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0.501961, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0.3346406666666667, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "\[InvisibleSpace]"}], 
                    "RGBColor[0, 0.501961, 0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0.501961, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0.501961, 0], Editable -> False, Selectable -> 
                    False]}], "]"}]}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
        TraditionalForm], TraditionalForm]}, "Legended", 
     DisplayFunction -> (GridBox[{{
         TagBox[
          ItemBox[
           PaneBox[
            TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
            BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
          "SkipImageSizeLevel"], 
         ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
       GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
       AutoDelete -> False, GridBoxItemSize -> Automatic, 
       BaselinePosition -> {1, 1}]& ), 
     InterpretationFunction -> (RowBox[{"Legended", "[", 
        RowBox[{#, ",", 
          RowBox[{"Placed", "[", 
            RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& ), Editable -> True],
    TemplateBox[{
      Graphics3DBox[{{{
          Opacity[0.2], 
          SphereBox[{0, 0, 0}, 1], 
          Opacity[0.5], 
          GrayLevel[0], 
          Thickness[Large], 
          Line3DBox[{{0, 1, 0}, {0, -1, 0}}], 
          Line3DBox[{{0, 0, 1}, {0, 0, -1}}], 
          Line3DBox[{{1, 0, 0}, {-1, 0, 0}}], 
          Opacity[1], 
          GrayLevel[0], 
          Thickness[Large], 
          Text3DBox[
           FormBox[
            StyleBox[
            "\"|+Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold,
              FontColor -> GrayLevel[0.3], StripOnInput -> False], 
            TraditionalForm], {0, 0, 1.15}], 
          Text3DBox[
           FormBox[
            StyleBox[
            "\"|-Z\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold,
              FontColor -> GrayLevel[0.3], StripOnInput -> False], 
            TraditionalForm], {0, 0, -1.15}], 
          Text3DBox[
           FormBox[
            StyleBox[
            "\"|+X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold,
              FontColor -> GrayLevel[0.3], StripOnInput -> False], 
            TraditionalForm], {1.15, 0, 0}], 
          Text3DBox[
           FormBox[
            StyleBox[
            "\"|-X\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold,
              FontColor -> GrayLevel[0.3], StripOnInput -> False], 
            TraditionalForm], {-1.15, 0, 0}], 
          Text3DBox[
           FormBox[
            StyleBox[
            "\"|+Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold,
              FontColor -> GrayLevel[0.3], StripOnInput -> False], 
            TraditionalForm], {0, 1.15, 0}], 
          Text3DBox[
           FormBox[
            StyleBox[
            "\"|-Y\[RightAngleBracket]\"", FontSize -> 14, FontWeight -> Bold,
              FontColor -> GrayLevel[0.3], StripOnInput -> False], 
            TraditionalForm], {0, -1.15, 0}]}, {{{}, {}, {
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2], 
            Dashing[{Small, Small}], 
            Line3DBox[CompressedData["
1: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
aZ3nLndR/f//7+xmU6H/fWev/J//H/XtZOI=
             "]]}}}, {{{}, {}, {
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2], 
            Dashing[{Small, Small}], 
            Line3DBox[CompressedData["
1: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
d3iqKYHXvWC4xC1pTYIb3/oU+Wjvc8gSLvdoF8EFmFksBldCoOjDalIb4bt0
T2dqCs2GQb4e0ucTBK8I1z70pCES0h6el0ol7BPzROacIb94SOUr7pYkuIDg
u0Bzh0So/9VnMYewD2/N69mtvEmC7TnVZlGvkSvfk4mwTE2BL4es3bkI+7za
p9ldyCMDKkrHmicTzp17f7+E05k8KMcSqBhHOKcemw53x9XyYXWumERwPPKQ
xdfTqZIUuDafqK0XSzgX2ur+P2UKoJyH5cjTl8j/3eVkd1frDXyqJmJACkTu
43J38rh7CUzakp5ZY0V4rrbo50E9EO5oZX+caoH8npQHeUWqEiaS3MwdzZCr
Qv2eZLtKqJw23sxqinxiZthsZrUSVh20D602QJ62AFKV6avg4rhgTNBF5PlT
O/h+ctdA+dzheT8eQtzItdWkl6uH098fxXpzI38RfehP+ON6GPU+MMtpF3Ja
40Du/qJ6uOecyoLmdkKc7+74Jiz1Gb6YE5eK3kR5ROD2UvSYcAMU8iyXrB5D
fkhwsu4QRxN0+HOD2YKQ724LHy15PNAKWzaupwJ+5O1CGTf0Cr/A0V9OF1q8
UR7fZKK/NvmiF167+ieK9wnK+yf47ZPLzIbhs3FezR4hVCdcvV/sruozBvfR
n5Y/K43qCoZrTq9Vnk/CIjPx+ny+Edz/atJKid2Yhh1eYTmHk1DdMmG+Q22O
bg7W1sbaTq+hOqfALdTHpngecoiPNoX2I0+pqWjo+jAP9z1g+3qsEvkM63yr
/Md5OGubRH/PG3kf93ae6cZ5uPkmNDOUA7mmN7MzdWge5uZduU87+BX3S27W
NrEsVCjE8lZmx4UO3Od+rwXY61Jh2ohSRM0GqvdktzPLzn3H3m/dMauyMuQr
46oj9T1UKLd5hi3HCbm2ullx3AAVOs1cG7FbQfUkY/NQp/gEFU5/7mZPnm/A
nZ4rebh7GVvP5PH1kJ563OPmD4mFctJgE9nbSDG/BuWFeOnay8rYfvK4k3/F
EvmgeU4Z+zkarFeaEzYWR/7vywFYe4EGZToz2mxSUZ0sa/P3BI8GDR5k+nn2
ErkKxX8/kHD1Gg1GN72+v+FaiXu2cRbvPuy8PThD/ro9FNXzx0z/rpzwpUFB
Jr23v3ciZ6hzIlv402DLxRvhE+HoXuCuHRc8hdUHpyvFa1+Ti1He1LrY2xBE
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
             
             "]]}}}, {{{}, {}, {
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2], 
            Dashing[{Small, Small}], 
            Line3DBox[CompressedData["
1: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
6j11u43q//9/Z7cYD//vO3vl/wHesGTi
             "]]}}}}, 
        GraphicsComplex3DBox[CompressedData["
1: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
vayAW1T4H6omD8s=
         "], {{{}, {}, {
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2], 
            Thickness[0.01], 
            Line3DBox[CompressedData["
1:eJwl2Hf8juUbxvFvIVuyZwiRUUp+SkpWQ5Q0SMMoI3tvIWkZlZWi7FF2ZFX2
yN7Ze8ve2+99vvrj6DyOz3lefZ/nfu77uu6XPHWbV2t2T0JCwuXECQlR2yVK
SHjp3oSEMfJHQE21CLZFXa6fQT2qP0e9V+2pvqV/MOb1t/O/4pNj3vpm6vNY
Qf45Pi1fRL+42fF8R36Q3lV5EF3B/sYOYy8Qm9Aee5mpJ6+Q69GTNAHvhA/G
r8mDCUro4D+V8Pr433J9KkG/4J3x7/Hr8vfkIyV0xF/BG+Ar5YzgMTlRMHmH
/kR+hX5zvbLyI3wZ/gF+iVpUv39cA/lf9X/W/cp3wX+Rh5j/UC2B3dArxN/S
y0JD5Kv4Sv6IuRcpCdYJq4w1lFfJDWknNgn7GytEJbGJWFfsB/mmXNj/+7ac
NZh8TX8Vf1S/s16V+I35Knwufp36jP5PanP5gnqfdZ35KvjHZlfLmfDjcuJg
8i79yfxK/RZ65eTC/PN8On6p+qj+ALWefEp9yrpJ/Cf4j2Y/imsl38KL8Hfw
bNGTr+Or+WPmXqakWBfsVayRvEZuRE/TZLwbPhS/LQ+lZNQVfw1vjK+VG1Mp
moJ3x4fhd+RhlJw+waviTfB1cmaf6YScJJi8W38Kv0q/pV55eWc8I3JZNb28
TH3MzEC1vvyMdVPVHnGNzd2Vi+rdlbMHk2/or+GP61eiFFg37HWsqbxezmLN
Sfm+YPIe/an8av2iVBqbhn2K/SzXM18yHgj+0cT/PRzz1Rz6vdX35aPqz1o3
+bX4b/F9zXdRX43ngn+Vz82X1k9ptjtfjY+NY4PcjPZi07A18bfoWWw61hMb
Lt9Dj8Ueg+XE+vAf8MPN3Yp7EJsR389cV/U1bK9aWX5NzSOvV5+N76a2kFNZ
20N9A2tubqOcVe9fOWkweZ/+dH5t/P3Yg7DfsM+wEbG/0AgsNX2Kv4m3wDbJ
LagMzcB74SPxRDQSS0M98bfwlthmuSXtx37D1mHF4lnAZmKfY6Pk+vEMyImj
H3sov0B9UL+vWks+po6y7nZ8Z3xmfCfzn6hV45nkq/IP8c/p32/2M/5tvpXe
Fjmb/ik5WTD5gP4Mfr3+41ROPwNWDCur/zv/BT9ar4He0/IONUnMq4nkhbFf
mOmn1pZHW3dH3YCdivuEXtfLi5XB0ur34qvzrfW2yq2pHM3Cv4xzBr+PxmB3
sY3Y6fjN6QHsc6wG1kZ+N/ZZ+R88O38aT06f8W/jbfCD6kxsCrbBmlZqBWyX
+oRcXs0oL1cfj7NHbSCXt3a2+hU2NvYaGpvw3wGxCTsT15zSQV+YewdrK2+T
21IFmoN/jY/Dk9E4LD19idfE22Hb44ylijQX742Px5PT+HhU/b3N2Nm4lpQB
+8rcu1h7+b3YU+O3wXPwZ/C5agq1l1pd75DaXv8Q/zu+0brWWEW5OF+Bz8Sv
iGsS56faUD6tvmDdPL4P/qs8wXxDtRSWgn+CT8zn1p9g9l55C39OrxplxL7W
fw/rIO+M85hepD/wvnEe4inplzhTqDf+Pt4R2xXnMR3GZmGbsCfpJexPrF98
LjkVFY/7E8sTLLY3eSv/u3pev5v6uv4+9Y34fGq+uF/jnST2JbWlnNnaPuoH
WCdzu+WcemdjvwsmH9GfzW/WLxHnEfYX9g02UU5NE2OPpr54LbwztifOUapE
8/Fv8Ul4GpoUt5e/8w92QX6TsmL9zNXGush75QfNnJNT0ed8jXivwI+qc7Cp
8RuYbRO/H7Y7zlS5opo53qfU4vHeo34ce7q1C9TvsMnmPo7zX74/rnWc/fyi
2F/0v1HryMfVydYlUbfhF82+RW/I+fXLxrmt/w1fh++qty/OX6pMC/H+8Vzi
aWlKPMP0LV4X/wTbH+cvVaFF+ID4brEP0NS43+k7/EO8G3ZAzhW/tZw6mHxM
fy6/Vb+t3otySf4FPku8Y6lPxjuX2kg+E+ecdYv5gfFbytPMN1JLY+ni9+aT
8nn1p5m9T97OX9J7m3Ji/fU/wrrLB+OMpOPYPOwf7KnY07Al2CBsupyepmNJ
/f92YJfl6vQgNsBcPayH/H68T8hb1UN6udULevPUNOoX6jv6h9Ue+if4P/Bt
1j5NL+JZsRJYVf2l/OA462N/of/pJ8PyBYv3Jnknf0WvRtyX8sP65bBc+gP5
+rFP4p/qf6AWi31ZPayfR72o/4d6v/qlWjPeS/ROqn9i260rFXsctgz7Ps7/
2D9oRnxHGoQ3wHtiR+K8pWq0HB8S5yKeiWbG36TBeMM4D7CjcSbSv9hf2A7s
mbhfsRXYD7FPyJmppM+XHMsfTD+5vIu/qtedrxb7fdzvfIE4o+K9L94f1Fby
xXhWrPue/zj2f7mX+VpxxsR5rvcQfynOxNin5VP4fH6nudJxjbG/sR+xWXIW
moWlsG43dk2uGfebXNBcBSyv/hC+UewLerVjP5e3qcf18qqX9f5UH1C/Ut+N
dxG90/Hege2y7tn4bthKbCg2O/Yhmo2ltGYPdj3OX8qH/WCucdx38gk5n5kr
crpg8pl4V+B367fTeyneU2IP57Pxq2J/0v9BbSyfjfPbulX8MHyO2cbxridn
i2cnzjf+4eiZSyXv5W/EeUj5sR/1m8S9Jp+MM5eq02r8pzgj8ew0F3uYhuJN
45pg/8YZSzVoDf5zPFt4DpqHpfb39mE341mkAtgwc82wr+VTcn4zV+X0weSz
sYfye/Tb670c70RxbvDZ+dVqSf0f1SbyuXiGrVvLD48zQv7DfBP1OSxnPMt8
Sr5APFtm08j7+VvxDMbeIT+iXxEbybfmC5r7SW0e7xlYb3N14jzAtsc7VFwP
9Zp+Buotn9NbzO81+3zcd9g6bETcS7E/0Z/Y/dYdwG7HvU6PYD+ba4H1kc/I
BcxclzMGk8/rL+H36XfQqxRnB1+Jz8GvUZ/SH6o2lc/HPWvden4k/pfZXLF3
4Kni+wXTTysf5O/Ec0CFsOH6LbG+8tk4l+k92oCPwufjuWk+VphG4K3wfti5
OIfpfdqIj8YX4HloAVaERuKt44zEzsfZRxewpdh+rFz8LtgmbAy2UG7qc5aR
H4r9iE8d1zp+N/1v1bryCXWhdQ/Efh/7gXrXfI94j9HfH2dy7M1qIXlTnPvm
Rqlt5EtqUetH8W3iPU3+1nzdOPuwC3oF+Rtx7dRMcc+q7+kdiVn9i/yyOO/i
N7a2o/oKVp5/hc/JP61fy+xmfiy/SC8vLcIepdF4W/w77GKc3VSbtuDj8MWx
n9Bi7DEag7fD+2OX4kylOrQVH48viWedlmDFaCzeHh+AXZYf8bluypmDyZf0
l8dZG/eGmU5qZWyPWkGurD4or1VLmRumNov3EWv/USdgS809HHt0nLVYoWD6
6eKs4+MfqOrqP86O0+8gD5SvxDlJl7EV2CGsIn2IbcN+wZbFXhL7b5yTWOG4
VvyH/El1mdn06pHYk9V71E/VN/UPxJy176iF5c3xrqM/Wm2b6L9/z3vC+v8D
rbeAWg==
             "], VertexColors -> Automatic]}}}, 
         VertexColors -> CompressedData["
1:eJwUm3lUTW8bhpVEaVBCUhRplowNqptKosxJQohCRQNKKRJKokKlOUozmue5
0zyeqRL9Eg1n74NoDsW3v79a612tdw/rfe77us5ZR87G6Ygt77x58yb55s2b
T/3d+JpmKFnJwVLXH6qyfzNBd6k+KUm/CdqqA8e+tnJwNTbKaMnTbMy+MB6J
Kw5A6b2W5cRHDoL30P7rN8qFVKhx2F+JUHT8+xY+THJQbZE0j/4xD+JNj7py
mVFw7Gmlx01z8HznhwSafQEu+kc93lP4ElcS40t8+Ams/Rma6b+qCEFdHCHC
7DUe3V1+/oIEgRo+AWP7zGKsi6mLM01KweJDPqUu6wjIfuLdI2NbCt6gaFGb
3RmQ8Ept09pMYHXowQa2eDl2PZS/G8h+hx1l1+N4dhJQe3eMkZ5YgZuzq3l1
l2aj7tuWNRMHCMzW/0xQUq3CeLNi7uL+HDhsemFNnCJgf3np2sVTVUhmz3zT
DcpDNKvoeLg9AWWPT/0/yqoRYLMuZXpLAdTt2uZd9SBQ7zDCLgutwTP+Znrg
XCH6hPwu7fEn8G3JB+GV1jQwh7Tu3U0txs/ETT77wgn8jFjkdVqrFts/rks6
5F6KJxHRhxcmETAK6ld+LVKHFvNLe9L0ymH8Ku1zXQ4Bue1h0p5ddYgQuOF6
fqgCNlHpcu+qCfRWPTbSyqyHEfe23y3LKkSlHJSN6KDez9+z2Q88GmB5RVFy
Sr0a25M47Rl91P6rbx4tNW/E7T9Pzp1eUYNT8/Q1Pb4TKMjQ2jau2oQyUzmH
gD81iHPSsjb5QyD7a+fJkokmRBRLatvRaTDsWL9tlyCJQJGCwsvtzbi/ub1i
Y2Et+AwLm3dIkvg+4GqZGtkCoSbOovSgOhySWCj1cz2JeIUeLfJsK97IqS8l
z9Xjb+fele1bSWwy8z0grt2Gsw82d0rsaUBThkb3WwMS++QXpTXztuMdf/TJ
UelGTLsI7i48TMLgE13L4b92iDyvjizha0JmWIKj51kSjxYaLhLJ68DDzxIR
JkQT7rX1HcFVEhtGTURk9emI2d9q5V/WjNJJYXKDNwk+utiWt+l01Nbu6sxJ
aIHo5s96qwNJyC3a+5tnCQN+J1ZJBHu04luLq1ljBInBKfPPx68xYJMlt1TD
rA0bLKYFY1JIrDjOOyD3iYED4sNN5RrtCJxY89Aln0TQktX+uYZMdD0V2T27
oAOm93bkO9eSuLHj4+7iLCacpSfdFb93QEnhz0sXJomXlfwpfstZMP8SX3jX
ho5gBQ9jtX4S137zKx3zZOHWi5NLj7TScWIFN3rJDxL5yam0F8MsqB2ZapYE
A5D+lzk1S2LHmyKeBFM20lfRBjXTGQgQW3idX4gLjXX2VrLFbGRzr1rtX83E
qQttox1SXLQf+smMl+9EndQmjd0hTJi2aKpHK3GR1T34ffhhJ5JPrL8U9puJ
uLVhUiGaXPDSPdclTHZCLG7mz8crLIgEhdf57ebihdydP/Inu7B3dG7Us4eF
hcctVDSPcsFWthxPrejCk6SVJrMGbJxfIgAxGy58EpkLXql04+QZid/X8tno
/e+M+HcnLlzdSkvOBndjWnGXiJFsJ25c8fW1vcPF3b1p89//68b9dxM7fV50
4tenh6089Rzoqu7dsKQxC9dSlwZ1LrmHyg6hgstsDm6PqT+dsc+B0M+t/Jyb
Iajb1WvB+cKB0sGtTpZL8hD+jtjWc+0FYr/15tb85CC9pZKxNzEfP79+cn8l
GwdH/YI60X8cWEVopq03LMRv9erWFb4JuCX+MchVmIDr7/bfN4eKcKK4q3Pl
ryQ0XzIV/bqKwNjog3rDRyUQD9PotriRhiV2oUadKgTitZUX/tpRhrWLzzZO
Cb2FUozIdhltAutfHWnFx3KYvbT8XKWfBR9zdp/nHgLicdGL/3pVIv984ofE
X9mQDB7SHzlGYIuk75fIkCq0HVxySL4wF/d4lU5Wniewz8XjrveJakSsEtkn
dS4fg9KGaryuBNzHhq26lGoQlDdVWi1ZCL/itDwrHwIn9C+M2v+qwWY3nnR+
VhEuvj850RhEYMR81GhHCw0PzqpLkMElQNwwkRpLIOr5BNMnsRY8ksZTXlZl
IGMSIoczqPv5orMu2LUOmzNHTvmJVYAtk86jU0Lgzp8QjR6Deog5FWNDSyX+
ys7JJjZS65+mfltLNKBd9WhHEa0Kl5Kjp+W6CWwOcvSV5TTAMe9DmXJiNZqY
4vfEhwnMXbA0Ol7ViLjE43bXAmowp1nafHaCQJ6pf6NFSBPSeWWY07Y0OK/J
bKrlJbF6rk7g2blmiLiN/2k2rIV8wMgdfTESuh4SiwS2tqBx7sPAt7V1SFc9
M7ZsDYk9C5IbTeZacGpSMGjvTB0Ub6SuPLOBxOXit7S51lY8PKoxcZtdj8Gd
ejPlO0joa9XdGoltw6J6O8n5OQ3oD5IJ2ryPRP3dbz+lnNvRZ/bud2dII1j3
ut5LniBhNx7wssykA2Y6XyPuujUhMrvq06mLJDx0tgUsFaLj2QvnXxePNCP+
3FRswQ0SkWffvrS7ToeGwELJ2I0tGHruvlThPglxx7fhx/+jQz743YSsSCv+
/lXePf6UhO+/9u9vdjEwcT/u+acvrRAWy1fd/JLE32TVL7ppDFh+vjfiVtGG
U0mBTX7vSDC3LMm3F2NC/IjnwtPR7fha+nb1aBkJnmQvu+2eTKztvtv31KMD
JearVF1aqFydc56KH2DCWKut+JEaHacUSsYP9JAQ+M+Pc8WEBaLMe+jyCzom
4ja5xHFIPKd333DLYoE1oeSUv4CB1siJpPlTJG6mZX2RXsnG14Le46nXGRhc
Pv/ZbT4u8i+KqZ/zZWPD/Mh4g0EGxnS4mx2WcjFP5+3y/hE2yngP7d57nAn2
C96QfDkuEGp/lmbRie06qmZX6piYdLN7vUyDi/eszIdGlZ34+EckR2srCxbv
lzkH6nPROuMVfF6pC2/3/HHLSGThkevUtLUZdd0kh+nhx11waFkcu0OEjfzc
zK2vrbhItwubfT3Rheu8K+S0vNhY456n9O8SF7+E9vTPO92NVJoKXy+XjdT1
LvvS3Ln4fWbzmZiGbuh/jVL8crITEgYKi57UcLDO9aVcyPksnDw3Ufr55h1U
33j7IJ3OwVTDoD3f32wI6lp6Fxx7gqovrIKLnzg42XIrOSY9F5avXgw51IZh
+9SFJPPvHGx7upl8jHz4WG1LSfeIwbfAXabH/3Dg/m1R8kRXATZ/fPsmM+YV
JqzKX/8SoHJgctMxH58ijO85MzpvXRJUJjWKFSUJWN3aw98tXYIoyT86h5+k
QvikoM86RQJnhZYrBtJL8ax1zkFN+Q1WP/7Ik7GNQIIUY6+gezmuDHJf8adl
4vTD1/oVhgTWJN+8ar6kEss1zo04+WVjpFxoo8sRAhFOxQafT1fhrHAMT4Rp
LqYjP/UePUtd90r94VrFaqy5eS86YzoPO2fmdpldJUDfNiAzMFaNwMVPsk8l
F+BDcKnVoBcB0WPKA0sbamBTYau391IREsac1RcFUrmUY6ucHkrDhsRc023U
c6yQe5z3K5LA7vDbij+u1CLmV17bMFGKUqn4SbdUArpFT5Ijd9Zhnq8q80VK
OZ58Shu9U0BdV/J5cppQPcx1V5wwsaxE1n9HXynVEVCnV8e3fK6H4GJSRSqo
Cjwpk4tPsyjeqx9eeTSrAV+W3OWKXq7GPN05pTNfCLzcRZgGPGpEUMfY+UuH
aqAWMzvv+08C+X8+/ZW3bsJWxfi4Kg0a/BvGn/P/I3Bxom2zgmozmCv8oiQF
a7FF7dGHSmESA4ZDZ7R5WqAQYX5Y5HstjmsG9qWuIhF1/XHIzZYWbD3j0eJB
q0NpbXdkijLFLc6Gt8fDWxGlkzl/a3Q9XAJpi4y1SGjWrLP1cWhDXlLrVKBX
A47JpGx2Nqbm9OjvVlftdjSmyWcMWDRiyPOnyKVjJI5efvtt6dIOvLGzWBmn
14TXiZuSv56n8q3C4onUcAeCympMLGWa8fSF/cxvF+o+lW4dNzxBh13GZW3x
qWbQaw3+pvmQEIr7dIG3lo4p5ZnBy+9b4BfxoPphEJUz84WudysxoP+j96jm
u1Z4jyzV9Y4hMXqg6ty+IAb6Gpk+Rx+0odZ7l71YBonruwXMjGcY0NicdUnY
rh073tsd3VRM5fPJtqkJaya8tjaKNaADvI6qP382kPCRVohTa2YCAwM6wWJ0
GCRb7evvJHGs3XiP50YW4jqC2ie96Ki26Tw5NEDivu2PdtswFpSMDarnk1Tu
Wv6QfTRGYnmq2tEP/1gIvH/5af8JBp6u5HlVMo+LGYGhFzwX2XAQVTfQa2BA
L/kmq0iUi4h3gVrz2GwUuH062KLDhORfTpXBai78Xd9GZut1wltFXb8nnQlZ
uYOXLdW4qDu2r3TZ605Uq0gJX1zBgqf3sTrhHVxcHLzVwyvahU9jHsW0hyyY
+dT3jZlwkXz+xq8F17tg1Xd/z8dxFqwX3Mv8bsHFzsap6eSeLvCYR2yNOsNG
Na1vy0NbLvTeC43TDbvh+3TNP0U6GzV3L6m3XONi+9epx7czuhEtMCK1VL8T
fd5fQ9yaODg2OKoVopYNLdkN+jq2fihXdhxWes8Bv4xH4bfuHIjXlLeNGT9D
88vBKbthDiaY3zQl3PLALtX2M14XiQUD5jUaExys5t9fwr+wAGe8H5lENMTj
+0+VnY28BPSN7N5YZBaC5sv+dudiIuY3z9z8uoTih38OL132FaNc5UDJ5o5k
2Pfa2r5bQ+DRpVq/rOkSBIrZXTt1Oh3iLqsF/NUJ9NnpcuxSypC9t0a++udb
bHqzyz5Yl0CqIvvADVD+017q8jc1CwmyfHc0TQksCK9ITSErYf5iqL7bMQcG
ZysOOJwg0FG1z/cIxRnaz+7HZa3Ng6iDc4/KRQLaN9SytwdWY0llxMzD5nwE
7Hq4vOgG5Y+Z3BdN1jUIPn22XiGwEJsHXogw7lF5qBj/r1qVBl712OW1esVQ
qzAuCXhG4MeU19lWnlr0yaT1xswvhd2qXTKWryi/C7G/Ld5Ti4vbu1cvbS3D
ijXJehaZBFSEiPj7r+tg25vNuX6rAqtOpYtNlFP50xdUssijHsP0DUsF1lTB
7ELyS5lW6v5HVC3GjBvwzKz82vFfVehI2jUw/IHADosx7neZRkwc3xps+F81
nl1W+q+OpLjuYaPu+qlGvHMvu3S7pgZtLI9Q9jSBnGj1Zw9rmiDbF7VgYzQN
J9zt//nyk+hcUNE/96IZ+9hnT3t710Ji+Mj6cgkSoe8Ms97btcD+/Dm3Fss6
zK3Zwn9vLYmJsMp5Kze2wi8w5tDKDfV4vt4jcvkmEm28kgKL5rfhumP2YJNw
AyymCjjbQMLond2zU3SKP4bn6Xj+n+/mhZIT+0k8yOqToCW3Y+aH5r7G5kZU
Py5LaDpFwt3bztz2dge4wj6StplNCKo8uLLdngRrWWXLyvV0hLuuTnf3b8Zb
VV9DVw8SByM+kQHBdPy2ez2leLkFv23eKCX4k1ipc6vxzRQd5hMX+N4btuKG
bXvj6TASW/48vehrxUC61FmW/4o2xG6xWMVJJLH4X7jNxloG2L+2noqabsN4
a6fSbDYJjbUrVgerMDHhYpT8ht6O6PgJMquKRMlP1S73MCYaPXZknMrtgIve
YrvRdhJhfaUHls4xsf9JgZbfHjpuJK+MLe8lUfG13v/cORY2pTvO/pdNh8LH
J37Hv5J4vaNK2r+FhTuJojIX1zKw4OMvFe9fJHrSt7qe2czGPvLgaudgBrZL
LLhnsIiLa3V6tVWxbPycmj+3h4eJlI6Tz2RWUHlS1z5RKdCJqqAqnYZrTIRs
kjmjtJ7KsXxFxU6nTozsVbLi6WeiudX7E3MLF98PL7O49qETU63zjwseZmHz
li4pAQMuNgnf3l27qwu3Yry2Pq9gofGCgljLQSrHOOcmG5K64F30bCxaiQ0h
m95iK2suli3YypMo2g0iK0y4K4JN5d8jGTdHiq923W3TcOsGfXKbQMiCTgQ3
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
gkUIv2x4t9Kf8o4Hppu+XqDBW89kdrqgGGHjZXZV4QSiLN2zRVEL3n/b7O89
KAVzkbTxjSQC97a49XyRqINrSZUkZ185RNLS1unl/v/3Jmzhnf/V4cfBvaJV
4xVoqYl3kamh3pvNeOaj/HqcVhc6ufFMFfwv1pYvoVO9X+hifcanAc2vXI9o
b6+GqKWKztpPBDLX+onfONmIeeEfqm+vrkEX60YW5zuB/LArV7U3N0Ft4dPD
Grw0RH/4IV/1h3rP3/K6/P80UU5j/CCmm4bPVkyBbEES2yZL39DYzdD6t/rp
1/JaBFdvupImSWL+crczX+Kp3PijzWMUVofTKjyCFxVItDr53U2/2IpmI30X
8cv1eCOkvUJvG4mfnhZiZ6nzfanJtpi2vwG/PeLXKhiSkLP3exsv0I4lOx4n
bZRvxLIte6w3HCFx39nsoOxgO3w35Al0L27CVXf2c+IsiXO3hyIOlnSAG6MS
xB1pQp1xSEPBVRLyWk7u93fRYfErvqCI1oy44DyHWG8S9QGmPd1v6bB/qlV4
Oa0FfRXHggIDSYRfvJsmvZTqkcdLpeV9WqH/046rH0li+JzNpgI3BpxZ3T7m
R9sgG91fIJhKYmDrOmfjLwzss6gsv6hJ8Qvj4V0yn8TQr6X5q/YwoVKfFLdN
uAM2PpFl/bXU/i8Gszi5TOS4ZB4fHu+A2nJFt09MEm7VIquSVrIwV+mtQ7el
Y9k7+cuJ/STYCwd1C71ZVA9L7iU66PCpfNR65wfVXwqRy6pIFtyLamkuBgyQ
J9eoO82RGNe8PSF8kI21ns4h798ysMZostJLiItYc3ULrzI2Ns9Kr/xPjonn
hVmm+qu44J9sWFyj2Inysp/ZL54zwV8Q1SmuTPGt/9MGs8dUbozTYjb+ZeL3
hu8d/zS5CBrT0Wmf6UR6Y+q4lgsLFo/LTCZ2c9FD6q3aZd2Fb+3vZut7WWB+
+/P77VEuEua+5i6q6cKpW2kLQozZaK9PlPGx4UKS6zG/YUM3XtblezYXsWE5
1t95yZkLwSHeG4PPuqFa2/Vjbl0nCrYss3Wu5+CMQYX6S3YWHLqXy9vcuod/
JZIxn9kcdGjOLHtxMwf7BRXupOaEIGn/f/uOD3CQcMaUEJXJgz597FN92gvY
f824oTHKwYwr42p1Zj5k9CcP+xyLQxmbr9PvHwfdV2KbMg4V4nokjV4blwDH
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
/qJrcIscHR930TtprhU4Gv0tk95BIKV17vu02AacPvFBWW5rDeZZPmJccyPx
VKPnay6tHT+1rS68nWpCRsj9H0f8SNx9unZR0vYOfApyqQ5nNKNEaQ93LJHE
4fAzmbRgJoRFjqwWdW3D1fDK4pwMEvEX2dv+UD1mYhj54tBWBsrKgu8ojZFY
xbt4M+QzC6TdT71AMyYE8fXAMz0+3JScnG/+4SBOZIO3yRkWko+4L+V85eHz
qE/v6dpCeGxalMhITUaXk5DDZXGKY/NuvhKeVYLGeYYPBQzTYWXyoSPNnMCN
K6/nfUuuQrfU2YWpsnm4olSX43eRwJZnXauV5tCQsmL8jdv3Ymht0dacuEG9
f/LqQ/M+GnLL2MYSBaXQi8JFm26qL5wX52+ZakBU0V2GXWENhA7HiayVJxEy
U623Z14rLE93BzWL1MP5Vp7lASsS7hprQ9QvUn5jE5P/9WkjJD9sFJetJOF0
zKOnNLwTP3qCNz+50g6af79ZI0FC5OSM5x+LqTkSvTjxUpyJhpq39Vs28IEr
A2tpDRxonU/S1jdiwVcqMvIJjYefKqarp8JzIKM0c09HfRh0TvHneH/mISi/
/2uRayG+PzvayP3zADtTR47Np/jDE/4mIv64GB5JdcWEVxoULqrkVepQPRWf
ONPpbgX0361dfuxjNo5sHOyOyaT2ESfCRceWDvmwyy55jRXojEq8E8smkBV/
0/JUTQP+Shn91g2uQe6piu+ly0l0+C98OudNC1b2by/+yaKjQ97wywMzEqkC
Og7RlgxUvvzn8e9wI9z/fTJ2KaXO1cqCI+e8O2GrW+vfZdeOOO1wzfkUT6aE
lwq+echCufN9s19fO1BWbNfHE+DDmNd55oYfGwnBB77s7GBiIDF37mpDPhr0
nSW/Lu7CQZc8RdU4FhhX3A4+PMRHkYj6aLYVF+sl8reEdbNReNhv5CvVERM9
nn9WM4swfrX3jEZ2Co4tkPJ3tyZQXfPJnjGrGmfMSmd038zDI4U8j3BHAhcC
Nmmpsqrxa0Qk0NqkALq2eXNHqC6IuSmhdd6A8iHuNfMVB0oQ6hlJI/738yFN
Bb3OJrzWzDPteEFDEP2rhN9dEr1ksqypOxMnE629f69pw4MlEwJ/Kf+0n2P6
4+t7Dmx23uwVdWShIcSwvTyED4Mj8hERn7jwZBkRAhEcnKvbvYpHeebx9hMr
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
/wG3gylA
          "]], {
         PointSize[0.035], 
         RGBColor[0.742077, 0.0624857, 0.00605783], 
         Point3DBox[{0, 0, 1}], 
         RGBColor[
         0.8280513333333334, 0.37499046666666663`, 0.3373718866666666], 
         Point3DBox[{-0.3072590473967495, 0.09117608017716569, 
          0.9472480140894288}]}, 
        GraphicsComplex3DBox[CompressedData["
1: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
         "], {{{}, {}, {
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2], 
            Thickness[0.01], 
            
            Line3DBox[{1, 153, 121, 185, 95, 179, 147, 75, 173, 141, 115, 60, 
             168, 136, 110, 90, 51, 162, 130, 104, 84, 69, 2, 154, 122, 96, 
             76, 61, 52, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
             18, 19, 20, 21, 22, 23, 155, 123, 97, 77, 62, 53, 24, 156, 124, 
             98, 78, 63, 54, 163, 131, 105, 85, 70, 25, 157, 125, 99, 79, 174,
              142, 116, 64, 169, 137, 111, 181, 149, 91, 177, 145, 187, 119, 
             183, 151, 189, 55, 164, 132, 186, 106, 180, 148, 86, 175, 143, 
             117, 71, 171, 139, 113, 93, 26, 158, 126, 100, 80, 65, 56, 165, 
             133, 107, 87, 72, 27, 159, 127, 101, 81, 66, 57, 28, 29, 30, 31, 
             32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 
             48, 160, 128, 102, 82, 67, 58, 166, 134, 108, 88, 73, 49, 161, 
             129, 103, 83, 68, 170, 138, 112, 92, 59, 167, 135, 109, 89, 176, 
             144, 118, 74, 172, 140, 114, 182, 150, 94, 178, 146, 188, 120, 
             184, 152, 190, 50}, VertexColors -> Automatic]}}}, 
         VertexColors -> CompressedData["
1:eJxF13s4VPkfB3CLSspdrkvpgihq3XJZH4lyKZdSCkkSwpZKSUlRaUsKlcXU
It2jJFMipJkzlISaw6J05phj7WIru1vbhX7nyXM+v3me85zn9c95zsy8P5ev
Ufi2lZtlZWRk6thLjr1Wf/v862D1qOeQqioFnMPr9xjyn+4F+wye3yMzCjh3
Pzmp4TKcAZFDPW8qllHoIV3Zzq66M6Azd25BVTiFLmjdLZbfzIMus6/Ztvsp
dJq74+XqFcXwSLg65O98Cl1KC6LW3LgIlg73FxKVFPqubE6/pv9VECw730W2
U+g1s/aPNjM3IFpPsTX0LwodJ/cuv9/pFmQ1HWr9oiBBW1qRH9W23gZKOeVC
1xwJOsJt9xba8A7wFxw52OwiQUvJOXMsGyshX3taqU2wBC023QOZp+/Cxdw5
13sTJeiUnpPfGyyuAut3rnfO5UjQeb4ea+vUq2GojzqZf0uCHl2iSvX01MAd
3qQq5acStEHeOTPz9FoYs3AcyuuXoEvLml9kBNTD9qA3IxvlaPTe7NfTVdIe
QvTGcnkXQxrdWWo2QRLbAOkyIwMhjjR6ncJ+1e3+j6Ay4oHeSCCNvn964Wi+
iQCiLp4OPLeDRrcdsMtvVhHC4uTByCOnaLSQV6iVOyCEQku/1EPXaXTvB+Vq
w1oClK/++MdHIY2+Xdk6tbxEBCVVN2bdktDosOIRl+69jVB70XhL0hcaLfor
crZSRBOMmc5MTdPtQwck0/PHPB6D747L/XK2feha+4c6Pxs+gdm/2AUW+PWh
ewPfVOhNbAajAM+CbT/1oXsvHbRY2tsMF4aiBtb93IeWtdZts6x4ClZeKocf
XOhD986UM5qZ1wKDYDeyvr4PnbfYd1XZ1mdgqhYXq9ndh1ZoGLJeHNgKJ/Ya
3Zv8oQ9tvuj9Z1udNkio71PSVJeimVtJ8aVpbRD32KIid54U/bnzkpPx+zY4
EfvJdK2nFP1V+1DS0MZ2sPzj+XWLCCl6g8Jk5Xsd7fBpzPzrklQp+kVeDj/M
8zmQXUrF7eelaOvFLS1rKtl71pcVCVVS9Eh++Y/+pi+gpje2ZTUpRf+q6G6Y
d+YFiBQGApe/laLX679Sqxt7AZIPQ5Y1igx6z0uD9QPbxTDrwI7uaBMGncZX
0d3wSgx/SuSzzF0Z9HgfIiExNUd2ShiDjvjWh2Lg7mXHmC0GFNr97Gb/lmuH
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
          "]], {
         PointSize[0.035], 
         RGBColor[0, 0.501961, 0], 
         Point3DBox[{0, 0, 1}], 
         RGBColor[
          NCache[
           Rational[1, 3], 0.3333333333333333], 0.667974, 
          NCache[
           Rational[1, 3], 0.3333333333333333]], 
         Point3DBox[{
          0., -1.9428902930940252`*^-16, -1.0000000000000013`}]}}, {
       ViewAngle -> 0.34, ImageSize -> 350, ViewPoint -> 
        Dynamic[$CellContext`vp$$], Boxed -> False}], 
      FormBox[
       FormBox[
        TemplateBox[{"\"First\"", "\"Second\""}, "LineLegend", 
         DisplayFunction -> (FormBox[
           StyleBox[
            StyleBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  TagBox[
                   GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[0.742077, 0.0624857, 0.00605783]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[0.742077, 0.0624857, 0.00605783]], {}}}, 
                    AspectRatio -> Full, ImageSize -> {20, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[0, 0.501961, 0]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Thickness[0.18], 
                    RGBColor[0, 0.501961, 0]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
               "Grid"], Alignment -> Left, AppearanceElements -> None, 
              ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
              "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
            FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
            False], TraditionalForm]& ), 
         InterpretationFunction :> (RowBox[{"LineLegend", "[", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.742077, 0.0624857, 0.00605783], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.494718, 0.04165713333333333, 
                    0.0040385533333333334`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "\[InvisibleSpace]"}], 
                    "RGBColor[0.742077, 0.0624857, 0.00605783]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.742077, 0.0624857, 0.00605783]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.742077, 0.0624857, 0.00605783], Editable -> 
                    False, Selectable -> False]}], "]"}], ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "0.01`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0.501961, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0.3346406666666667, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], "\[InvisibleSpace]"}], 
                    "RGBColor[0, 0.501961, 0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0.501961, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0.501961, 0], Editable -> False, Selectable -> 
                    False]}], "]"}]}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
        TraditionalForm], TraditionalForm]}, "Legended", 
     DisplayFunction -> (GridBox[{{
         TagBox[
          ItemBox[
           PaneBox[
            TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
            BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
          "SkipImageSizeLevel"], 
         ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
       GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
       AutoDelete -> False, GridBoxItemSize -> Automatic, 
       BaselinePosition -> {1, 1}]& ), 
     InterpretationFunction -> (RowBox[{"Legended", "[", 
        RowBox[{#, ",", 
          RowBox[{"Placed", "[", 
            RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& ), Editable -> True]},
   
   "RowDefault"],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{{3.6352503670147953`*^9, 3.635250382564362*^9}, 
   3.6352565068922043`*^9}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["BlochPlot2D", "Subsection",
 CellChangeTimes->{{3.633703388935305*^9, 3.633703391262722*^9}}],

Cell[TextData[{
 StyleBox["BlochPlot2D[state]", "Input"],
 " plots ",
 StyleBox["state", "Input"],
 " onto XZ, YZ, and XY  2D projections,where the ",
 StyleBox["state", "Input"],
 " can be a pure state or a density matrix."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{3.6340512281334*^9},
 CellTags->"BlochPlot2D::usage"],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.634052701423683*^9, 3.6340527046371317`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BlochPlot2D", "[", 
  RowBox[{
   RowBox[{"0.5", "*", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], "+", 
   RowBox[{"0.25", "*", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}]}], "}"}], "/", "2"}]}], "+", 
   RowBox[{"0.25", "*", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "I"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "I"}], ",", "1"}], "}"}]}], "}"}], "/", "2"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.634052705283165*^9, 3.63405282609767*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     GraphicsBox[{{CircleBox[{0, 0}], LineBox[{{1, 0}, {-1, 0}}], 
        LineBox[{{0, 1}, {0, -1}}], InsetBox[
         StyleBox["\<\"|+X\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {1.15, 0}], InsetBox[
         StyleBox["\<\"|-X\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {-1.15, 0}], InsetBox[
         StyleBox["\<\"|+Z\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {0, 1.15}], InsetBox[
         StyleBox["\<\"|-Z\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {0, -1.15}]}, 
       {RGBColor[1, 0, 0], Thickness[0.01], 
        LineBox[NCache[{{0, 0}, {Complex[0.25, 0.], Complex[0.5, 0.]}}, {{0, 
           0}, {0.25, 0.5}}]]}}], {193.5, -189.}, 
     ImageScaled[{0.5, 0.5}], {360., 360.}], InsetBox[
     GraphicsBox[{{CircleBox[{0, 0}], LineBox[{{1, 0}, {-1, 0}}], 
        LineBox[{{0, 1}, {0, -1}}], InsetBox[
         StyleBox["\<\"|+Y\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {1.15, 0}], InsetBox[
         StyleBox["\<\"|-Y\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {-1.15, 0}], InsetBox[
         StyleBox["\<\"|+Z\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {0, 1.15}], InsetBox[
         StyleBox["\<\"|-Z\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {0, -1.15}]}, 
       {RGBColor[1, 0, 0], Thickness[0.01], 
        LineBox[NCache[{{0, 0}, {Complex[-0.25, 0.], Complex[0.5, 0.]}}, {{0, 
           0}, {-0.25, 0.5}}]]}}], {580.5, -189.}, 
     ImageScaled[{0.5, 0.5}], {360., 360.}], InsetBox[
     GraphicsBox[{{CircleBox[{0, 0}], LineBox[{{1, 0}, {-1, 0}}], 
        LineBox[{{0, 1}, {0, -1}}], InsetBox[
         StyleBox["\<\"|+X\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {1.15, 0}], InsetBox[
         StyleBox["\<\"|-X\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {-1.15, 0}], InsetBox[
         StyleBox["\<\"|+Y\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {0, 1.15}], InsetBox[
         StyleBox["\<\"|-Y\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {0, -1.15}]}, 
       {RGBColor[1, 0, 0], Thickness[0.01], 
        LineBox[NCache[{{0, 0}, {Complex[0.25, 0.], Complex[-0.25, 0.]}}, {{0,
            0}, {0.25, -0.25}}]]}}], {967.5, -189.}, 
     ImageScaled[{0.5, 0.5}], {360., 360.}]}, {}},
  ContentSelectable->True,
  ImageSize->Large,
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{
  3.634052747274077*^9, {3.634052783725178*^9, 3.634052792112878*^9}, 
   3.6340528287724123`*^9}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["ListBlochPlot2D", "Subsection",
 CellChangeTimes->{{3.633703404255406*^9, 3.6337034078398867`*^9}}],

Cell[TextData[{
 StyleBox["ListBlochPlot2D[states]", "Input"],
 " plots a list of states onto XZ, YZ, and XY 2D projections, where the ",
 StyleBox["states", "Input"],
 " can be a list of pure state vectors or a list of density matrix."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{
  3.63405120635367*^9, {3.634051387959518*^9, 3.634051412674863*^9}},
 CellTags->"ListBlochPlot2D::usage"],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.634052971430859*^9, 3.634052973996256*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListBlochPlot2D", "[", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"#", ",", 
       RowBox[{
        RowBox[{"-", "I"}], 
        SqrtBox[
         RowBox[{"1", "-", 
          SuperscriptBox["#", "2"]}]]}]}], "}"}], "&"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", "1", ",", "0.01"}], "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.634052982670727*^9, 3.634053010919631*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     GraphicsBox[{{CircleBox[{0, 0}], LineBox[{{1, 0}, {-1, 0}}], 
        LineBox[{{0, 1}, {0, -1}}], InsetBox[
         StyleBox["\<\"|+X\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {1.15, 0}], InsetBox[
         StyleBox["\<\"|-X\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {-1.15, 0}], InsetBox[
         StyleBox["\<\"|+Z\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {0, 1.15}], InsetBox[
         StyleBox["\<\"|-Z\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {0, -1.15}]}, {
        {RGBColor[
          NCache[
           Rational[1, 101], 0.009900990099009901], 0, 
          NCache[
           Rational[100, 101], 0.9900990099009901]], PointSize[0.02], 
         PointBox[NCache[{Complex[0., 0.], Complex[-1., 0.]}, {0., -1.}]]}, 
        {RGBColor[
          NCache[
           Rational[2, 101], 0.019801980198019802`], 0, 
          NCache[
           Rational[99, 101], 0.9801980198019802]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9998, 0.]}, {0., -0.9998}]]}, 
        {RGBColor[
          NCache[
           Rational[3, 101], 0.0297029702970297], 0, 
          NCache[
           Rational[98, 101], 0.9702970297029703]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9992000000000001, 0.]}, {
           0., -0.9992000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[4, 101], 0.039603960396039604`], 0, 
          NCache[
           Rational[97, 101], 0.9603960396039604]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9981999999999999, 0.]}, {
           0., -0.9981999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[5, 101], 0.04950495049504951], 0, 
          NCache[
           Rational[96, 101], 0.9504950495049505]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9967999999999999, 0.]}, {
           0., -0.9967999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[6, 101], 0.0594059405940594], 0, 
          NCache[
           Rational[95, 101], 0.9405940594059405]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9950000000000001, 0.]}, {
           0., -0.9950000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[7, 101], 0.06930693069306931], 0, 
          NCache[
           Rational[94, 101], 0.9306930693069307]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9928, 0.]}, {0., -0.9928}]]}, 
        {RGBColor[
          NCache[
           Rational[8, 101], 0.07920792079207921], 0, 
          NCache[
           Rational[93, 101], 0.9207920792079208]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9902, 0.]}, {0., -0.9902}]]}, 
        {RGBColor[
          NCache[
           Rational[9, 101], 0.0891089108910891], 0, 
          NCache[
           Rational[92, 101], 0.9108910891089109]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9872000000000001, 0.]}, {
           0., -0.9872000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[10, 101], 0.09900990099009901], 0, 
          NCache[
           Rational[91, 101], 0.900990099009901]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9838, 0.]}, {0., -0.9838}]]}, 
        {RGBColor[
          NCache[
           Rational[11, 101], 0.10891089108910891`], 0, 
          NCache[
           Rational[90, 101], 0.8910891089108911]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.98, 0.]}, {0., -0.98}]]}, 
        {RGBColor[
          NCache[
           Rational[12, 101], 0.1188118811881188], 0, 
          NCache[
           Rational[89, 101], 0.8811881188118812]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9757999999999999, 0.]}, {
           0., -0.9757999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[13, 101], 0.12871287128712872`], 0, 
          NCache[
           Rational[88, 101], 0.8712871287128713]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9712000000000001, 0.]}, {
           0., -0.9712000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[14, 101], 0.13861386138613863`], 0, 
          NCache[
           Rational[87, 101], 0.8613861386138614]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9662, 0.]}, {0., -0.9662}]]}, 
        {RGBColor[
          NCache[
           Rational[15, 101], 0.1485148514851485], 0, 
          NCache[
           Rational[86, 101], 0.8514851485148515]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9608000000000001, 0.]}, {
           0., -0.9608000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[16, 101], 0.15841584158415842`], 0, 
          NCache[
           Rational[85, 101], 0.8415841584158416]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9550000000000002, 0.]}, {
           0., -0.9550000000000002}]]}, 
        {RGBColor[
          NCache[
           Rational[17, 101], 0.16831683168316833`], 0, 
          NCache[
           Rational[84, 101], 0.8316831683168316]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9488000000000002, 0.]}, {
           0., -0.9488000000000002}]]}, 
        {RGBColor[
          NCache[
           Rational[18, 101], 0.1782178217821782], 0, 
          NCache[
           Rational[83, 101], 0.8217821782178217]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9421999999999999, 0.]}, {
           0., -0.9421999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[19, 101], 0.18811881188118812`], 0, 
          NCache[
           Rational[82, 101], 0.8118811881188119]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9352, 0.]}, {0., -0.9352}]]}, 
        {RGBColor[
          NCache[
           Rational[20, 101], 0.19801980198019803`], 0, 
          NCache[
           Rational[81, 101], 0.801980198019802]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9277999999999998, 0.]}, {
           0., -0.9277999999999998}]]}, 
        {RGBColor[
          NCache[
           Rational[21, 101], 0.2079207920792079], 0, 
          NCache[
           Rational[80, 101], 0.7920792079207921]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9199999999999999, 0.]}, {
           0., -0.9199999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[22, 101], 0.21782178217821782`], 0, 
          NCache[
           Rational[79, 101], 0.7821782178217822]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9117999999999999, 0.]}, {
           0., -0.9117999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[23, 101], 0.22772277227722773`], 0, 
          NCache[
           Rational[78, 101], 0.7722772277227723]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9031999999999999, 0.]}, {
           0., -0.9031999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[24, 101], 0.2376237623762376], 0, 
          NCache[
           Rational[77, 101], 0.7623762376237624]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8942000000000001, 0.]}, {
           0., -0.8942000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[25, 101], 0.24752475247524752`], 0, 
          NCache[
           Rational[76, 101], 0.7524752475247525]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8848, 0.]}, {0., -0.8848}]]}, 
        {RGBColor[
          NCache[
           Rational[26, 101], 0.25742574257425743`], 0, 
          NCache[
           Rational[75, 101], 0.7425742574257426]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8750000000000001, 0.]}, {
           0., -0.8750000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[27, 101], 0.26732673267326734`], 0, 
          NCache[
           Rational[74, 101], 0.7326732673267327]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8648000000000001, 0.]}, {
           0., -0.8648000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[28, 101], 0.27722772277227725`], 0, 
          NCache[
           Rational[73, 101], 0.7227722772277227]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8542000000000001, 0.]}, {
           0., -0.8542000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[29, 101], 0.2871287128712871], 0, 
          NCache[
           Rational[72, 101], 0.7128712871287128]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8432, 0.]}, {0., -0.8432}]]}, 
        {RGBColor[
          NCache[
           Rational[30, 101], 0.297029702970297], 0, 
          NCache[
           Rational[71, 101], 0.7029702970297029]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8318000000000001, 0.]}, {
           0., -0.8318000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[31, 101], 0.3069306930693069], 0, 
          NCache[
           Rational[70, 101], 0.693069306930693]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8200000000000001, 0.]}, {
           0., -0.8200000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[32, 101], 0.31683168316831684`], 0, 
          NCache[
           Rational[69, 101], 0.6831683168316832]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8078000000000001, 0.]}, {
           0., -0.8078000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[33, 101], 0.32673267326732675`], 0, 
          NCache[
           Rational[68, 101], 0.6732673267326733]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.7951999999999998, 0.]}, {
           0., -0.7951999999999998}]]}, 
        {RGBColor[
          NCache[
           Rational[34, 101], 0.33663366336633666`], 0, 
          NCache[
           Rational[67, 101], 0.6633663366336634]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.7822, 0.]}, {0., -0.7822}]]}, 
        {RGBColor[
          NCache[
           Rational[35, 101], 0.3465346534653465], 0, 
          NCache[
           Rational[66, 101], 0.6534653465346535]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.7687999999999999, 0.]}, {
           0., -0.7687999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[36, 101], 0.3564356435643564], 0, 
          NCache[
           Rational[65, 101], 0.6435643564356436]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.755, 0.]}, {0., -0.755}]]}, 
        {RGBColor[
          NCache[
           Rational[37, 101], 0.36633663366336633`], 0, 
          NCache[
           Rational[64, 101], 0.6336633663366337]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.7408000000000001, 0.]}, {
           0., -0.7408000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[38, 101], 0.37623762376237624`], 0, 
          NCache[
           Rational[63, 101], 0.6237623762376238]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.7262, 0.]}, {0., -0.7262}]]}, 
        {RGBColor[
          NCache[
           Rational[39, 101], 0.38613861386138615`], 0, 
          NCache[
           Rational[62, 101], 0.6138613861386139]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.7112000000000002, 0.]}, {
           0., -0.7112000000000002}]]}, 
        {RGBColor[
          NCache[
           Rational[40, 101], 0.39603960396039606`], 0, 
          NCache[
           Rational[61, 101], 0.6039603960396039]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.6957999999999999, 0.]}, {
           0., -0.6957999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[41, 101], 0.40594059405940597`], 0, 
          NCache[
           Rational[60, 101], 0.594059405940594]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.6799999999999999, 0.]}, {
           0., -0.6799999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[42, 101], 0.4158415841584158], 0, 
          NCache[
           Rational[59, 101], 0.5841584158415841]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.6637999999999998, 0.]}, {
           0., -0.6637999999999998}]]}, 
        {RGBColor[
          NCache[
           Rational[43, 101], 0.42574257425742573`], 0, 
          NCache[
           Rational[58, 101], 0.5742574257425742]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.6472, 0.]}, {0., -0.6472}]]}, 
        {RGBColor[
          NCache[
           Rational[44, 101], 0.43564356435643564`], 0, 
          NCache[
           Rational[57, 101], 0.5643564356435643]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.6302000000000001, 0.]}, {
           0., -0.6302000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[45, 101], 0.44554455445544555`], 0, 
          NCache[
           Rational[56, 101], 0.5544554455445545]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.6127999999999999, 0.]}, {
           0., -0.6127999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[46, 101], 0.45544554455445546`], 0, 
          NCache[
           Rational[55, 101], 0.5445544554455446]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.595, 0.]}, {0., -0.595}]]}, 
        {RGBColor[
          NCache[
           Rational[47, 101], 0.46534653465346537`], 0, 
          NCache[
           Rational[54, 101], 0.5346534653465347]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.5768000000000001, 0.]}, {
           0., -0.5768000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[48, 101], 0.4752475247524752], 0, 
          NCache[
           Rational[53, 101], 0.5247524752475248]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.5581999999999998, 0.]}, {
           0., -0.5581999999999998}]]}, 
        {RGBColor[
          NCache[
           Rational[49, 101], 0.48514851485148514`], 0, 
          NCache[
           Rational[52, 101], 0.5148514851485149]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.5392000000000001, 0.]}, {
           0., -0.5392000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[50, 101], 0.49504950495049505`], 0, 
          NCache[
           Rational[51, 101], 0.504950495049505]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.5198, 0.]}, {0., -0.5198}]]}, 
        {RGBColor[
          NCache[
           Rational[51, 101], 0.504950495049505], 0, 
          NCache[
           Rational[50, 101], 0.49504950495049505`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.4999999999999999, 0.]}, {
           0., -0.4999999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[52, 101], 0.5148514851485149], 0, 
          NCache[
           Rational[49, 101], 0.48514851485148514`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.4798, 0.]}, {0., -0.4798}]]}, 
        {RGBColor[
          NCache[
           Rational[53, 101], 0.5247524752475248], 0, 
          NCache[
           Rational[48, 101], 0.4752475247524752]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.4592000000000001, 0.]}, {
           0., -0.4592000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[54, 101], 0.5346534653465347], 0, 
          NCache[
           Rational[47, 101], 0.46534653465346537`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.4381999999999999, 0.]}, {
           0., -0.4381999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[55, 101], 0.5445544554455446], 0, 
          NCache[
           Rational[46, 101], 0.45544554455445546`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.4167999999999999, 0.]}, {
           0., -0.4167999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[56, 101], 0.5544554455445545], 0, 
          NCache[
           Rational[45, 101], 0.44554455445544555`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.39499999999999996`, 0.]}, {
           0., -0.39499999999999996`}]]}, 
        {RGBColor[
          NCache[
           Rational[57, 101], 0.5643564356435643], 0, 
          NCache[
           Rational[44, 101], 0.43564356435643564`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.37279999999999974`, 0.]}, {
           0., -0.37279999999999974`}]]}, 
        {RGBColor[
          NCache[
           Rational[58, 101], 0.5742574257425742], 0, 
          NCache[
           Rational[43, 101], 0.42574257425742573`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.35019999999999984`, 0.]}, {
           0., -0.35019999999999984`}]]}, 
        {RGBColor[
          NCache[
           Rational[59, 101], 0.5841584158415841], 0, 
          NCache[
           Rational[42, 101], 0.4158415841584158]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.3272000000000001, 0.]}, {
           0., -0.3272000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[60, 101], 0.594059405940594], 0, 
          NCache[
           Rational[41, 101], 0.40594059405940597`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.3038000000000002, 0.]}, {
           0., -0.3038000000000002}]]}, 
        {RGBColor[
          NCache[
           Rational[61, 101], 0.6039603960396039], 0, 
          NCache[
           Rational[40, 101], 0.39603960396039606`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.28000000000000014`, 0.]}, {
           0., -0.28000000000000014`}]]}, 
        {RGBColor[
          NCache[
           Rational[62, 101], 0.6138613861386139], 0, 
          NCache[
           Rational[39, 101], 0.38613861386138615`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.2557999999999999, 0.]}, {
           0., -0.2557999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[63, 101], 0.6237623762376238], 0, 
          NCache[
           Rational[38, 101], 0.37623762376237624`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.2311999999999999, 0.]}, {
           0., -0.2311999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[64, 101], 0.6336633663366337], 0, 
          NCache[
           Rational[37, 101], 0.36633663366336633`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.20619999999999994`, 0.]}, {
           0., -0.20619999999999994`}]]}, 
        {RGBColor[
          NCache[
           Rational[65, 101], 0.6435643564356436], 0, 
          NCache[
           Rational[36, 101], 0.3564356435643564]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.18080000000000002`, 0.]}, {
           0., -0.18080000000000002`}]]}, 
        {RGBColor[
          NCache[
           Rational[66, 101], 0.6534653465346535], 0, 
          NCache[
           Rational[35, 101], 0.3465346534653465]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.15499999999999986`, 0.]}, {
           0., -0.15499999999999986`}]]}, 
        {RGBColor[
          NCache[
           Rational[67, 101], 0.6633663366336634], 0, 
          NCache[
           Rational[34, 101], 0.33663366336633666`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.12880000000000008`, 0.]}, {
           0., -0.12880000000000008`}]]}, 
        {RGBColor[
          NCache[
           Rational[68, 101], 0.6732673267326733], 0, 
          NCache[
           Rational[33, 101], 0.32673267326732675`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.10219999999999985`, 0.]}, {
           0., -0.10219999999999985`}]]}, 
        {RGBColor[
          NCache[
           Rational[69, 101], 0.6831683168316832], 0, 
          NCache[
           Rational[32, 101], 0.31683168316831684`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.07519999999999977, 0.]}, {
           0., -0.07519999999999977}]]}, 
        {RGBColor[
          NCache[
           Rational[70, 101], 0.693069306930693], 0, 
          NCache[
           Rational[31, 101], 0.3069306930693069]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.04779999999999984, 0.]}, {
           0., -0.04779999999999984}]]}, 
        {RGBColor[
          NCache[
           Rational[71, 101], 0.7029702970297029], 0, 
          NCache[
           Rational[30, 101], 0.297029702970297]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.019999999999999907`, 0.]}, {
           0., -0.019999999999999907`}]]}, 
        {RGBColor[
          NCache[
           Rational[72, 101], 0.7128712871287128], 0, 
          NCache[
           Rational[29, 101], 0.2871287128712871]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.008199999999999985, 0.]}, {0., 
           0.008199999999999985}]]}, 
        {RGBColor[
          NCache[
           Rational[73, 101], 0.7227722772277227], 0, 
          NCache[
           Rational[28, 101], 0.27722772277227725`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.036799999999999944`, 0.]}, {0., 
           0.036799999999999944`}]]}, 
        {RGBColor[
          NCache[
           Rational[74, 101], 0.7326732673267327], 0, 
          NCache[
           Rational[27, 101], 0.26732673267326734`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.06579999999999986, 0.]}, {0., 
           0.06579999999999986}]]}, 
        {RGBColor[
          NCache[
           Rational[75, 101], 0.7425742574257426], 0, 
          NCache[
           Rational[26, 101], 0.25742574257425743`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.09519999999999995, 0.]}, {0., 
           0.09519999999999995}]]}, 
        {RGBColor[
          NCache[
           Rational[76, 101], 0.7524752475247525], 0, 
          NCache[
           Rational[25, 101], 0.24752475247524752`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.12499999999999994`, 0.]}, {0., 
           0.12499999999999994`}]]}, 
        {RGBColor[
          NCache[
           Rational[77, 101], 0.7623762376237624], 0, 
          NCache[
           Rational[24, 101], 0.2376237623762376]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.15519999999999995`, 0.]}, {0., 
           0.15519999999999995`}]]}, 
        {RGBColor[
          NCache[
           Rational[78, 101], 0.7722772277227723], 0, 
          NCache[
           Rational[23, 101], 0.22772277227722773`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.1857999999999999, 0.]}, {0., 
           0.1857999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[79, 101], 0.7821782178217822], 0, 
          NCache[
           Rational[22, 101], 0.21782178217821782`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.2168000000000001, 0.]}, {0., 
           0.2168000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[80, 101], 0.7920792079207921], 0, 
          NCache[
           Rational[21, 101], 0.2079207920792079]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.24820000000000014`, 0.]}, {0., 
           0.24820000000000014`}]]}, 
        {RGBColor[
          NCache[
           Rational[81, 101], 0.801980198019802], 0, 
          NCache[
           Rational[20, 101], 0.19801980198019803`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.2800000000000003, 0.]}, {0., 
           0.2800000000000003}]]}, 
        {RGBColor[
          NCache[
           Rational[82, 101], 0.8118811881188119], 0, 
          NCache[
           Rational[19, 101], 0.18811881188118812`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.3122000000000002, 0.]}, {0., 
           0.3122000000000002}]]}, 
        {RGBColor[
          NCache[
           Rational[83, 101], 0.8217821782178217], 0, 
          NCache[
           Rational[18, 101], 0.1782178217821782]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.3448000000000002, 0.]}, {0., 
           0.3448000000000002}]]}, 
        {RGBColor[
          NCache[
           Rational[84, 101], 0.8316831683168316], 0, 
          NCache[
           Rational[17, 101], 0.16831683168316833`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.3778000000000001, 0.]}, {0., 
           0.3778000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[85, 101], 0.8415841584158416], 0, 
          NCache[
           Rational[16, 101], 0.15841584158415842`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.4111999999999998, 0.]}, {0., 
           0.4111999999999998}]]}, 
        {RGBColor[
          NCache[
           Rational[86, 101], 0.8514851485148515], 0, 
          NCache[
           Rational[15, 101], 0.1485148514851485]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.44499999999999984`, 0.]}, {0., 
           0.44499999999999984`}]]}, 
        {RGBColor[
          NCache[
           Rational[87, 101], 0.8613861386138614], 0, 
          NCache[
           Rational[14, 101], 0.13861386138613863`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.4791999999999999, 0.]}, {0., 
           0.4791999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[88, 101], 0.8712871287128713], 0, 
          NCache[
           Rational[13, 101], 0.12871287128712872`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.5138, 0.]}, {0., 0.5138}]]}, 
        {RGBColor[
          NCache[
           Rational[89, 101], 0.8811881188118812], 0, 
          NCache[
           Rational[12, 101], 0.1188118811881188]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.5488, 0.]}, {0., 0.5488}]]}, 
        {RGBColor[
          NCache[
           Rational[90, 101], 0.8910891089108911], 0, 
          NCache[
           Rational[11, 101], 0.10891089108910891`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.5842, 0.]}, {0., 0.5842}]]}, 
        {RGBColor[
          NCache[
           Rational[91, 101], 0.900990099009901], 0, 
          NCache[
           Rational[10, 101], 0.09900990099009901]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.6200000000000001, 0.]}, {0., 
           0.6200000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[92, 101], 0.9108910891089109], 0, 
          NCache[
           Rational[9, 101], 0.0891089108910891]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.6562000000000001, 0.]}, {0., 
           0.6562000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[93, 101], 0.9207920792079208], 0, 
          NCache[
           Rational[8, 101], 0.07920792079207921]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.6928000000000001, 0.]}, {0., 
           0.6928000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[94, 101], 0.9306930693069307], 0, 
          NCache[
           Rational[7, 101], 0.06930693069306931]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.7298000000000002, 0.]}, {0., 
           0.7298000000000002}]]}, 
        {RGBColor[
          NCache[
           Rational[95, 101], 0.9405940594059405], 0, 
          NCache[
           Rational[6, 101], 0.0594059405940594]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.7672000000000003, 0.]}, {0., 
           0.7672000000000003}]]}, 
        {RGBColor[
          NCache[
           Rational[96, 101], 0.9504950495049505], 0, 
          NCache[
           Rational[5, 101], 0.04950495049504951]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.8050000000000002, 0.]}, {0., 
           0.8050000000000002}]]}, 
        {RGBColor[
          NCache[
           Rational[97, 101], 0.9603960396039604], 0, 
          NCache[
           Rational[4, 101], 0.039603960396039604`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.8432, 0.]}, {0., 0.8432}]]}, 
        {RGBColor[
          NCache[
           Rational[98, 101], 0.9702970297029703], 0, 
          NCache[
           Rational[3, 101], 0.0297029702970297]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.8817999999999999, 0.]}, {0., 
           0.8817999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[99, 101], 0.9801980198019802], 0, 
          NCache[
           Rational[2, 101], 0.019801980198019802`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.9207999999999998, 0.]}, {0., 
           0.9207999999999998}]]}, 
        {RGBColor[
          NCache[
           Rational[100, 101], 0.9900990099009901], 0, 
          NCache[
           Rational[1, 101], 0.009900990099009901]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[0.9601999999999999, 0.]}, {0., 
           0.9601999999999999}]]}, 
        {RGBColor[1, 0, 0], PointSize[0.02], 
         PointBox[NCache[{Complex[0., 0.], Complex[1., 0.]}, {0., 1.}]]}}}], {193.5, -189.},
      ImageScaled[{0.5, 0.5}], {360., 360.}], InsetBox[
     GraphicsBox[{{CircleBox[{0, 0}], LineBox[{{1, 0}, {-1, 0}}], 
        LineBox[{{0, 1}, {0, -1}}], InsetBox[
         StyleBox["\<\"|+Y\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {1.15, 0}], InsetBox[
         StyleBox["\<\"|-Y\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {-1.15, 0}], InsetBox[
         StyleBox["\<\"|+Z\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {0, 1.15}], InsetBox[
         StyleBox["\<\"|-Z\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {0, -1.15}]}, {
        {RGBColor[
          NCache[
           Rational[1, 101], 0.009900990099009901], 0, 
          NCache[
           Rational[100, 101], 0.9900990099009901]], PointSize[0.02], 
         PointBox[NCache[{Complex[0., 0.], Complex[-1., 0.]}, {0., -1.}]]}, 
        {RGBColor[
          NCache[
           Rational[2, 101], 0.019801980198019802`], 0, 
          NCache[
           Rational[99, 101], 0.9801980198019802]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.019998999974998752`, 0.], 
            Complex[-0.9998, 0.]}, {-0.019998999974998752`, -0.9998}]]}, 
        {RGBColor[
          NCache[
           Rational[3, 101], 0.0297029702970297], 0, 
          NCache[
           Rational[98, 101], 0.9702970297029703]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.039991999199839964`, 0.], 
            Complex[-0.9992000000000001, 
             0.]}, {-0.039991999199839964`, -0.9992000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[4, 101], 0.039603960396039604`], 0, 
          NCache[
           Rational[97, 101], 0.9603960396039604]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.059972993922264704`, 0.], 
            Complex[-0.9981999999999999, 
             0.]}, {-0.059972993922264704`, -0.9981999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[5, 101], 0.04950495049504951], 0, 
          NCache[
           Rational[96, 101], 0.9504950495049505]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.0799359743794995, 0.], 
            Complex[-0.9967999999999999, 
             0.]}, {-0.0799359743794995, -0.9967999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[6, 101], 0.0594059405940594], 0, 
          NCache[
           Rational[95, 101], 0.9405940594059405]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.0998749217771909, 0.], 
            Complex[-0.9950000000000001, 
             0.]}, {-0.0998749217771909, -0.9950000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[7, 101], 0.06930693069306931], 0, 
          NCache[
           Rational[94, 101], 0.9306930693069307]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.11978380524929069`, 0.], 
            Complex[-0.9928, 0.]}, {-0.11978380524929069`, -0.9928}]]}, 
        {RGBColor[
          NCache[
           Rational[8, 101], 0.07920792079207921], 0, 
          NCache[
           Rational[93, 101], 0.9207920792079208]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.13965657879240778`, 0.], 
            Complex[-0.9902, 0.]}, {-0.13965657879240778`, -0.9902}]]}, 
        {RGBColor[
          NCache[
           Rational[9, 101], 0.0891089108910891], 0, 
          NCache[
           Rational[92, 101], 0.9108910891089109]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.15948717816802704`, 0.], 
            Complex[-0.9872000000000001, 
             0.]}, {-0.15948717816802704`, -0.9872000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[10, 101], 0.09900990099009901], 0, 
          NCache[
           Rational[91, 101], 0.900990099009901]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.17926951776584885`, 0.], 
            Complex[-0.9838, 0.]}, {-0.17926951776584885`, -0.9838}]]}, 
        {RGBColor[
          NCache[
           Rational[11, 101], 0.10891089108910891`], 0, 
          NCache[
           Rational[90, 101], 0.8910891089108911]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.198997487421324, 0.], 
            Complex[-0.98, 0.]}, {-0.198997487421324, -0.98}]]}, 
        {RGBColor[
          NCache[
           Rational[12, 101], 0.1188118811881188], 0, 
          NCache[
           Rational[89, 101], 0.8811881188118812]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.21866494918024698`, 0.], 
            Complex[-0.9757999999999999, 
             0.]}, {-0.21866494918024698`, -0.9757999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[13, 101], 0.12871287128712872`], 0, 
          NCache[
           Rational[88, 101], 0.8712871287128713]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.23826573400302445`, 0.], 
            Complex[-0.9712000000000001, 
             0.]}, {-0.23826573400302445`, -0.9712000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[14, 101], 0.13861386138613863`], 0, 
          NCache[
           Rational[87, 101], 0.8613861386138614]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.2577936384009505, 0.], 
            Complex[-0.9662, 0.]}, {-0.2577936384009505, -0.9662}]]}, 
        {RGBColor[
          NCache[
           Rational[15, 101], 0.1485148514851485], 0, 
          NCache[
           Rational[86, 101], 0.8514851485148515]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.27724242099649904`, 0.], 
            Complex[-0.9608000000000001, 
             0.]}, {-0.27724242099649904`, -0.9608000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[16, 101], 0.15841584158415842`], 0, 
          NCache[
           Rational[85, 101], 0.8415841584158416]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.29660579899927786`, 0.], 
            Complex[-0.9550000000000002, 
             0.]}, {-0.29660579899927786`, -0.9550000000000002}]]}, 
        {RGBColor[
          NCache[
           Rational[17, 101], 0.16831683168316833`], 0, 
          NCache[
           Rational[84, 101], 0.8316831683168316]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.3158774445888785, 0.], 
            Complex[-0.9488000000000002, 
             0.]}, {-0.3158774445888785, -0.9488000000000002}]]}, 
        {RGBColor[
          NCache[
           Rational[18, 101], 0.1782178217821782], 0, 
          NCache[
           Rational[83, 101], 0.8217821782178217]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.3350509811953996, 0.], 
            Complex[-0.9421999999999999, 
             0.]}, {-0.3350509811953996, -0.9421999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[19, 101], 0.18811881188118812`], 0, 
          NCache[
           Rational[82, 101], 0.8118811881188119]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.3541199796679086, 0.], 
            Complex[-0.9352, 0.]}, {-0.3541199796679086, -0.9352}]]}, 
        {RGBColor[
          NCache[
           Rational[20, 101], 0.19801980198019803`], 0, 
          NCache[
           Rational[81, 101], 0.801980198019802]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.3730779543205414, 0.], 
            Complex[-0.9277999999999998, 
             0.]}, {-0.3730779543205414, -0.9277999999999998}]]}, 
        {RGBColor[
          NCache[
           Rational[21, 101], 0.2079207920792079], 0, 
          NCache[
           Rational[80, 101], 0.7920792079207921]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.3919183588453085, 0.], 
            Complex[-0.9199999999999999, 
             0.]}, {-0.3919183588453085, -0.9199999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[22, 101], 0.21782178217821782`], 0, 
          NCache[
           Rational[79, 101], 0.7821782178217822]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.4106345820799802, 0.], 
            Complex[-0.9117999999999999, 
             0.]}, {-0.4106345820799802, -0.9117999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[23, 101], 0.22772277227722773`], 0, 
          NCache[
           Rational[78, 101], 0.7722772277227723]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.4292199436186534, 0.], 
            Complex[-0.9031999999999999, 
             0.]}, {-0.4292199436186534, -0.9031999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[24, 101], 0.2376237623762376], 0, 
          NCache[
           Rational[77, 101], 0.7623762376237624]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.44766768925174844`, 0.], 
            Complex[-0.8942000000000001, 
             0.]}, {-0.44766768925174844`, -0.8942000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[25, 101], 0.24752475247524752`], 0, 
          NCache[
           Rational[76, 101], 0.7524752475247525]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.46597098622124533`, 0.], 
            Complex[-0.8848, 0.]}, {-0.46597098622124533`, -0.8848}]]}, 
        {RGBColor[
          NCache[
           Rational[26, 101], 0.25742574257425743`], 0, 
          NCache[
           Rational[75, 101], 0.7425742574257426]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.4841229182759271, 0.], 
            Complex[-0.8750000000000001, 
             0.]}, {-0.4841229182759271, -0.8750000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[27, 101], 0.26732673267326734`], 0, 
          NCache[
           Rational[74, 101], 0.7326732673267327]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.5021164805102498, 0.], 
            Complex[-0.8648000000000001, 
             0.]}, {-0.5021164805102498, -0.8648000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[28, 101], 0.27722772277227725`], 0, 
          NCache[
           Rational[73, 101], 0.7227722772277227]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.5199445739691877, 0.], 
            Complex[-0.8542000000000001, 
             0.]}, {-0.5199445739691877, -0.8542000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[29, 101], 0.2871287128712871], 0, 
          NCache[
           Rational[72, 101], 0.7128712871287128]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.5376000000000001, 0.], 
            Complex[-0.8432, 0.]}, {-0.5376000000000001, -0.8432}]]}, 
        {RGBColor[
          NCache[
           Rational[30, 101], 0.297029702970297], 0, 
          NCache[
           Rational[71, 101], 0.7029702970297029]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.5550754543303099, 0.], 
            Complex[-0.8318000000000001, 
             0.]}, {-0.5550754543303099, -0.8318000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[31, 101], 0.3069306930693069], 0, 
          NCache[
           Rational[70, 101], 0.693069306930693]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.5723635208501674, 0.], 
            Complex[-0.8200000000000001, 
             0.]}, {-0.5723635208501674, -0.8200000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[32, 101], 0.31683168316831684`], 0, 
          NCache[
           Rational[69, 101], 0.6831683168316832]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.5894566650738627, 0.], 
            Complex[-0.8078000000000001, 
             0.]}, {-0.5894566650738627, -0.8078000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[33, 101], 0.32673267326732675`], 0, 
          NCache[
           Rational[68, 101], 0.6732673267326733]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.606347227255143, 0.], 
            Complex[-0.7951999999999998, 
             0.]}, {-0.606347227255143, -0.7951999999999998}]]}, 
        {RGBColor[
          NCache[
           Rational[34, 101], 0.33663366336633666`], 0, 
          NCache[
           Rational[67, 101], 0.6633663366336634]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.6230274151271356, 0.], 
            Complex[-0.7822, 0.]}, {-0.6230274151271356, -0.7822}]]}, 
        {RGBColor[
          NCache[
           Rational[35, 101], 0.3465346534653465], 0, 
          NCache[
           Rational[66, 101], 0.6534653465346535]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.639489296235676, 0.], 
            Complex[-0.7687999999999999, 
             0.]}, {-0.639489296235676, -0.7687999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[36, 101], 0.3564356435643564], 0, 
          NCache[
           Rational[65, 101], 0.6435643564356436]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.6557247898318319, 0.], 
            Complex[-0.755, 0.]}, {-0.6557247898318319, -0.755}]]}, 
        {RGBColor[
          NCache[
           Rational[37, 101], 0.36633663366336633`], 0, 
          NCache[
           Rational[64, 101], 0.6336633663366337]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.6717256582861786, 0.], 
            Complex[-0.7408000000000001, 
             0.]}, {-0.6717256582861786, -0.7408000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[38, 101], 0.37623762376237624`], 0, 
          NCache[
           Rational[63, 101], 0.6237623762376238]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.6874834979837698, 0.], 
            Complex[-0.7262, 0.]}, {-0.6874834979837698, -0.7262}]]}, 
        {RGBColor[
          NCache[
           Rational[39, 101], 0.38613861386138615`], 0, 
          NCache[
           Rational[62, 101], 0.6138613861386139]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.7029897296547084, 0.], 
            Complex[-0.7112000000000002, 
             0.]}, {-0.7029897296547084, -0.7112000000000002}]]}, 
        {RGBColor[
          NCache[
           Rational[40, 101], 0.39603960396039606`], 0, 
          NCache[
           Rational[61, 101], 0.6039603960396039]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.7182355880907044, 0.], 
            Complex[-0.6957999999999999, 
             0.]}, {-0.7182355880907044, -0.6957999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[41, 101], 0.40594059405940597`], 0, 
          NCache[
           Rational[60, 101], 0.594059405940594]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.7332121111929344, 0.], 
            Complex[-0.6799999999999999, 
             0.]}, {-0.7332121111929344, -0.6799999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[42, 101], 0.4158415841584158], 0, 
          NCache[
           Rational[59, 101], 0.5841584158415841]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.7479101282908261, 0.], 
            Complex[-0.6637999999999998, 
             0.]}, {-0.7479101282908261, -0.6637999999999998}]]}, 
        {RGBColor[
          NCache[
           Rational[43, 101], 0.42574257425742573`], 0, 
          NCache[
           Rational[58, 101], 0.5742574257425742]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.7623202476649823, 0.], 
            Complex[-0.6472, 0.]}, {-0.7623202476649823, -0.6472}]]}, 
        {RGBColor[
          NCache[
           Rational[44, 101], 0.43564356435643564`], 0, 
          NCache[
           Rational[57, 101], 0.5643564356435643]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.7764328432002345, 0.], 
            Complex[-0.6302000000000001, 
             0.]}, {-0.7764328432002345, -0.6302000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[45, 101], 0.44554455445544555`], 0, 
          NCache[
           Rational[56, 101], 0.5544554455445545]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.7902380400866564, 0.], 
            Complex[-0.6127999999999999, 
             0.]}, {-0.7902380400866564, -0.6127999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[46, 101], 0.45544554455445546`], 0, 
          NCache[
           Rational[55, 101], 0.5445544554455446]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.8037256994771288, 0.], 
            Complex[-0.595, 0.]}, {-0.8037256994771288, -0.595}]]}, 
        {RGBColor[
          NCache[
           Rational[47, 101], 0.46534653465346537`], 0, 
          NCache[
           Rational[54, 101], 0.5346534653465347]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.8168854019995706, 0.], 
            Complex[-0.5768000000000001, 
             0.]}, {-0.8168854019995706, -0.5768000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[48, 101], 0.4752475247524752], 0, 
          NCache[
           Rational[53, 101], 0.5247524752475248]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.8297064300100367, 0.], 
            Complex[-0.5581999999999998, 
             0.]}, {-0.8297064300100367, -0.5581999999999998}]]}, 
        {RGBColor[
          NCache[
           Rational[49, 101], 0.48514851485148514`], 0, 
          NCache[
           Rational[52, 101], 0.5148514851485149]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.8421777484593143, 0.], 
            Complex[-0.5392000000000001, 
             0.]}, {-0.8421777484593143, -0.5392000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[50, 101], 0.49504950495049505`], 0, 
          NCache[
           Rational[51, 101], 0.504950495049505]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.8542879842301424, 0.], 
            Complex[-0.5198, 0.]}, {-0.8542879842301424, -0.5198}]]}, 
        {RGBColor[
          NCache[
           Rational[51, 101], 0.504950495049505], 0, 
          NCache[
           Rational[50, 101], 0.49504950495049505`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.8660254037844386, 0.], 
            Complex[-0.4999999999999999, 
             0.]}, {-0.8660254037844386, -0.4999999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[52, 101], 0.5148514851485149], 0, 
          NCache[
           Rational[49, 101], 0.48514851485148514`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.8773778889395378, 0.], 
            Complex[-0.4798, 0.]}, {-0.8773778889395378, -0.4798}]]}, 
        {RGBColor[
          NCache[
           Rational[53, 101], 0.5247524752475248], 0, 
          NCache[
           Rational[48, 101], 0.4752475247524752]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.8883329105690052, 0.], 
            Complex[-0.4592000000000001, 
             0.]}, {-0.8883329105690052, -0.4592000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[54, 101], 0.5346534653465347], 0, 
          NCache[
           Rational[47, 101], 0.46534653465346537`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.8988774999965234, 0.], 
            Complex[-0.4381999999999999, 
             0.]}, {-0.8988774999965234, -0.4381999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[55, 101], 0.5445544554455446], 0, 
          NCache[
           Rational[46, 101], 0.45544554455445546`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9089982178200351, 0.], 
            Complex[-0.4167999999999999, 
             0.]}, {-0.9089982178200351, -0.4167999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[56, 101], 0.5544554455445545], 0, 
          NCache[
           Rational[45, 101], 0.44554455445544555`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9186811198669537, 0.], 
            Complex[-0.39499999999999996`, 
             0.]}, {-0.9186811198669537, -0.39499999999999996`}]]}, 
        {RGBColor[
          NCache[
           Rational[57, 101], 0.5643564356435643], 0, 
          NCache[
           Rational[44, 101], 0.43564356435643564`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9279117199389174, 0.], 
            Complex[-0.37279999999999974`, 
             0.]}, {-0.9279117199389174, -0.37279999999999974`}]]}, 
        {RGBColor[
          NCache[
           Rational[58, 101], 0.5742574257425742], 0, 
          NCache[
           Rational[43, 101], 0.42574257425742573`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9366749489550791, 0.], 
            Complex[-0.35019999999999984`, 
             0.]}, {-0.9366749489550791, -0.35019999999999984`}]]}, 
        {RGBColor[
          NCache[
           Rational[59, 101], 0.5841584158415841], 0, 
          NCache[
           Rational[42, 101], 0.4158415841584158]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9449551100449163, 0.], 
            Complex[-0.3272000000000001, 
             0.]}, {-0.9449551100449163, -0.3272000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[60, 101], 0.594059405940594], 0, 
          NCache[
           Rational[41, 101], 0.40594059405940597`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9527358290733061, 0.], 
            Complex[-0.3038000000000002, 
             0.]}, {-0.9527358290733061, -0.3038000000000002}]]}, 
        {RGBColor[
          NCache[
           Rational[61, 101], 0.6039603960396039], 0, 
          NCache[
           Rational[40, 101], 0.39603960396039606`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.96, 0.], 
            Complex[-0.28000000000000014`, 
             0.]}, {-0.96, -0.28000000000000014`}]]}, 
        {RGBColor[
          NCache[
           Rational[62, 101], 0.6138613861386139], 0, 
          NCache[
           Rational[39, 101], 0.38613861386138615`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9667297243800874, 0.], 
            Complex[-0.2557999999999999, 
             0.]}, {-0.9667297243800874, -0.2557999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[63, 101], 0.6237623762376238], 0, 
          NCache[
           Rational[38, 101], 0.37623762376237624`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9729062441982783, 0.], 
            Complex[-0.2311999999999999, 
             0.]}, {-0.9729062441982783, -0.2311999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[64, 101], 0.6336633663366337], 0, 
          NCache[
           Rational[37, 101], 0.36633663366336633`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9785098670938377, 0.], 
            Complex[-0.20619999999999994`, 
             0.]}, {-0.9785098670938377, -0.20619999999999994`}]]}, 
        {RGBColor[
          NCache[
           Rational[65, 101], 0.6435643564356436], 0, 
          NCache[
           Rational[36, 101], 0.3564356435643564]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9835198828696856, 0.], 
            Complex[-0.18080000000000002`, 
             0.]}, {-0.9835198828696856, -0.18080000000000002`}]]}, 
        {RGBColor[
          NCache[
           Rational[66, 101], 0.6534653465346535], 0, 
          NCache[
           Rational[35, 101], 0.3465346534653465]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9879144699820931, 0.], 
            Complex[-0.15499999999999986`, 
             0.]}, {-0.9879144699820931, -0.15499999999999986`}]]}, 
        {RGBColor[
          NCache[
           Rational[67, 101], 0.6633663366336634], 0, 
          NCache[
           Rational[34, 101], 0.33663366336633666`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9916705904684278, 0.], 
            Complex[-0.12880000000000008`, 
             0.]}, {-0.9916705904684278, -0.12880000000000008`}]]}, 
        {RGBColor[
          NCache[
           Rational[68, 101], 0.6732673267326733], 0, 
          NCache[
           Rational[33, 101], 0.32673267326732675`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9947638714790561, 0.], 
            Complex[-0.10219999999999985`, 
             0.]}, {-0.9947638714790561, -0.10219999999999985`}]]}, 
        {RGBColor[
          NCache[
           Rational[69, 101], 0.6831683168316832], 0, 
          NCache[
           Rational[32, 101], 0.31683168316831684`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9971684712223907, 0.], 
            Complex[-0.07519999999999977, 
             0.]}, {-0.9971684712223907, -0.07519999999999977}]]}, 
        {RGBColor[
          NCache[
           Rational[70, 101], 0.693069306930693], 0, 
          NCache[
           Rational[31, 101], 0.3069306930693069]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9988569266917059, 0.], 
            Complex[-0.04779999999999984, 
             0.]}, {-0.9988569266917059, -0.04779999999999984}]]}, 
        {RGBColor[
          NCache[
           Rational[71, 101], 0.7029702970297029], 0, 
          NCache[
           Rational[30, 101], 0.297029702970297]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.999799979995999, 0.], 
            Complex[-0.019999999999999907`, 
             0.]}, {-0.999799979995999, -0.019999999999999907`}]]}, 
        {RGBColor[
          NCache[
           Rational[72, 101], 0.7128712871287128], 0, 
          NCache[
           Rational[29, 101], 0.2871287128712871]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9999663794348288, 0.], Complex[
            0.008199999999999985, 0.]}, {-0.9999663794348288, 
           0.008199999999999985}]]}, 
        {RGBColor[
          NCache[
           Rational[73, 101], 0.7227722772277227], 0, 
          NCache[
           Rational[28, 101], 0.27722772277227725`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9993226505988944, 0.], Complex[
            0.036799999999999944`, 0.]}, {-0.9993226505988944, 
           0.036799999999999944`}]]}, 
        {RGBColor[
          NCache[
           Rational[74, 101], 0.7326732673267327], 0, 
          NCache[
           Rational[27, 101], 0.26732673267326734`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9978328316907598, 0.], Complex[
            0.06579999999999986, 0.]}, {-0.9978328316907598, 
           0.06579999999999986}]]}, 
        {RGBColor[
          NCache[
           Rational[75, 101], 0.7425742574257426], 0, 
          NCache[
           Rational[26, 101], 0.25742574257425743`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.995458165871374, 0.], Complex[
            0.09519999999999995, 0.]}, {-0.995458165871374, 
           0.09519999999999995}]]}, 
        {RGBColor[
          NCache[
           Rational[76, 101], 0.7524752475247525], 0, 
          NCache[
           Rational[25, 101], 0.24752475247524752`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9921567416492215, 0.], Complex[
            0.12499999999999994`, 0.]}, {-0.9921567416492215, 
           0.12499999999999994`}]]}, 
        {RGBColor[
          NCache[
           Rational[77, 101], 0.7623762376237624], 0, 
          NCache[
           Rational[24, 101], 0.2376237623762376]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9878830700037329, 0.], Complex[
            0.15519999999999995`, 0.]}, {-0.9878830700037329, 
           0.15519999999999995`}]]}, 
        {RGBColor[
          NCache[
           Rational[78, 101], 0.7722772277227723], 0, 
          NCache[
           Rational[23, 101], 0.22772277227722773`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9825875838824751, 0.], Complex[
            0.1857999999999999, 0.]}, {-0.9825875838824751, 
           0.1857999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[79, 101], 0.7821782178217822], 0, 
          NCache[
           Rational[22, 101], 0.21782178217821782`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9762160416629098, 0.], Complex[
            0.2168000000000001, 0.]}, {-0.9762160416629098, 
           0.2168000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[80, 101], 0.7920792079207921], 0, 
          NCache[
           Rational[21, 101], 0.2079207920792079]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9687088107372617, 0.], Complex[
            0.24820000000000014`, 0.]}, {-0.9687088107372617, 
           0.24820000000000014`}]]}, 
        {RGBColor[
          NCache[
           Rational[81, 101], 0.801980198019802], 0, 
          NCache[
           Rational[20, 101], 0.19801980198019803`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9599999999999999, 0.], Complex[
            0.2800000000000003, 0.]}, {-0.9599999999999999, 
           0.2800000000000003}]]}, 
        {RGBColor[
          NCache[
           Rational[82, 101], 0.8118811881188119], 0, 
          NCache[
           Rational[19, 101], 0.18811881188118812`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9500163998584444, 0.], Complex[
            0.3122000000000002, 0.]}, {-0.9500163998584444, 
           0.3122000000000002}]]}, 
        {RGBColor[
          NCache[
           Rational[83, 101], 0.8217821782178217], 0, 
          NCache[
           Rational[18, 101], 0.1782178217821782]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9386761741942744, 0.], Complex[
            0.3448000000000002, 0.]}, {-0.9386761741942744, 
           0.3448000000000002}]]}, 
        {RGBColor[
          NCache[
           Rational[84, 101], 0.8316831683168316], 0, 
          NCache[
           Rational[17, 101], 0.16831683168316833`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9258872285543203, 0.], Complex[
            0.3778000000000001, 0.]}, {-0.9258872285543203, 
           0.3778000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[85, 101], 0.8415841584158416], 0, 
          NCache[
           Rational[16, 101], 0.15841584158415842`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.9115451497320362, 0.], Complex[
            0.4111999999999998, 0.]}, {-0.9115451497320362, 
           0.4111999999999998}]]}, 
        {RGBColor[
          NCache[
           Rational[86, 101], 0.8514851485148515], 0, 
          NCache[
           Rational[15, 101], 0.1485148514851485]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.895530568992483, 0.], Complex[
            0.44499999999999984`, 0.]}, {-0.895530568992483, 
           0.44499999999999984`}]]}, 
        {RGBColor[
          NCache[
           Rational[87, 101], 0.8613861386138614], 0, 
          NCache[
           Rational[14, 101], 0.13861386138613863`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.8777057365655075, 0.], Complex[
            0.4791999999999999, 0.]}, {-0.8777057365655075, 
           0.4791999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[88, 101], 0.8712871287128713], 0, 
          NCache[
           Rational[13, 101], 0.12871287128712872`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.8579099952792251, 0.], Complex[
            0.5138, 0.]}, {-0.8579099952792251, 0.5138}]]}, 
        {RGBColor[
          NCache[
           Rational[89, 101], 0.8811881188118812], 0, 
          NCache[
           Rational[12, 101], 0.1188118811881188]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.8359536829274694, 0.], Complex[
            0.5488, 0.]}, {-0.8359536829274694, 0.5488}]]}, 
        {RGBColor[
          NCache[
           Rational[90, 101], 0.8910891089108911], 0, 
          NCache[
           Rational[11, 101], 0.10891089108910891`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.8116097338006734, 0.], Complex[
            0.5842, 0.]}, {-0.8116097338006734, 0.5842}]]}, 
        {RGBColor[
          NCache[
           Rational[91, 101], 0.900990099009901], 0, 
          NCache[
           Rational[10, 101], 0.09900990099009901]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.7846018098373211, 0.], Complex[
            0.6200000000000001, 0.]}, {-0.7846018098373211, 
           0.6200000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[92, 101], 0.9108910891089109], 0, 
          NCache[
           Rational[9, 101], 0.0891089108910891]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.7545870128752548, 0.], Complex[
            0.6562000000000001, 0.]}, {-0.7545870128752548, 
           0.6562000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[93, 101], 0.9207920792079208], 0, 
          NCache[
           Rational[8, 101], 0.07920792079207921]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.7211297802753676, 0.], Complex[
            0.6928000000000001, 0.]}, {-0.7211297802753676, 
           0.6928000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[94, 101], 0.9306930693069307], 0, 
          NCache[
           Rational[7, 101], 0.06930693069306931]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.6836607053209944, 0.], Complex[
            0.7298000000000002, 0.]}, {-0.6836607053209944, 
           0.7298000000000002}]]}, 
        {RGBColor[
          NCache[
           Rational[95, 101], 0.9405940594059405], 0, 
          NCache[
           Rational[6, 101], 0.0594059405940594]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.641407951307122, 0.], Complex[
            0.7672000000000003, 0.]}, {-0.641407951307122, 
           0.7672000000000003}]]}, 
        {RGBColor[
          NCache[
           Rational[96, 101], 0.9504950495049505], 0, 
          NCache[
           Rational[5, 101], 0.04950495049504951]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.5932748098478476, 0.], Complex[
            0.8050000000000002, 0.]}, {-0.5932748098478476, 
           0.8050000000000002}]]}, 
        {RGBColor[
          NCache[
           Rational[97, 101], 0.9603960396039604], 0, 
          NCache[
           Rational[4, 101], 0.039603960396039604`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.5376000000000001, 0.], Complex[
            0.8432, 0.]}, {-0.5376000000000001, 0.8432}]]}, 
        {RGBColor[
          NCache[
           Rational[98, 101], 0.9702970297029703], 0, 
          NCache[
           Rational[3, 101], 0.0297029702970297]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.47162353630835696`, 0.], Complex[
            0.8817999999999999, 0.]}, {-0.47162353630835696`, 
           0.8817999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[99, 101], 0.9801980198019802], 0, 
          NCache[
           Rational[2, 101], 0.019801980198019802`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.3900350753457954, 0.], Complex[
            0.9207999999999998, 0.]}, {-0.3900350753457954, 
           0.9207999999999998}]]}, 
        {RGBColor[
          NCache[
           Rational[100, 101], 0.9900990099009901], 0, 
          NCache[
           Rational[1, 101], 0.009900990099009901]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[-0.2793133723973847, 0.], Complex[
            0.9601999999999999, 0.]}, {-0.2793133723973847, 
           0.9601999999999999}]]}, 
        {RGBColor[1, 0, 0], PointSize[0.02], 
         PointBox[NCache[{Complex[0., 0.], Complex[1., 0.]}, {0., 1.}]]}}}], {580.5, -189.},
      ImageScaled[{0.5, 0.5}], {360., 360.}], InsetBox[
     GraphicsBox[{{CircleBox[{0, 0}], LineBox[{{1, 0}, {-1, 0}}], 
        LineBox[{{0, 1}, {0, -1}}], InsetBox[
         StyleBox["\<\"|+X\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {1.15, 0}], InsetBox[
         StyleBox["\<\"|-X\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {-1.15, 0}], InsetBox[
         StyleBox["\<\"|+Y\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {0, 1.15}], InsetBox[
         StyleBox["\<\"|-Y\[RightAngleBracket]\"\>",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold], {0, -1.15}]}, {
        {RGBColor[
          NCache[
           Rational[1, 101], 0.009900990099009901], 0, 
          NCache[
           Rational[100, 101], 0.9900990099009901]], PointSize[0.02], 
         PointBox[NCache[{Complex[0., 0.], Complex[0., 0.]}, {0., 0.}]]}, 
        {RGBColor[
          NCache[
           Rational[2, 101], 0.019801980198019802`], 0, 
          NCache[
           Rational[99, 101], 0.9801980198019802]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.019998999974998752`, 0.]}, {
           0., -0.019998999974998752`}]]}, 
        {RGBColor[
          NCache[
           Rational[3, 101], 0.0297029702970297], 0, 
          NCache[
           Rational[98, 101], 0.9702970297029703]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.039991999199839964`, 0.]}, {
           0., -0.039991999199839964`}]]}, 
        {RGBColor[
          NCache[
           Rational[4, 101], 0.039603960396039604`], 0, 
          NCache[
           Rational[97, 101], 0.9603960396039604]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.059972993922264704`, 0.]}, {
           0., -0.059972993922264704`}]]}, 
        {RGBColor[
          NCache[
           Rational[5, 101], 0.04950495049504951], 0, 
          NCache[
           Rational[96, 101], 0.9504950495049505]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.0799359743794995, 0.]}, {
           0., -0.0799359743794995}]]}, 
        {RGBColor[
          NCache[
           Rational[6, 101], 0.0594059405940594], 0, 
          NCache[
           Rational[95, 101], 0.9405940594059405]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.0998749217771909, 0.]}, {
           0., -0.0998749217771909}]]}, 
        {RGBColor[
          NCache[
           Rational[7, 101], 0.06930693069306931], 0, 
          NCache[
           Rational[94, 101], 0.9306930693069307]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.11978380524929069`, 0.]}, {
           0., -0.11978380524929069`}]]}, 
        {RGBColor[
          NCache[
           Rational[8, 101], 0.07920792079207921], 0, 
          NCache[
           Rational[93, 101], 0.9207920792079208]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.13965657879240778`, 0.]}, {
           0., -0.13965657879240778`}]]}, 
        {RGBColor[
          NCache[
           Rational[9, 101], 0.0891089108910891], 0, 
          NCache[
           Rational[92, 101], 0.9108910891089109]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.15948717816802704`, 0.]}, {
           0., -0.15948717816802704`}]]}, 
        {RGBColor[
          NCache[
           Rational[10, 101], 0.09900990099009901], 0, 
          NCache[
           Rational[91, 101], 0.900990099009901]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.17926951776584885`, 0.]}, {
           0., -0.17926951776584885`}]]}, 
        {RGBColor[
          NCache[
           Rational[11, 101], 0.10891089108910891`], 0, 
          NCache[
           Rational[90, 101], 0.8910891089108911]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.198997487421324, 0.]}, {
           0., -0.198997487421324}]]}, 
        {RGBColor[
          NCache[
           Rational[12, 101], 0.1188118811881188], 0, 
          NCache[
           Rational[89, 101], 0.8811881188118812]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.21866494918024698`, 0.]}, {
           0., -0.21866494918024698`}]]}, 
        {RGBColor[
          NCache[
           Rational[13, 101], 0.12871287128712872`], 0, 
          NCache[
           Rational[88, 101], 0.8712871287128713]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.23826573400302445`, 0.]}, {
           0., -0.23826573400302445`}]]}, 
        {RGBColor[
          NCache[
           Rational[14, 101], 0.13861386138613863`], 0, 
          NCache[
           Rational[87, 101], 0.8613861386138614]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.2577936384009505, 0.]}, {
           0., -0.2577936384009505}]]}, 
        {RGBColor[
          NCache[
           Rational[15, 101], 0.1485148514851485], 0, 
          NCache[
           Rational[86, 101], 0.8514851485148515]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.27724242099649904`, 0.]}, {
           0., -0.27724242099649904`}]]}, 
        {RGBColor[
          NCache[
           Rational[16, 101], 0.15841584158415842`], 0, 
          NCache[
           Rational[85, 101], 0.8415841584158416]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.29660579899927786`, 0.]}, {
           0., -0.29660579899927786`}]]}, 
        {RGBColor[
          NCache[
           Rational[17, 101], 0.16831683168316833`], 0, 
          NCache[
           Rational[84, 101], 0.8316831683168316]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.3158774445888785, 0.]}, {
           0., -0.3158774445888785}]]}, 
        {RGBColor[
          NCache[
           Rational[18, 101], 0.1782178217821782], 0, 
          NCache[
           Rational[83, 101], 0.8217821782178217]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.3350509811953996, 0.]}, {
           0., -0.3350509811953996}]]}, 
        {RGBColor[
          NCache[
           Rational[19, 101], 0.18811881188118812`], 0, 
          NCache[
           Rational[82, 101], 0.8118811881188119]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.3541199796679086, 0.]}, {
           0., -0.3541199796679086}]]}, 
        {RGBColor[
          NCache[
           Rational[20, 101], 0.19801980198019803`], 0, 
          NCache[
           Rational[81, 101], 0.801980198019802]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.3730779543205414, 0.]}, {
           0., -0.3730779543205414}]]}, 
        {RGBColor[
          NCache[
           Rational[21, 101], 0.2079207920792079], 0, 
          NCache[
           Rational[80, 101], 0.7920792079207921]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.3919183588453085, 0.]}, {
           0., -0.3919183588453085}]]}, 
        {RGBColor[
          NCache[
           Rational[22, 101], 0.21782178217821782`], 0, 
          NCache[
           Rational[79, 101], 0.7821782178217822]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.4106345820799802, 0.]}, {
           0., -0.4106345820799802}]]}, 
        {RGBColor[
          NCache[
           Rational[23, 101], 0.22772277227722773`], 0, 
          NCache[
           Rational[78, 101], 0.7722772277227723]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.4292199436186534, 0.]}, {
           0., -0.4292199436186534}]]}, 
        {RGBColor[
          NCache[
           Rational[24, 101], 0.2376237623762376], 0, 
          NCache[
           Rational[77, 101], 0.7623762376237624]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.44766768925174844`, 0.]}, {
           0., -0.44766768925174844`}]]}, 
        {RGBColor[
          NCache[
           Rational[25, 101], 0.24752475247524752`], 0, 
          NCache[
           Rational[76, 101], 0.7524752475247525]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.46597098622124533`, 0.]}, {
           0., -0.46597098622124533`}]]}, 
        {RGBColor[
          NCache[
           Rational[26, 101], 0.25742574257425743`], 0, 
          NCache[
           Rational[75, 101], 0.7425742574257426]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.4841229182759271, 0.]}, {
           0., -0.4841229182759271}]]}, 
        {RGBColor[
          NCache[
           Rational[27, 101], 0.26732673267326734`], 0, 
          NCache[
           Rational[74, 101], 0.7326732673267327]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.5021164805102498, 0.]}, {
           0., -0.5021164805102498}]]}, 
        {RGBColor[
          NCache[
           Rational[28, 101], 0.27722772277227725`], 0, 
          NCache[
           Rational[73, 101], 0.7227722772277227]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.5199445739691877, 0.]}, {
           0., -0.5199445739691877}]]}, 
        {RGBColor[
          NCache[
           Rational[29, 101], 0.2871287128712871], 0, 
          NCache[
           Rational[72, 101], 0.7128712871287128]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.5376000000000001, 0.]}, {
           0., -0.5376000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[30, 101], 0.297029702970297], 0, 
          NCache[
           Rational[71, 101], 0.7029702970297029]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.5550754543303099, 0.]}, {
           0., -0.5550754543303099}]]}, 
        {RGBColor[
          NCache[
           Rational[31, 101], 0.3069306930693069], 0, 
          NCache[
           Rational[70, 101], 0.693069306930693]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.5723635208501674, 0.]}, {
           0., -0.5723635208501674}]]}, 
        {RGBColor[
          NCache[
           Rational[32, 101], 0.31683168316831684`], 0, 
          NCache[
           Rational[69, 101], 0.6831683168316832]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.5894566650738627, 0.]}, {
           0., -0.5894566650738627}]]}, 
        {RGBColor[
          NCache[
           Rational[33, 101], 0.32673267326732675`], 0, 
          NCache[
           Rational[68, 101], 0.6732673267326733]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.606347227255143, 0.]}, {
           0., -0.606347227255143}]]}, 
        {RGBColor[
          NCache[
           Rational[34, 101], 0.33663366336633666`], 0, 
          NCache[
           Rational[67, 101], 0.6633663366336634]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.6230274151271356, 0.]}, {
           0., -0.6230274151271356}]]}, 
        {RGBColor[
          NCache[
           Rational[35, 101], 0.3465346534653465], 0, 
          NCache[
           Rational[66, 101], 0.6534653465346535]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.639489296235676, 0.]}, {
           0., -0.639489296235676}]]}, 
        {RGBColor[
          NCache[
           Rational[36, 101], 0.3564356435643564], 0, 
          NCache[
           Rational[65, 101], 0.6435643564356436]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.6557247898318319, 0.]}, {
           0., -0.6557247898318319}]]}, 
        {RGBColor[
          NCache[
           Rational[37, 101], 0.36633663366336633`], 0, 
          NCache[
           Rational[64, 101], 0.6336633663366337]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.6717256582861786, 0.]}, {
           0., -0.6717256582861786}]]}, 
        {RGBColor[
          NCache[
           Rational[38, 101], 0.37623762376237624`], 0, 
          NCache[
           Rational[63, 101], 0.6237623762376238]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.6874834979837698, 0.]}, {
           0., -0.6874834979837698}]]}, 
        {RGBColor[
          NCache[
           Rational[39, 101], 0.38613861386138615`], 0, 
          NCache[
           Rational[62, 101], 0.6138613861386139]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.7029897296547084, 0.]}, {
           0., -0.7029897296547084}]]}, 
        {RGBColor[
          NCache[
           Rational[40, 101], 0.39603960396039606`], 0, 
          NCache[
           Rational[61, 101], 0.6039603960396039]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.7182355880907044, 0.]}, {
           0., -0.7182355880907044}]]}, 
        {RGBColor[
          NCache[
           Rational[41, 101], 0.40594059405940597`], 0, 
          NCache[
           Rational[60, 101], 0.594059405940594]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.7332121111929344, 0.]}, {
           0., -0.7332121111929344}]]}, 
        {RGBColor[
          NCache[
           Rational[42, 101], 0.4158415841584158], 0, 
          NCache[
           Rational[59, 101], 0.5841584158415841]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.7479101282908261, 0.]}, {
           0., -0.7479101282908261}]]}, 
        {RGBColor[
          NCache[
           Rational[43, 101], 0.42574257425742573`], 0, 
          NCache[
           Rational[58, 101], 0.5742574257425742]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.7623202476649823, 0.]}, {
           0., -0.7623202476649823}]]}, 
        {RGBColor[
          NCache[
           Rational[44, 101], 0.43564356435643564`], 0, 
          NCache[
           Rational[57, 101], 0.5643564356435643]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.7764328432002345, 0.]}, {
           0., -0.7764328432002345}]]}, 
        {RGBColor[
          NCache[
           Rational[45, 101], 0.44554455445544555`], 0, 
          NCache[
           Rational[56, 101], 0.5544554455445545]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.7902380400866564, 0.]}, {
           0., -0.7902380400866564}]]}, 
        {RGBColor[
          NCache[
           Rational[46, 101], 0.45544554455445546`], 0, 
          NCache[
           Rational[55, 101], 0.5445544554455446]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8037256994771288, 0.]}, {
           0., -0.8037256994771288}]]}, 
        {RGBColor[
          NCache[
           Rational[47, 101], 0.46534653465346537`], 0, 
          NCache[
           Rational[54, 101], 0.5346534653465347]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8168854019995706, 0.]}, {
           0., -0.8168854019995706}]]}, 
        {RGBColor[
          NCache[
           Rational[48, 101], 0.4752475247524752], 0, 
          NCache[
           Rational[53, 101], 0.5247524752475248]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8297064300100367, 0.]}, {
           0., -0.8297064300100367}]]}, 
        {RGBColor[
          NCache[
           Rational[49, 101], 0.48514851485148514`], 0, 
          NCache[
           Rational[52, 101], 0.5148514851485149]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8421777484593143, 0.]}, {
           0., -0.8421777484593143}]]}, 
        {RGBColor[
          NCache[
           Rational[50, 101], 0.49504950495049505`], 0, 
          NCache[
           Rational[51, 101], 0.504950495049505]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8542879842301424, 0.]}, {
           0., -0.8542879842301424}]]}, 
        {RGBColor[
          NCache[
           Rational[51, 101], 0.504950495049505], 0, 
          NCache[
           Rational[50, 101], 0.49504950495049505`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8660254037844386, 0.]}, {
           0., -0.8660254037844386}]]}, 
        {RGBColor[
          NCache[
           Rational[52, 101], 0.5148514851485149], 0, 
          NCache[
           Rational[49, 101], 0.48514851485148514`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8773778889395378, 0.]}, {
           0., -0.8773778889395378}]]}, 
        {RGBColor[
          NCache[
           Rational[53, 101], 0.5247524752475248], 0, 
          NCache[
           Rational[48, 101], 0.4752475247524752]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8883329105690052, 0.]}, {
           0., -0.8883329105690052}]]}, 
        {RGBColor[
          NCache[
           Rational[54, 101], 0.5346534653465347], 0, 
          NCache[
           Rational[47, 101], 0.46534653465346537`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8988774999965234, 0.]}, {
           0., -0.8988774999965234}]]}, 
        {RGBColor[
          NCache[
           Rational[55, 101], 0.5445544554455446], 0, 
          NCache[
           Rational[46, 101], 0.45544554455445546`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9089982178200351, 0.]}, {
           0., -0.9089982178200351}]]}, 
        {RGBColor[
          NCache[
           Rational[56, 101], 0.5544554455445545], 0, 
          NCache[
           Rational[45, 101], 0.44554455445544555`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9186811198669537, 0.]}, {
           0., -0.9186811198669537}]]}, 
        {RGBColor[
          NCache[
           Rational[57, 101], 0.5643564356435643], 0, 
          NCache[
           Rational[44, 101], 0.43564356435643564`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9279117199389174, 0.]}, {
           0., -0.9279117199389174}]]}, 
        {RGBColor[
          NCache[
           Rational[58, 101], 0.5742574257425742], 0, 
          NCache[
           Rational[43, 101], 0.42574257425742573`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9366749489550791, 0.]}, {
           0., -0.9366749489550791}]]}, 
        {RGBColor[
          NCache[
           Rational[59, 101], 0.5841584158415841], 0, 
          NCache[
           Rational[42, 101], 0.4158415841584158]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9449551100449163, 0.]}, {
           0., -0.9449551100449163}]]}, 
        {RGBColor[
          NCache[
           Rational[60, 101], 0.594059405940594], 0, 
          NCache[
           Rational[41, 101], 0.40594059405940597`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9527358290733061, 0.]}, {
           0., -0.9527358290733061}]]}, 
        {RGBColor[
          NCache[
           Rational[61, 101], 0.6039603960396039], 0, 
          NCache[
           Rational[40, 101], 0.39603960396039606`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.96, 0.]}, {0., -0.96}]]}, 
        {RGBColor[
          NCache[
           Rational[62, 101], 0.6138613861386139], 0, 
          NCache[
           Rational[39, 101], 0.38613861386138615`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9667297243800874, 0.]}, {
           0., -0.9667297243800874}]]}, 
        {RGBColor[
          NCache[
           Rational[63, 101], 0.6237623762376238], 0, 
          NCache[
           Rational[38, 101], 0.37623762376237624`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9729062441982783, 0.]}, {
           0., -0.9729062441982783}]]}, 
        {RGBColor[
          NCache[
           Rational[64, 101], 0.6336633663366337], 0, 
          NCache[
           Rational[37, 101], 0.36633663366336633`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9785098670938377, 0.]}, {
           0., -0.9785098670938377}]]}, 
        {RGBColor[
          NCache[
           Rational[65, 101], 0.6435643564356436], 0, 
          NCache[
           Rational[36, 101], 0.3564356435643564]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9835198828696856, 0.]}, {
           0., -0.9835198828696856}]]}, 
        {RGBColor[
          NCache[
           Rational[66, 101], 0.6534653465346535], 0, 
          NCache[
           Rational[35, 101], 0.3465346534653465]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9879144699820931, 0.]}, {
           0., -0.9879144699820931}]]}, 
        {RGBColor[
          NCache[
           Rational[67, 101], 0.6633663366336634], 0, 
          NCache[
           Rational[34, 101], 0.33663366336633666`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9916705904684278, 0.]}, {
           0., -0.9916705904684278}]]}, 
        {RGBColor[
          NCache[
           Rational[68, 101], 0.6732673267326733], 0, 
          NCache[
           Rational[33, 101], 0.32673267326732675`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9947638714790561, 0.]}, {
           0., -0.9947638714790561}]]}, 
        {RGBColor[
          NCache[
           Rational[69, 101], 0.6831683168316832], 0, 
          NCache[
           Rational[32, 101], 0.31683168316831684`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9971684712223907, 0.]}, {
           0., -0.9971684712223907}]]}, 
        {RGBColor[
          NCache[
           Rational[70, 101], 0.693069306930693], 0, 
          NCache[
           Rational[31, 101], 0.3069306930693069]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9988569266917059, 0.]}, {
           0., -0.9988569266917059}]]}, 
        {RGBColor[
          NCache[
           Rational[71, 101], 0.7029702970297029], 0, 
          NCache[
           Rational[30, 101], 0.297029702970297]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.999799979995999, 0.]}, {
           0., -0.999799979995999}]]}, 
        {RGBColor[
          NCache[
           Rational[72, 101], 0.7128712871287128], 0, 
          NCache[
           Rational[29, 101], 0.2871287128712871]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9999663794348288, 0.]}, {
           0., -0.9999663794348288}]]}, 
        {RGBColor[
          NCache[
           Rational[73, 101], 0.7227722772277227], 0, 
          NCache[
           Rational[28, 101], 0.27722772277227725`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9993226505988944, 0.]}, {
           0., -0.9993226505988944}]]}, 
        {RGBColor[
          NCache[
           Rational[74, 101], 0.7326732673267327], 0, 
          NCache[
           Rational[27, 101], 0.26732673267326734`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9978328316907598, 0.]}, {
           0., -0.9978328316907598}]]}, 
        {RGBColor[
          NCache[
           Rational[75, 101], 0.7425742574257426], 0, 
          NCache[
           Rational[26, 101], 0.25742574257425743`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.995458165871374, 0.]}, {
           0., -0.995458165871374}]]}, 
        {RGBColor[
          NCache[
           Rational[76, 101], 0.7524752475247525], 0, 
          NCache[
           Rational[25, 101], 0.24752475247524752`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9921567416492215, 0.]}, {
           0., -0.9921567416492215}]]}, 
        {RGBColor[
          NCache[
           Rational[77, 101], 0.7623762376237624], 0, 
          NCache[
           Rational[24, 101], 0.2376237623762376]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9878830700037329, 0.]}, {
           0., -0.9878830700037329}]]}, 
        {RGBColor[
          NCache[
           Rational[78, 101], 0.7722772277227723], 0, 
          NCache[
           Rational[23, 101], 0.22772277227722773`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9825875838824751, 0.]}, {
           0., -0.9825875838824751}]]}, 
        {RGBColor[
          NCache[
           Rational[79, 101], 0.7821782178217822], 0, 
          NCache[
           Rational[22, 101], 0.21782178217821782`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9762160416629098, 0.]}, {
           0., -0.9762160416629098}]]}, 
        {RGBColor[
          NCache[
           Rational[80, 101], 0.7920792079207921], 0, 
          NCache[
           Rational[21, 101], 0.2079207920792079]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9687088107372617, 0.]}, {
           0., -0.9687088107372617}]]}, 
        {RGBColor[
          NCache[
           Rational[81, 101], 0.801980198019802], 0, 
          NCache[
           Rational[20, 101], 0.19801980198019803`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9599999999999999, 0.]}, {
           0., -0.9599999999999999}]]}, 
        {RGBColor[
          NCache[
           Rational[82, 101], 0.8118811881188119], 0, 
          NCache[
           Rational[19, 101], 0.18811881188118812`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9500163998584444, 0.]}, {
           0., -0.9500163998584444}]]}, 
        {RGBColor[
          NCache[
           Rational[83, 101], 0.8217821782178217], 0, 
          NCache[
           Rational[18, 101], 0.1782178217821782]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9386761741942744, 0.]}, {
           0., -0.9386761741942744}]]}, 
        {RGBColor[
          NCache[
           Rational[84, 101], 0.8316831683168316], 0, 
          NCache[
           Rational[17, 101], 0.16831683168316833`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9258872285543203, 0.]}, {
           0., -0.9258872285543203}]]}, 
        {RGBColor[
          NCache[
           Rational[85, 101], 0.8415841584158416], 0, 
          NCache[
           Rational[16, 101], 0.15841584158415842`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.9115451497320362, 0.]}, {
           0., -0.9115451497320362}]]}, 
        {RGBColor[
          NCache[
           Rational[86, 101], 0.8514851485148515], 0, 
          NCache[
           Rational[15, 101], 0.1485148514851485]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.895530568992483, 0.]}, {
           0., -0.895530568992483}]]}, 
        {RGBColor[
          NCache[
           Rational[87, 101], 0.8613861386138614], 0, 
          NCache[
           Rational[14, 101], 0.13861386138613863`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8777057365655075, 0.]}, {
           0., -0.8777057365655075}]]}, 
        {RGBColor[
          NCache[
           Rational[88, 101], 0.8712871287128713], 0, 
          NCache[
           Rational[13, 101], 0.12871287128712872`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8579099952792251, 0.]}, {
           0., -0.8579099952792251}]]}, 
        {RGBColor[
          NCache[
           Rational[89, 101], 0.8811881188118812], 0, 
          NCache[
           Rational[12, 101], 0.1188118811881188]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8359536829274694, 0.]}, {
           0., -0.8359536829274694}]]}, 
        {RGBColor[
          NCache[
           Rational[90, 101], 0.8910891089108911], 0, 
          NCache[
           Rational[11, 101], 0.10891089108910891`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.8116097338006734, 0.]}, {
           0., -0.8116097338006734}]]}, 
        {RGBColor[
          NCache[
           Rational[91, 101], 0.900990099009901], 0, 
          NCache[
           Rational[10, 101], 0.09900990099009901]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.7846018098373211, 0.]}, {
           0., -0.7846018098373211}]]}, 
        {RGBColor[
          NCache[
           Rational[92, 101], 0.9108910891089109], 0, 
          NCache[
           Rational[9, 101], 0.0891089108910891]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.7545870128752548, 0.]}, {
           0., -0.7545870128752548}]]}, 
        {RGBColor[
          NCache[
           Rational[93, 101], 0.9207920792079208], 0, 
          NCache[
           Rational[8, 101], 0.07920792079207921]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.7211297802753676, 0.]}, {
           0., -0.7211297802753676}]]}, 
        {RGBColor[
          NCache[
           Rational[94, 101], 0.9306930693069307], 0, 
          NCache[
           Rational[7, 101], 0.06930693069306931]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.6836607053209944, 0.]}, {
           0., -0.6836607053209944}]]}, 
        {RGBColor[
          NCache[
           Rational[95, 101], 0.9405940594059405], 0, 
          NCache[
           Rational[6, 101], 0.0594059405940594]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.641407951307122, 0.]}, {
           0., -0.641407951307122}]]}, 
        {RGBColor[
          NCache[
           Rational[96, 101], 0.9504950495049505], 0, 
          NCache[
           Rational[5, 101], 0.04950495049504951]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.5932748098478476, 0.]}, {
           0., -0.5932748098478476}]]}, 
        {RGBColor[
          NCache[
           Rational[97, 101], 0.9603960396039604], 0, 
          NCache[
           Rational[4, 101], 0.039603960396039604`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.5376000000000001, 0.]}, {
           0., -0.5376000000000001}]]}, 
        {RGBColor[
          NCache[
           Rational[98, 101], 0.9702970297029703], 0, 
          NCache[
           Rational[3, 101], 0.0297029702970297]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.47162353630835696`, 0.]}, {
           0., -0.47162353630835696`}]]}, 
        {RGBColor[
          NCache[
           Rational[99, 101], 0.9801980198019802], 0, 
          NCache[
           Rational[2, 101], 0.019801980198019802`]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.3900350753457954, 0.]}, {
           0., -0.3900350753457954}]]}, 
        {RGBColor[
          NCache[
           Rational[100, 101], 0.9900990099009901], 0, 
          NCache[
           Rational[1, 101], 0.009900990099009901]], PointSize[0.02], 
         PointBox[
          NCache[{Complex[0., 0.], Complex[-0.2793133723973847, 0.]}, {
           0., -0.2793133723973847}]]}, 
        {RGBColor[1, 0, 0], PointSize[0.02], 
         PointBox[NCache[{Complex[0., 0.], Complex[0., 0.]}, {0., 0.}]]}}}], {967.5, -189.},
      ImageScaled[{0.5, 0.5}], {360., 360.}]}, {}},
  ContentSelectable->True,
  ImageSize->Large,
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{{3.634052984672557*^9, 3.634053011198743*^9}}]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Eigensystems", "Section",
 CellChangeTimes->{{3.6343148241488953`*^9, 3.634314826011183*^9}}],

Cell[CellGroupData[{

Cell["EigensystemForm", "Subsection",
 CellChangeTimes->{{3.634314892516191*^9, 3.634314895113641*^9}}],

Cell[TextData[{
 StyleBox["EigensystemForm[", "Input"],
 StyleBox["sys", "Input",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["]", "Input"],
 " takes an eigensystem ",
 StyleBox["sys", "Input"],
 " in the form as outputted by ",
 StyleBox["Eigensystem", "Input"],
 " and prints it in a readable way."
}], "Text",
 CellChangeTimes->{{3.634314834207862*^9, 3.6343148863380527`*^9}},
 CellTags->"EigensystemForm::usage"],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.634314899934328*^9, 3.63431490075238*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Eigensystem", "[", 
   RowBox[{"TP", "[", "XX", "]"}], "]"}], "//", "EigensystemForm"}]], "Input",\

 CellChangeTimes->{{3.6343149028295717`*^9, 3.634314931398527*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"-", "1"}], 
     RowBox[{"-", "1"}], "1", "1"},
    {"\<\"\[DownArrow]\"\>", "\<\"\[DownArrow]\"\>", "\<\"\[DownArrow]\"\>", \
"\<\"\[DownArrow]\"\>"},
    {
     TagBox[
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {
           RowBox[{"-", "1"}]},
          {"0"},
          {"0"},
          {"1"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0"},
          {
           RowBox[{"-", "1"}]},
          {"1"},
          {"0"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"1"},
          {"0"},
          {"0"},
          {"1"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"0"},
          {"1"},
          {"1"},
          {"0"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}],
        Column], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{All}}, "Rows" -> {{All}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.634315069766027*^9, 3.634315099323866*^9}}]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Special Plotting Functions", "Section",
 CellChangeTimes->{{3.633701139375239*^9, 3.633701142223068*^9}, {
  3.6337020299912653`*^9, 3.633702035160575*^9}, {3.6337021489438553`*^9, 
  3.633702152166658*^9}, {3.633703091146435*^9, 3.633703091229396*^9}, {
  3.633703263937025*^9, 3.633703265039879*^9}}],

Cell[CellGroupData[{

Cell["FourierListPlot", "Subsection",
 CellChangeTimes->{{3.633702160143949*^9, 3.633702165246875*^9}, {
  3.633702612717472*^9, 3.633702612816992*^9}}],

Cell[TextData[{
 StyleBox["FourierListPlot[data,{mint,maxt},function] ", "Input"],
 "is very similar to ",
 StyleBox["ListPlot[data]", "Input"],
 ",except that the (single sided spectrum) discrete Fourier transform of data \
(or each sublist thereof) is plotted. ",
 StyleBox["mint", "Input"],
 " and ",
 StyleBox["maxt", "Input"],
 " are the minimum and maximum time domain points,with an assumed linear \
spacing on the data.function is a function or list of functions you want to \
plot,eg. ",
 StyleBox["Abs", "Input"],
 ",or ",
 StyleBox["{Re,Im}", "Input"],
 ". All options available to ",
 StyleBox["ListPlot", "Input"],
 " may be added,e.g. ",
 StyleBox["Joined\[Rule]True", "Input"],
 ".Of special note is ",
 StyleBox["DataRange", "Input"],
 ", which must either be ",
 StyleBox["Automatic", "Input"],
 " or ",
 StyleBox["{minf,maxf}", "Input"],
 " which are in units of frequency."
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{
  3.634051196668297*^9, {3.634051493034835*^9, 3.6340514955065393`*^9}, {
   3.634051531126143*^9, 3.634051557552231*^9}},
 CellTags->"FourierListPlot::usage"],

Cell[CellGroupData[{

Cell["Options", "Subsubsection",
 CellChangeTimes->{{3.6337023242610292`*^9, 3.633702324877038*^9}}],

Cell[TextData[{
 "We have all the options from ",
 StyleBox["ListPlot", "Input"],
 "."
}], "Text",
 CellChangeTimes->{{3.633702328222645*^9, 3.633702352294628*^9}}],

Cell[BoxData[GridBox[{
   {
    StyleBox["Option", "Text",
     FontWeight->Bold], 
    StyleBox[
     RowBox[{"Default", " ", "Value"}], "Text",
     FontWeight->Bold], 
    StyleBox["Description", "Text",
     FontWeight->Bold]},
   {"AlignmentPoint", "Center", 
    StyleBox[
     RowBox[{
     "AlignmentPoint", " ", "is", " ", "an", " ", "option", " ", "which", " ",
       "specifies", " ", "how", " ", "objects", " ", "should", " ", "by", " ",
       "default", " ", "be", " ", "aligned", " ", "when", " ", "they", " ", 
      "appear", " ", "in", " ", 
      RowBox[{"Inset", "."}]}], "Text"]},
   {"AspectRatio", 
    FractionBox["1", "GoldenRatio"], 
    StyleBox[
     RowBox[{
     "AspectRatio", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "Graphics", " ", "and", " ", "related", " ", "functions", " ", "that", 
      " ", "specifies", " ", "the", " ", "ratio", " ", "of", " ", "height", 
      " ", "to", " ", "width", " ", "for", " ", "a", " ", 
      RowBox[{"plot", ".", " "}]}], "Text"]},
   {"Axes", "True", 
    StyleBox[
     RowBox[{
     "Axes", " ", "is", " ", "an", " ", "option", " ", "for", " ", "graphics",
       " ", "functions", " ", "that", " ", "specifies", " ", "whether", " ", 
      "axes", " ", "should", " ", "be", " ", 
      RowBox[{"drawn", ".", " "}]}], "Text"]},
   {"AxesLabel", "None", 
    StyleBox[
     RowBox[{
     "AxesLabel", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "labels", " ", "for", " ", 
      RowBox[{"axes", ".", " "}]}], "Text"]},
   {"AxesOrigin", "Automatic", 
    StyleBox[
     RowBox[{
     "AxesOrigin", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "where", " ", "any", " ", "axes", " ", "drawn", " ", "should", " ", 
      RowBox[{"cross", ".", " "}]}], "Text"]},
   {"AxesStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "AxesStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", "how",
       " ", "axes", " ", "should", " ", "be", " ", 
      RowBox[{"rendered", ".", " "}]}], "Text"]},
   {"Background", "None", 
    StyleBox[
     RowBox[{
     "Background", " ", "is", " ", "an", " ", "option", " ", "that", " ", 
      "specifies", " ", "what", " ", "background", " ", "color", " ", "to", 
      " ", 
      RowBox[{"use", ".", " "}]}], "Text"]},
   {"BaselinePosition", "Automatic", 
    StyleBox[
     RowBox[{
     "BaselinePosition", " ", "is", " ", "an", " ", "option", " ", "that", 
      " ", "specifies", " ", "where", " ", "the", " ", "baseline", " ", "of", 
      " ", "an", " ", "object", " ", "is", " ", "considered", " ", "to", " ", 
      "be", " ", "for", " ", "purposes", " ", "of", " ", "alignment", " ", 
      "with", " ", "surrounding", " ", "text", " ", "or", " ", "other", " ", 
      RowBox[{"expressions", ".", " "}]}], "Text"]},
   {"BaseStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "BaseStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "formatting", " ", "and", " ", "related", " ", "constructs", " ", 
      "that", " ", "specifies", " ", "the", " ", "base", " ", "style", " ", 
      "to", " ", "use", " ", "for", " ", 
      RowBox[{"them", ".", " "}]}], "Text"]},
   {"ClippingStyle", "None", 
    StyleBox[
     RowBox[{
     "ClippingStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "functions", " ", "that", " ", "specifies", " ", "the",
       " ", "style", " ", "of", " ", "what", " ", "should", " ", "be", " ", 
      "drawn", " ", "when", " ", "curves", " ", "or", " ", "surfaces", " ", 
      "would", " ", "extend", " ", "beyond", " ", "the", " ", "plot", " ", 
      RowBox[{"range", ".", " "}]}], "Text"]},
   {"ColorFunction", "Automatic", 
    StyleBox[
     RowBox[{
     "ColorFunction", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", "a", 
      " ", "function", " ", "to", " ", "apply", " ", "to", " ", "determine", 
      " ", "colors", " ", "of", " ", 
      RowBox[{"elements", ".", " "}]}], "Text"]},
   {"ColorFunctionScaling", "True", 
    StyleBox[
     RowBox[{
     "ColorFunctionScaling", " ", "is", " ", "an", " ", "option", " ", "for", 
      " ", "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "whether", " ", "arguments", " ", "supplied", " ", "to", " ", "a", " ", 
      "color", " ", "function", " ", "should", " ", "be", " ", "scaled", " ", 
      "to", " ", "lie", " ", "between", " ", "0", " ", "and", " ", "1.", 
      " "}], "Text"]},
   {"ColorOutput", "Automatic", 
    StyleBox[
     RowBox[{
     "ColorOutput", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", "the",
       " ", "type", " ", "of", " ", "color", " ", "output", " ", "to", " ", 
      RowBox[{"produce", ".", " "}]}], "Text"]},
   {"ContentSelectable", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "ContentSelectable", " ", "is", " ", "an", " ", "option", " ", "to", 
       " ", "constructs", " ", "such", " ", "as", " ", "Inset"}], ",", " ", 
      "Graphics", ",", " ", 
      RowBox[{
      "and", " ", "GraphicsGroup", " ", "that", " ", "specifies", " ", 
       "whether", " ", "and", " ", "how", " ", "content", " ", "within", " ", 
       "them", " ", "should", " ", "be", " ", 
       RowBox[{"selectable", ".", " "}]}]}], "Text"]},
   {"CoordinatesToolOptions", "Automatic", 
    StyleBox[
     RowBox[{
     "CoordinatesToolOptions", " ", "is", " ", "an", " ", "option", " ", 
      "for", " ", "Graphics", " ", "that", " ", "gives", " ", "values", " ", 
      "of", " ", "options", " ", "associated", " ", "with", " ", "the", " ", 
      StyleBox[
       RowBox[{"Get", " ", "Coordinates"}], "MenuName"], " ", 
      RowBox[{"tool", "."}]}], "Text"]},
   {"DataRange", "Automatic", 
    StyleBox[
     RowBox[{
     "DataRange", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "functions", " ", "such", " ", "as", " ", "ListPlot", " ", "and", " ", 
      "ListDensityPlot", " ", "that", " ", "specifies", " ", "what", " ", 
      "range", " ", "of", " ", "actual", " ", "coordinates", " ", "the", " ", 
      "data", " ", "should", " ", "be", " ", "assumed", " ", "to", " ", 
      RowBox[{"occupy", ".", " "}]}], "Text"]},
   {"DisplayFunction", "Identity", 
    StyleBox[
     RowBox[{
     "DisplayFunction", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "and", " ", "sound", " ", "functions", " ", "that", 
      " ", "specifies", " ", "a", " ", "function", " ", "to", " ", "apply", 
      " ", "to", " ", "graphics", " ", "and", " ", "sound", " ", "objects", 
      " ", "before", " ", "returning", " ", 
      RowBox[{"them", "."}]}], "Text"]},
   {"Epilog", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "Epilog", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "gives", " ", "a", " ", 
      "list", " ", "of", " ", "graphics", " ", "primitives", " ", "to", " ", 
      "be", " ", "rendered", " ", "after", " ", "the", " ", "main", " ", 
      "part", " ", "of", " ", "the", " ", "graphics", " ", "is", " ", 
      RowBox[{"rendered", ".", " "}]}], "Text"]},
   {"Filling", "None", 
    StyleBox[
     RowBox[{
      RowBox[{
      "Filling", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "ListPlot"}], ",", " ", "Plot", ",", " ", "Plot3D", ",", " ", 
      RowBox[{
      "and", " ", "related", " ", "functions", " ", "that", " ", "specifies", 
       " ", "what", " ", "filling", " ", "to", " ", "add", " ", "under", " ", 
       "points"}], ",", " ", "curves", ",", " ", 
      RowBox[{"and", " ", 
       RowBox[{"surfaces", ".", " "}]}]}], "Text"]},
   {"FillingStyle", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "FillingStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "ListPlot"}], ",", " ", "Plot", ",", " ", "Plot3D", ",", " ", 
      RowBox[{
      "and", " ", "related", " ", "functions", " ", "that", " ", "specifies", 
       " ", "the", " ", "default", " ", "style", " ", "of", " ", "filling", 
       " ", "to", " ", "be", " ", 
       RowBox[{"used", ".", " "}]}]}], "Text"]},
   {"FormatType", "TraditionalForm", 
    StyleBox[
     RowBox[{
      RowBox[{
      "FormatType", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "output", " ", "streams"}], ",", " ", "graphics", ",", " ", 
      RowBox[{
      "and", " ", "functions", " ", "such", " ", "as", " ", "Text", " ", 
       "that", " ", "specifies", " ", "the", " ", "default", " ", "format", 
       " ", "type", " ", "to", " ", "use", " ", "when", " ", "outputting", 
       " ", 
       RowBox[{"expressions", ".", " "}]}]}], "Text"]},
   {"Frame", "False", 
    StyleBox[
     RowBox[{
      RowBox[{
      "Frame", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Graphics"}], ",", " ", "Grid", ",", " ", 
      RowBox[{
      "and", " ", "other", " ", "constructs", " ", "that", " ", "specifies", 
       " ", "whether", " ", "to", " ", "include", " ", "a", " ", 
       RowBox[{"frame", ".", " "}]}]}], "Text"]},
   {"FrameLabel", "None", 
    StyleBox[
     RowBox[{
      RowBox[{
      "FrameLabel", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Graphics"}], ",", " ", "Manipulate", ",", " ", 
      RowBox[{
      "and", " ", "related", " ", "functions", " ", "that", " ", "specifies", 
       " ", "labels", " ", "to", " ", "be", " ", "placed", " ", "on", " ", 
       "the", " ", "edges", " ", "of", " ", "a", " ", 
       RowBox[{"frame", ".", " "}]}]}], "Text"]},
   {"FrameStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
      RowBox[{
      "FrameStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Graphics"}], ",", " ", "Grid", ",", " ", 
      RowBox[{
      "and", " ", "other", " ", "constructs", " ", "that", " ", "specifies", 
       " ", "the", " ", "style", " ", "in", " ", "which", " ", "to", " ", 
       "draw", " ", 
       RowBox[{"frames", "."}]}]}], "Text"]},
   {"FrameTicks", "Automatic", 
    StyleBox[
     RowBox[{
     "FrameTicks", " ", "is", " ", "an", " ", "option", " ", "for", " ", "2", 
      "D", " ", "graphics", " ", "functions", " ", "that", " ", "specifies", 
      " ", "tick", " ", "marks", " ", "for", " ", "the", " ", "edges", " ", 
      "of", " ", "a", " ", 
      RowBox[{"frame", ".", " "}]}], "Text"]},
   {"FrameTicksStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "FrameTicksStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "2", "D", " ", "graphics", " ", "functions", " ", "that", " ", 
      "specifies", " ", "how", " ", "frame", " ", "ticks", " ", "should", " ",
       "be", " ", 
      RowBox[{"rendered", "."}]}], "Text"]},
   {"GridLines", "None", 
    StyleBox[
     RowBox[{
      RowBox[{
      "GridLines", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "two"}], "-", 
      RowBox[{
      "dimensional", " ", "graphics", " ", "functions", " ", "that", " ", 
       "specifies", " ", "grid", " ", 
       RowBox[{"lines", ".", " "}]}]}], "Text"]},
   {"GridLinesStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "GridLinesStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "2", "D", " ", "graphics", " ", "functions", " ", "that", " ", 
      "specifies", " ", "how", " ", "grid", " ", "lines", " ", "should", " ", 
      "be", " ", 
      RowBox[{"rendered", "."}]}], "Text"]},
   {"ImageMargins", "0.`", 
    StyleBox[
     RowBox[{
     "ImageMargins", " ", "is", " ", "an", " ", "option", " ", "that", " ", 
      "specifies", " ", "the", " ", "absolute", " ", "margins", " ", "to", 
      " ", "leave", " ", "around", " ", "the", " ", "image", " ", "displayed",
       " ", "for", " ", "an", " ", 
      RowBox[{"object", ".", " "}]}], "Text"]},
   {"ImagePadding", "All", 
    StyleBox[
     RowBox[{
     "ImagePadding", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "what", " ", "absolute", " ", "extra", " ", "padding", " ", "should", 
      " ", "be", " ", "left", " ", "for", " ", "extended", " ", "objects", 
      " ", "such", " ", "as", " ", "thick", " ", "lines", " ", "and", " ", 
      "annotations", " ", "such", " ", "as", " ", "tick", " ", "and", " ", 
      "axis", " ", 
      RowBox[{"labels", "."}]}], "Text"]},
   {"ImageSize", "Automatic", 
    StyleBox[
     RowBox[{
     "ImageSize", " ", "is", " ", "an", " ", "option", " ", "that", " ", 
      "specifies", " ", "the", " ", "overall", " ", "size", " ", "of", " ", 
      "an", " ", "image", " ", "to", " ", "display", " ", "for", " ", "an", 
      " ", 
      RowBox[{"object", ".", " "}]}], "Text"]},
   {"ImageSizeRaw", "Automatic", 
    StyleBox[
     RowBox[{"No", " ", "description", " ", 
      RowBox[{"available", "."}]}], "Text"]},
   {"InterpolationOrder", "None", 
    StyleBox[
     RowBox[{
      RowBox[{
      "InterpolationOrder", " ", "is", " ", "an", " ", "option", " ", "for", 
       " ", "Interpolation"}], ",", " ", 
      RowBox[{"as", " ", "well", " ", "as", " ", "ListLinePlot"}], ",", " ", 
      "ListPlot3D", ",", " ", "ListContourPlot", ",", " ", 
      RowBox[{"and", " ", "related", " ", "functions"}], ",", " ", 
      RowBox[{
      "that", " ", "specifies", " ", "what", " ", "order", " ", "of", " ", 
       "interpolation", " ", "to", " ", 
       RowBox[{"use", "."}]}]}], "Text"]},
   {"Joined", "False", 
    StyleBox[
     RowBox[{
      RowBox[{
      "Joined", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "ListPlot", " ", "and", " ", "related", " ", "functions", " ", "that", 
       " ", "specifies", " ", "whether", " ", "points", " ", "in", " ", 
       "each", " ", "dataset", " ", "should", " ", "be", " ", "joined", " ", 
       "into", " ", "a", " ", "line"}], ",", " ", 
      RowBox[{
      "or", " ", "should", " ", "be", " ", "plotted", " ", "as", " ", 
       "separate", " ", 
       RowBox[{"points", ".", " "}]}]}], "Text"]},
   {"LabelStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
      RowBox[{
      "LabelStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "formatting", " ", "and", " ", "related", " ", "constructs", " ", 
       "that", " ", "specifies", " ", "the", " ", "style", " ", "to", " ", 
       "use", " ", "in", " ", "displaying", " ", "their", " ", "label"}], "-", 
      RowBox[{"like", " ", 
       RowBox[{"elements", ".", " "}]}]}], "Text"]},
   {"MaxPlotPoints", "\[Infinity]", 
    StyleBox[
     RowBox[{
     "MaxPlotPoints", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "functions", " ", "like", " ", "ArrayPlot", " ", "and",
       " ", "ListPlot3D", " ", "that", " ", "specifies", " ", "the", " ", 
      "maximum", " ", "number", " ", "of", " ", "points", " ", "that", " ", 
      "will", " ", "explicitly", " ", "be", " ", "included", " ", "in", " ", 
      "the", " ", 
      RowBox[{"output", ".", " "}]}], "Text"]},
   {"Mesh", "None", 
    StyleBox[
     RowBox[{
      RowBox[{
      "Mesh", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Plot3D"}], ",", " ", "DensityPlot", ",", " ", 
      RowBox[{
      "and", " ", "other", " ", "plotting", " ", "functions", " ", "that", 
       " ", "specifies", " ", "what", " ", "mesh", " ", "should", " ", "be", 
       " ", 
       RowBox[{"drawn", ".", " "}]}]}], "Text"]},
   {"MeshFunctions", 
    RowBox[{"{", 
     RowBox[{"#1", "&"}], "}"}], 
    StyleBox[
     RowBox[{
     "MeshFunctions", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "functions", " ", "that", " ", "specifies", " ", 
      "functions", " ", "to", " ", "use", " ", "to", " ", "determine", " ", 
      "the", " ", "placement", " ", "of", " ", "mesh", " ", 
      RowBox[{"divisions", ".", " "}]}], "Text"]},
   {"MeshShading", "None", 
    StyleBox[
     RowBox[{
     "MeshShading", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "functions", " ", "that", " ", "gives", " ", "lists", 
      " ", "of", " ", "colors", " ", "to", " ", "use", " ", "for", " ", 
      "regions", " ", "between", " ", "mesh", " ", 
      RowBox[{"divisions", ".", " "}]}], "Text"]},
   {"MeshStyle", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "MeshStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "Plot3D"}], ",", " ", "DensityPlot", ",", " ", 
      RowBox[{
      "and", " ", "other", " ", "plotting", " ", "functions", " ", "that", 
       " ", "specifies", " ", "the", " ", "style", " ", "in", " ", "which", 
       " ", "to", " ", "draw", " ", "a", " ", 
       RowBox[{"mesh", ".", " "}]}]}], "Text"]},
   {"Method", "Automatic", 
    StyleBox[
     RowBox[{
      RowBox[{
      "Method", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
       "various", " ", "algorithm"}], "-", 
      RowBox[{
      "intensive", " ", "functions", " ", "that", " ", "specifies", " ", 
       "what", " ", "internal", " ", "methods", " ", "they", " ", "should", 
       " ", 
       RowBox[{"use", "."}]}]}], "Text"]},
   {"PerformanceGoal", "\"\<Quality\>\"", 
    StyleBox[
     RowBox[{
     "PerformanceGoal", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "and", " ", "various", " ", "other", " ", 
      "algorithmic", " ", "functions", " ", "that", " ", "specifies", " ", 
      "what", " ", "aspect", " ", "of", " ", "performance", " ", "to", " ", 
      "try", " ", "to", " ", "optimize", " ", "with", " ", "Automatic", " ", 
      "settings", " ", "for", " ", 
      RowBox[{"options", "."}]}], "Text"]},
   {"PlotLabel", "None", 
    StyleBox[
     RowBox[{
     "PlotLabel", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", "an", 
      " ", "overall", " ", "label", " ", "for", " ", "a", " ", 
      RowBox[{"plot", ".", " "}]}], "Text"]},
   {"PlotLegends", "None", 
    StyleBox[
     RowBox[{
     "PlotLegends", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plot", " ", "functions", " ", "that", " ", "specifies", " ", "what", 
      " ", "legends", " ", "to", " ", 
      RowBox[{"use", ".", " "}]}], "Text"]},
   {"PlotMarkers", "None", 
    StyleBox[
     RowBox[{
     "PlotMarkers", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "like", " ", "ListPlot", " ", "and", 
      " ", "ListLinePlot", " ", "that", " ", "specifies", " ", "what", " ", 
      "markers", " ", "to", " ", "draw", " ", "at", " ", "the", " ", "points",
       " ", 
      RowBox[{"plotted", ".", " "}]}], "Text"]},
   {"PlotRange", "Automatic", 
    StyleBox[
     RowBox[{
     "PlotRange", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "what", " ", "range", " ", "of", " ", "coordinates", " ", "to", " ", 
      "include", " ", "in", " ", "a", " ", 
      RowBox[{"plot", ".", " "}]}], "Text"]},
   {"PlotRangeClipping", "True", 
    StyleBox[
     RowBox[{
      RowBox[{
      "PlotRangeClipping", " ", "is", " ", "an", " ", "option", " ", "for", 
       " ", "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
       "whether", " ", "graphics", " ", "objects", " ", "should", " ", "be", 
       " ", "clipped", " ", "at", " ", "the", " ", "edge", " ", "of", " ", 
       "the", " ", "region", " ", "defined", " ", "by", " ", "PlotRange"}], 
      ",", " ", 
      RowBox[{
      "or", " ", "should", " ", "be", " ", "allowed", " ", "to", " ", 
       "extend", " ", "to", " ", "the", " ", "actual", " ", "edge", " ", "of",
        " ", "the", " ", 
       RowBox[{"image", ".", " "}]}]}], "Text"]},
   {"PlotRangePadding", "Automatic", 
    StyleBox[
     RowBox[{
     "PlotRangePadding", " ", "is", " ", "an", " ", "option", " ", "for", " ",
       "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "how", " ", "much", " ", "further", " ", "axes", " ", 
      RowBox[{"etc", ".", " ", "should"}], " ", "extend", " ", "beyond", " ", 
      "the", " ", "range", " ", "of", " ", "coordinates", " ", "specified", 
      " ", "by", " ", 
      RowBox[{"PlotRange", ".", " "}]}], "Text"]},
   {"PlotRegion", "Automatic", 
    StyleBox[
     RowBox[{
     "PlotRegion", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "what", " ", "region", " ", "of", " ", "the", " ", "final", " ", 
      "display", " ", "area", " ", "a", " ", "plot", " ", "should", " ", 
      RowBox[{"fill", ".", " "}]}], "Text"]},
   {"PlotStyle", "Automatic", 
    StyleBox[
     RowBox[{
     "PlotStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "and", " ", "related", " ", "functions", " ", "that", 
      " ", "specifies", " ", "styles", " ", "in", " ", "which", " ", 
      "objects", " ", "are", " ", "to", " ", "be", " ", 
      RowBox[{"drawn", ".", " "}]}], "Text"]},
   {"PlotTheme", "Automatic", 
    StyleBox[
     RowBox[{
     "PlotTheme", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "plotting", " ", "and", " ", "related", " ", "functions", " ", "that", 
      " ", "specifies", " ", "an", " ", "overall", " ", "theme", " ", "for", 
      " ", "visualization", " ", "elements", " ", "and", " ", 
      RowBox[{"styles", ".", " "}]}], "Text"]},
   {"PreserveImageOptions", "Automatic", 
    StyleBox[
     RowBox[{
     "PreserveImageOptions", " ", "is", " ", "an", " ", "option", " ", "to", 
      " ", "graphics", " ", "and", " ", "related", " ", "functions", " ", 
      "that", " ", "specifies", " ", "whether", " ", "image", " ", "size", 
      " ", "and", " ", "certain", " ", "other", " ", "options", " ", "should",
       " ", "be", " ", "preserved", " ", "from", " ", "the", " ", "previous", 
      " ", "version", " ", "of", " ", "a", " ", "graphic", " ", "if", " ", 
      "the", " ", "graphic", " ", "is", " ", "replaced", " ", "by", " ", "a", 
      " ", "new", " ", "one", " ", "in", " ", 
      RowBox[{"output", "."}]}], "Text"]},
   {"Prolog", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "Prolog", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "which", " ", "gives", " ", "a", " ",
       "list", " ", "of", " ", "graphics", " ", "primitives", " ", "to", " ", 
      "be", " ", "rendered", " ", "before", " ", "the", " ", "main", " ", 
      "part", " ", "of", " ", "the", " ", "graphics", " ", "is", " ", 
      RowBox[{"rendered", ".", " "}]}], "Text"]},
   {"RotateLabel", "True", 
    StyleBox[
     RowBox[{
     "RotateLabel", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "and", " ", "related", " ", "functions", " ", "that", 
      " ", "specifies", " ", "whether", " ", "labels", " ", "on", " ", 
      "vertical", " ", "frame", " ", "axes", " ", "should", " ", "be", " ", 
      "rotated", " ", "to", " ", "be", " ", 
      RowBox[{"vertical", ".", " "}]}], "Text"]},
   {"TargetUnits", "Automatic", 
    StyleBox[
     RowBox[{
     "TargetUnits", " ", "is", " ", "an", " ", "option", " ", "used", " ", 
      "to", " ", "specify", " ", "the", " ", "desired", " ", "output", " ", 
      "units", " ", "for", " ", "visualization", " ", "functions", " ", 
      "operating", " ", "on", " ", "Quantity", " ", 
      RowBox[{"expressions", "."}]}], "Text"]},
   {"Ticks", "Automatic", 
    StyleBox[
     RowBox[{
     "Ticks", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "that", " ", "specifies", " ", 
      "tick", " ", "marks", " ", "for", " ", 
      RowBox[{"axes", ".", " "}]}], "Text"]},
   {"TicksStyle", 
    RowBox[{"{", "}"}], 
    StyleBox[
     RowBox[{
     "TicksStyle", " ", "is", " ", "an", " ", "option", " ", "for", " ", 
      "graphics", " ", "functions", " ", "which", " ", "specifies", " ", 
      "how", " ", "ticks", " ", "should", " ", "be", " ", 
      RowBox[{"rendered", "."}]}], "Text"]}
  },
  GridBoxAlignment->{"Columns" -> {{Left}}},
  GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{True}}},
  GridBoxItemSize->{"Columns" -> {Automatic, Automatic, {
       Scaled[0.5]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
    "RowsIndexed" -> {}}]], "Text",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{3.633702362521134*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Simple Example", "Subsubsection",
 CellChangeTimes->{{3.633702374574112*^9, 3.633702375301599*^9}, {
  3.6337027434519167`*^9, 3.633702743539098*^9}, {3.63370307060993*^9, 
  3.633703072769072*^9}}],

Cell["\<\
Put additive noise on two superimposed frequencies. The time domain runs from \
0 to 2.\
\>", "Text",
 CellChangeTimes->{{3.6337027494352694`*^9, 3.6337027900850887`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"RandomReal", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", ".1"}], ",", ".1"}], "}"}], "]"}], "+", 
      RowBox[{
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "t"}], "/", "0.5"}], "]"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Sin", "[", 
          RowBox[{"2", "\[Pi]", " ", "5", " ", "t"}], "]"}], "+", 
         RowBox[{"Cos", "[", 
          RowBox[{"2", "\[Pi]", " ", "8", " ", "t"}], "]"}]}], ")"}]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "2", ",", "0.01"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.633702378191393*^9, 3.633702522374682*^9}, {
  3.633702730859771*^9, 3.633702741225629*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Range", "[", 
       RowBox[{"0", ",", "2", ",", "0.01"}], "]"}], ",", "data"}], "}"}], 
    "\[Transpose]"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<Time Domain\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.633702429995017*^9, 3.6337024645568857`*^9}, {
  3.63370291004195*^9, 3.6337029396741734`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
    AbsoluteThickness[1.6], LineBox[CompressedData["
1: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
     "]]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotLabel->FormBox["\"Time Domain\"", TraditionalForm],
  PlotRange->{{0, 2.}, {-1.1298189078509535`, 1.281892247987521}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.633702433168386*^9, 3.633702523675387*^9}, 
   3.6337026586803293`*^9, {3.6337029146233673`*^9, 3.6337029400361023`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FourierListPlot", "[", 
  RowBox[{"data", ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"Abs", ",", "Im", ",", "Re"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Abs", ",", "Im", ",", "Re"}], "}"}]}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<Fourier Domain\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.63370252960894*^9, 3.633702530873796*^9}, {
  3.633702660705574*^9, 3.6337027190220833`*^9}, {3.6337029437590103`*^9, 
  3.633702950504669*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, {
      Hue[0.67, 0.6, 0.6], 
      Directive[
       PointSize[0.011111111111111112`], 
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[1.6]], 
      LineBox[CompressedData["
1:eJw1kwtQVGUUxy+4ICkFCRUJISsQy2t5y/LcP7vAotKY4IDFiKMNE9TIhhgD
ErBFOESDGCAMA0KsiFIBBiKSqEsg7YqBICJvFiEmIYuX8lLKhnN35s7Ob37n
3HPOd8/HPSoNidJkGCbq5fP/P/ur/rXFYLj/nnCD1EKHYI3C2qVO4llh29xM
9W1BF/GyMCVrbSYqq5uYgbtX+pJd4QNiDua+O9OPhl5iHciahz5bXukn1sWr
LVLDBbchYn2Iy9o1V6cmiLfhIz0cKV76h9gQ50/oqg4cXyF+E73ZiwG/n5gm
NoKlmUNR1Nog8XZM1u5t6Ktm65lgtEBf1arFelO0ctot9zycJDbDyMd3Szft
XSXm4t8fioan52eJd2JqeFFZ1vaI2Bxfffow7g6HfZ8FXpgGczMa+ogtcSty
5+RWJXs+78LZLifapog9Tysk5lcEqt9TEfMwLu5/xH9NSWyNCf/YwsJnt4lt
kLg+nXku9AqxLRw1K5s4Jqy3Q43E5kvj3c3E9pB2BkeGLzUQ89FhUNXYMqQg
dkCCi6Pk5vo1YkfU74ket369fINljhgM+63GtZyNd4JFUmvIFT69X+aEk9+4
vcVNvEzeGdbLoZV6GRfIO0M4JjdwSr5B3gUfFhgla5/6hbwLDvFe+WK2l+3P
FVU6InTuayTviqPWdhVzx9h53cBxz7Ha/qyNvBsMNGa7JLFs/V2wHU2yrOR9
T34XDs/3ny8qqyHvjvoLM4P6qXnk3bE574hl9DGKZwQICU/7RC2rIy/A5yUe
ovbGXPIeQEqsKj7jJ/IeuKee+GtFXUXeE+vd62/z46kfmSeK+6Tvq2yoX8YL
9k5LehFrNI/MC7yW5j55NlvfG9ocudoqpIK8NyrH4KUy+pG8D2J6rnfnalE9
mQ+eM+lP7J6eJu8LzSfmSh+bn8n74m5M2Ah/ju1PiFtxf3S3D9eSF6IrQuGZ
xVA883K8k+Z8/mOKB/BG7+q5JcerFA/EDhTWj1QWbLACSN9hVrfDh/aF8YOk
JMU44x3aR/jhQLQglZvL7oMfEu7r6K7o0DwKPxzM1IepcxPli+D955pJQRed
H0Qw7DxtyOuppHwRPjg1v2kysoXyRYi7eLxUQ5+dTwxp0sDAqKyM8sUYkekU
jH7Lfk8xBrmJ7cU3iRVibK6J2NqjRfMw/mh236JsGKLvAX8Yb/FbdvWk/Zf5
I6JmceLpvJzy/dE0kP94eqqe8gOgPT639mDiEuUHIKa3b7wunO0/AJ1Nz+Mv
L7D9B6C4wL7dx5bd30Dsczqksb+DzgOBmN1/1ljewe5zIPKv3gh1ST1L+YFI
epGTmMyjeowEB1PGpsO+vkj5ElgouePXBOw+SMDNXMie3kb3TyHBrK7izrAv
ez+CUF9ulzbTTPMhCILDeZ6Cv+l+yoJQOu8YcP0MO38QmqPS7idconrMbqhK
9Kqkq3Lhf6cY5Cg=
       "]], 
      Hue[0.9060679774997897, 0.6, 0.6], 
      Directive[
       PointSize[0.011111111111111112`], 
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[1.6]], 
      LineBox[CompressedData["
1:eJxtlHlM03cYh6uwURUYTmaQcSuH3IIc5eqH0hZQ5gKbsiELCFblEpF7Ya5D
uR0bxUGAcZUxRHEgIPfRiYzOEUABOdwMgxjCpZOAQBrHtvDy35o0zZPn93nf
93v0pxsU6SPYyWAwBP9+//v9/88UWzB+veOm2rXuLf6Lzfcst3BIUSNeZ7to
SodZSXXEDEScT+jvGhATy8OkRnvDckcLMRN+zIU6K8t09hYrIlaxZ1Apr4y8
ClYOxIZL/6wn/y7esSpj72COEatCXTUs7m3zDeL90Gs6VfsDa5RYDXpFV8x/
O99E9dQhjtprOLA+TKyB/bzAS4tdE8Ra8Fb6JdZodZpYB+u54WHG/j3Euri8
kz/5fH6J6uvBa8HFQuPiNPFBPJRz3pBfmyA+BBWROF1w7wmxPppNWO13PB4R
G2DTSFG7MWGA2BAjs09Dbnj+SmyEwbldGxF7pMSH8ZnM0ef4H73Exnjjovmt
stP2/phgyfviiFb2fWJTMJwtVgd1O4jNMJ3KYsvNNRKb44BZNKdtdyexBdKX
l3wlyy3ElvjwKacmLTd1i4WWULhdeuvUvu3nj2AlRJ47MdtO/ggKhYIXF6Lr
yFvBJmTVNuOb1K39E1rBf/C7QXVGG3lr+Mc/ae3taqa8NVYyc6ekAXfJHwVz
RnZWw6yJ/FF4rPqWN4dvz2+Dqc7axbS5HvI2UDjUVHE6p4q8LcKjtDPkqwTk
bbH4cqgvnVFM3g5+K8dq9I2yyNvB0F/rY+X6bW+PmaHI5OTHVE9oj9husV98
TA55Ft538jLpWCwlz8Kw6FLrajKPvAPsNX3XBgLvkHfA1S7fx63GD8g7gsna
LQpdoPUIHTGQPD48kVJA980JDcMjSec2i8g74YTEdNxTVE15ZwT01bTJTLfn
d0ZWobujFvMryrsgT+UF83sj2k+hCypPyiZF1/Ioz4ZUY14plJ9Bno3MPbpp
as+LKA+oGufv/flWfjchdnY2Zgun79HzwGhLuexGavIWS4CXwn2SqNNhVN8V
dufe4oWMSrYYrpATOou/Di6nvCsSuBnqWcW0vxJX2P4+vym9QveBwcHMUnyL
TpmI+nPwwZlPfMZ18inPgf7YippMh+63hINXGWPaiXLVNL8bTKY+yjkYR+cD
N7zyaj9p6VlI99ENqoXPltOFdD4SN7xRDNAXhW6fLxcxfZ9fP8YvoDwXbv2x
474nuqk/F4kR0dnhOvS+knDxd++zwGwO1WfwYJBbP1gdVEXz89DoqrHr9Vom
5XkYWkwanj6bS/150H790+phhZuU5yOR23vcIKKB8nzcv12w/iAkmPJ8hFuH
Wdd8cYbyfAgviEvipJWUd0dF7+j8rKcBze+OHxvec/v0Ib2/he4ofnTXslaO
+kncUXI5RsvIvpLW74HSmnz5YHNaHzyQ2t8y6fxlBfX3QFRXSX9nCv2/JR7w
HteJVJMFUX9PGBgPtSunRrH/Ad5e2RY=
       "]], 
      Hue[0.1421359549995791, 0.6, 0.6], 
      Directive[
       PointSize[0.011111111111111112`], 
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[1.6]], 
      LineBox[CompressedData["
1:eJw9k3lQ1GUYx1dAJO6AQZFDF7lF5Ibl2i/nLmEJRBiXIIRg/yRl3BQ4GoII
yCEjAiGHyCUsikYI7AoyXGYmxiEBTUUGLFITsMqA1eyz7cxvdj7zfT/P87y/
9/0xoz8JjJViMBix/z7//Ut+rQ8E6jOT37PFNM+WP7JeZvrnd8Sr7OUD8dkP
HR8Ti9gNjsY7eIpPiBlYHT/RdDTxGbEM9F17E/qfPCWWQzgru1l+Y5JYETu6
t5xuM58Tq6JRzah4Z/8vxGo4KvtSw+IHIbEGBjS4/Vpxj4g1kW/axZZyedEn
5j3IcL7QuvjRNPFejGRpgL89RqyDUmU5p3TOLWI98EZyD7X5S+bfj9b0guQE
i9fETDQoTHkI5+aI9VHSo7LiF3Gf+ABUlc4a5QnKiQ2gHOq6PbsaTfUN0V8j
o7ans53YCN8u5AeZeV6h9cYIV2/jJKZnUG6C31m1/CiZJMpNsenQc4x5o5By
M/hg2a5m/TrlBxG7ePdNHvMO5eZISZjJH8vNJj4Es/5RNyxK5rOAQIuvsLaf
R/lhNJ+sCJRLSSa2RMXCOYtg7WoxZ1qCKe3b5mLUTr4VDHKaBl3PF1BuhYjk
91xGhPGUW2N3v/L91IE6yq2h+vper8loM9W3gfa4VdJgTYN4faYNdGLnHcpO
N5Fvi5oJjbCUvgrKbWFbrpk35x9Ovh2G1tudvrSi9Zl2sGddXi9auEG5PYQv
lqd090rmt8emfEDK3yJJfQfomekPhYouUu6ATvXWC8d188h3hDDxqcxEQAvV
d4TfXzGJB99KI5+F4qyfd03/Pz8LVWtxsx/PN1LuhLjjdRuZVZWUO8HuQahK
5Bsu1XdG2hXR18KJFOrvjE3V1FllzVLyXSAsvBUo+FziuyB01dDCTHiZcldI
mRcMr2jcpNwVkRvdxltTOZS7oSg+OfXaywiq7wbfUfdVvcgG6s8GcyUk+qFT
G/lsvLq6O1xPmpgB5DjPRkor0f4AvJJ9nJQad4nWA/x5Juun5hIx8wHjrry5
cGPJfXRHWJL+HwlfdJHvjoAPakUB2VfJd8f7aVV+QYHl4nn47ig/NXNuybqG
fA+c6cgKsjWm+wYPLI3sNMhpqSXfA/E8+bc7Yu5Qfw8EOxTsilA6Rb4n5k3K
Py3dDhHXhydiNKeFz47xyPfEjImlRS2T9sf3xPi+bJHKWi75XtDSGbr+3J++
T3hBLzNqY0yX9pfpBe250R7uQjHN74WvfNPSeoc7yPeGNC/MK1+BzgveMGl+
J0P13XryvWFno1lRNiyg/t7o6/zG/nQd5QwfDAjOxBiIJPv3Aa+70fwkv5p8
H5Ryz168eYLuC98HOQZLlaxfS+h8OThcthh65Jzk/DhoKHzk4SIr2T8Hg5Uf
7pMzvEc+B1sz7m5Fl+rJ5yL4/CZn7Lci8rkY+FHQolh/m3wutk2UQubb6X3w
uQi8xoyarKZ+DF/YfnY3YWOqpu8f2+bbDA==
       "]]}, {}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, AxesOrigin -> {0, 0}, 
     PlotRange -> {{0, 50.}, {-0.757325291118194, 1.643313999468311}}, 
     DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {}, PlotLabel -> 
     FormBox["\"Fourier Domain\"", TraditionalForm], 
     PlotRange -> {{0, 50.}, {-0.757325291118194, 1.643313999468311}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"Abs", "Im", "Re"}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.2], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011111111111111112`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011111111111111112`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011111111111111112`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}]}], 
         "]"}]& ), Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.633702676348791*^9, 3.6337027194859447`*^9}, 
   3.6337029509598494`*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Multiple Datasets", "Subsubsection",
 CellChangeTimes->{{3.6337028024669247`*^9, 3.633702804963088*^9}, {
  3.633703062082767*^9, 3.633703065553608*^9}}],

Cell["Multiple data sets can be entered at the same time.", "Text",
 CellChangeTimes->{{3.633702869592433*^9, 3.63370287862669*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"data1", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"RandomReal", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", ".1"}], ",", ".1"}], "}"}], "]"}], "+", 
      RowBox[{
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "t"}], "/", "0.5"}], "]"}], 
       RowBox[{"(", 
        RowBox[{"Cos", "[", 
         RowBox[{"2", "\[Pi]", " ", "10", " ", "t"}], "]"}], ")"}]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "2", ",", "0.01"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data2", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"RandomReal", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", ".1"}], ",", ".1"}], "}"}], "]"}], "+", 
      RowBox[{
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "t"}], "/", "0.5"}], "]"}], 
       RowBox[{"(", 
        RowBox[{"Cos", "[", 
         RowBox[{"2", "\[Pi]", " ", "20", " ", "t"}], "]"}], ")"}]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "2", ",", "0.01"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.6337028122978783`*^9, 3.633702832868841*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FourierListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"data1", ",", "data2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "2"}], "}"}], ",", "Abs", ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Data 1\>\"", ",", " ", "\"\<Data 2\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.633702841391361*^9, 3.6337028585242157`*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, {
      Hue[0.67, 0.6, 0.6], 
      Directive[
       PointSize[0.01388888888888889], 
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[1.6]], 
      LineBox[CompressedData["
1:eJw1lAlMVFcUhgdr1EbLXnAB2hFQ2coyOMAww/zAMIAwaMVaJQgRAUUIloJS
UNtXhbRiEUVkEYdVYIooS4ERBDusNp0KkaoDVDtFrIY2LIFSQSVd4nkveXn5
8t//3XPPOfdwo47sjFnG4XBi/nv//7JPubLygrVutvgN/Sbuz6jnuId9Tzwj
Hm6rDFdqKokXxPEesqxU9Q1iDiqae7WGijbi5aiY7Dxp0naTeBWM2oK2F7Q2
Eq9BchTHffwndj993OwykXecY4gNEXnx3vGEuAZiYwguLYob5CpiE9gv5RaX
CVuI1+LWhLzh0+Ru4vWIeXlx+/6aO8RmGPjw0bW6oR+ILSA/MBAlUt4jfh9J
v6bxR94eIOZCLLHk2WtHiDfim+uCr3KOaIkt4aszuLhn9g9iK9y92lD6KvY1
sTUSxcvqGyxmiDfh0Wj9aKPtOPFmnH3nsy3dMg3xFvDlaZ34go3HBsY57WV3
+x4Q22Iu9R9D7qya2A7vxXZVP2ti47WH7pR5cb9RD7EDFkOCuxuK2Hx8ANtX
E9Kd95uIHZEu05pH17L/c0JgvXCfUWDvG2ac0KpMGuAeY/PvjA5ReufPY3Wk
O8N2Q7Y29nwr6S54vc07vieij3QXJC+8q3clnq0XDz47fi/T5dJ6hofUSPWK
YNfvSHeF5txkkV1yF+muUIxd1Q2KZOu7FYKMaaPwNupHZitCv43Y5WaZRzof
jk/yp8oGKV6GjzvWBjYtJ9h+dINdr0TTGtpMuhtELSXlNlWdpLujoCROphyp
It0dxbqmVqbCctI9kJXpEWTsxZ7fA+ZmDodlRrSeI4D76bDho+V0HkaA0eGH
KxPfOkO6J3purcvuiqZ6MJ7QOdFzMI5RkC5E+VLIsulVV0gXQj29TRp2O590
EYa0hSHaB2z+RNB2DfKkh5Wke2G3fsDfvLTrpHuhOX713KZCNn9ibNzzeJfu
vmrSxZhLM5iOPthOOlDofiDppYz6B0DKaW3sQhF7HsAoJDGBf5LqowI2S0Ir
xzPZ++yNBP0Nz58XEMMbRxVczRNuLfm9oceUHB8VFJHfG0+nHCPscy+T3wfz
eYdO9c1TfuGDEbM/fynae438PuBlWuWqz2eR3wfyqQyJbzC7vy8aDX9Mq8ij
88IXTZ8ncQzOFpPfFy5T69dNOteQ3xczM/qrx5QUH0eC6tvdO44V0DyDBDbd
4wFVX1O8jASjZ5hDCi7NP5UE81UXvHZ7svfDDzWN4XGfeFwivx+elXbJ9i5Q
fzF+cNVZo6evoXhVftgvfFE8NcneRykC8y1ygkH1gxT8qqXLAysoXkYKJ2lg
3fLpDvJLUTipks1OsPv74+NmR3/+2nry+0O08ktTexHVl/FHiMLN4aEHzWOV
P8JOod21g53nAWhJCU6JnaR+QwDm/ormJr0oJX8AhJ5Pk+WPqd9VAVgaTK/t
L2XjD8RH6mm9+0M3xP8CpJnW7g==
       "]], 
      Hue[0.9060679774997897, 0.6, 0.6], 
      Directive[
       PointSize[0.01388888888888889], 
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[1.6]], 
      LineBox[CompressedData["
1:eJw1lAtQlFUUxzcHcUOcZcjIRB4iAgkiz5XF1f2zL3ZNi3cpEvGKtyRkCkms
IckAKbOZyszO6hISgiIgL8l2VhIcJ3yLji6shIINFRkvQV2tpnO/mW+++c3v
nu+ee++5Z3liTkTKPA6Hk/Lv+9+XPbrE2EHZZIfofxoSeRYV1Ou2nCB+InIp
KZEaRy8Qz4quOvdZ77VinoOL1buzBYuaiS0QZpbqqq3ZeC5ujHFLr5e1Elvj
/FvpfWanM8Q2GFCrK6d2aIltca/Ydrghso54MTSV6OG1tBHbYe7Wu0E3LU4T
L0Hik92GSpsW4qWwzi49sm0TG78M98ad1M1fNhE7wvJujbkg6iKxMzKnZz8L
1huIlyPP2TdRO9hI7IJLsVef5d1i/1+BpDhZq2yE5e+K7jRJZt+zs8QrIfTZ
rsl470diNxhNZZmpMZ3E7hgV6u5XuLH5PTBZ6nu0XMLGv4Poay2vnfi1m3gV
Ss39dmHhbD5PdPDGeXWuLB8vPPnENqW6nO3vamSFio9tsThF7I33nwoqulp7
iddg1eX4o+0554h9EC0veCTKofWqfBBZt2c4PZHl54vMEmHnpPsv5H0hNR4d
7zJdJu8Hvv3BOVPTdfJ+cEqIPVubdJu8PxYt2Pix2spE3h+vYnMcYq79Tj4A
YnfuTo30OfkANIQdemEX/Tf5QPQGcpMi4h6SD8TEyxGTMXeAPB+PH3ZM/9V2
izwfY57BfG7XFfJrsW/a7bmk+xL5tZDvWLd+QtFDPggzUzvPnSqi9aiCwP1U
VxcRz+pBgBGPD4/rH5wnL8C+Bgcvx10sPhgz3Eg3e8cu8sEYK+btsUpg57cO
h+cXKjMVP5Ffh4fK+mNe+ax+hTBXz2b1L2TxQkTwf/YcGmDntx7NeYOjmycP
kV+P8cF6P9edrF42IDdcUS01Eqs24MDpyKW4WUZehKg7iW9m8Wk9KhEqbseV
bT7UTh54pH66OLOS6glALs8nXfDqJI0HHuvnnhWsoP5gAJLeyG70cGD3KQQf
ODuNpuVQ/SMENza2uR7X/kDxIeCU5ClfHKH/GUIwf7/zV/Fmdr/EmDI1VvFn
1BQvRtiMbmUDn/ZHJcaBzz3mVhdSPzGI0ZMhetuYz+pdgiu7U2q0O4ooXoK7
Wq2TjT3LX4JA/6evL1TR/hok0LvfX9CZzs5XChVPMHV4Ht1PSCG3/ONVsVhH
8VJMWNYIA7fTfAYpTFX1vluFrP/JsK2wVjUdQP0KMlwo+JM/1En3SyXDb4NV
LsP9tD8GGfS2E8neu1i/kGPW/N0ary9ovZCjPSm7UKnSULwcAfnfbvVOoP5o
kGOz8uuml2dYfwtF1bJU6biG+gNCoSmPSiv9nvJVheLON73hkgeUryEUyRm5
+ft9WbwCQp4+meNE9QYFxqJjmpZ41lK8Aq0nUze1xh6keAVa9vbGzvTrKV6J
jX6FH+1y7Bb9A50F13w=
       "]]}, {}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, AxesOrigin -> {0, 0}, 
     PlotRange -> {{0, 50.}, {0, 1.7751423108950803`}}, DisplayFunction -> 
     Identity, AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {True, True}, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
     DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {}, 
     PlotRange -> {{0, 50.}, {0, 1.7751423108950803`}}, PlotRangeClipping -> 
     True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Data 1\"", "\"Data 2\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.25], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.25], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.25], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.25], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.01388888888888889`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.01388888888888889`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    RowBox[{
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "\[InvisibleSpace]"}], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}]}], 
         "]"}]& ), Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.633702859390937*^9, 3.6337028622828712`*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Spectrum PlotRange", "Subsubsection",
 CellChangeTimes->{{3.633702889618555*^9, 3.633702891592729*^9}, {
  3.633703080865218*^9, 3.633703084462962*^9}}],

Cell[TextData[{
 "We can use ",
 StyleBox["PlotRange", "Input"],
 " to zoom in on a portion of the spectrum."
}], "Text",
 CellChangeTimes->{{3.63370302884875*^9, 3.633703047369295*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"RandomReal", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", ".1"}], ",", ".1"}], "}"}], "]"}], "+", 
      RowBox[{
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "t"}], "/", "0.5"}], "]"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Sin", "[", 
          RowBox[{"2", "\[Pi]", " ", "5", " ", "t"}], "]"}], "+", 
         RowBox[{"Cos", "[", 
          RowBox[{"2", "\[Pi]", " ", "8", " ", "t"}], "]"}]}], ")"}]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "2", ",", "0.01"}], "}"}]}], "]"}]}], 
  ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FourierListPlot", "[", 
  RowBox[{"data", ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "2"}], "}"}], ",", "Abs", ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "10"}], "}"}], ",", "All"}], "}"}]}], ",", 
   RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.633702978332284*^9, 3.633703023587716*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.01388888888888889], 
    AbsoluteThickness[1.6], LineBox[CompressedData["
1:eJw1kwtQVGUUxy+4ICkFCRUJISsQy2t5y/LcP7vAotKY4IDFiKMNE9TIhhgD
ErBFOESDGCAMA0KsiFIBBiKSqEsg7YqBICJvFiEmIYuX8lLKhnN35s7Ob37n
3HPOd8/HPSoNidJkGCbq5fP/P/ur/rXFYLj/nnCD1EKHYI3C2qVO4llh29xM
9W1BF/GyMCVrbSYqq5uYgbtX+pJd4QNiDua+O9OPhl5iHciahz5bXukn1sWr
LVLDBbchYn2Iy9o1V6cmiLfhIz0cKV76h9gQ50/oqg4cXyF+E73ZiwG/n5gm
NoKlmUNR1Nog8XZM1u5t6Ktm65lgtEBf1arFelO0ctot9zycJDbDyMd3Szft
XSXm4t8fioan52eJd2JqeFFZ1vaI2Bxfffow7g6HfZ8FXpgGczMa+ogtcSty
5+RWJXs+78LZLifapog9Tysk5lcEqt9TEfMwLu5/xH9NSWyNCf/YwsJnt4lt
kLg+nXku9AqxLRw1K5s4Jqy3Q43E5kvj3c3E9pB2BkeGLzUQ89FhUNXYMqQg
dkCCi6Pk5vo1YkfU74ket369fINljhgM+63GtZyNd4JFUmvIFT69X+aEk9+4
vcVNvEzeGdbLoZV6GRfIO0M4JjdwSr5B3gUfFhgla5/6hbwLDvFe+WK2l+3P
FVU6InTuayTviqPWdhVzx9h53cBxz7Ha/qyNvBsMNGa7JLFs/V2wHU2yrOR9
T34XDs/3ny8qqyHvjvoLM4P6qXnk3bE574hl9DGKZwQICU/7RC2rIy/A5yUe
ovbGXPIeQEqsKj7jJ/IeuKee+GtFXUXeE+vd62/z46kfmSeK+6Tvq2yoX8YL
9k5LehFrNI/MC7yW5j55NlvfG9ocudoqpIK8NyrH4KUy+pG8D2J6rnfnalE9
mQ+eM+lP7J6eJu8LzSfmSh+bn8n74m5M2Ah/ju1PiFtxf3S3D9eSF6IrQuGZ
xVA883K8k+Z8/mOKB/BG7+q5JcerFA/EDhTWj1QWbLACSN9hVrfDh/aF8YOk
JMU44x3aR/jhQLQglZvL7oMfEu7r6K7o0DwKPxzM1IepcxPli+D955pJQRed
H0Qw7DxtyOuppHwRPjg1v2kysoXyRYi7eLxUQ5+dTwxp0sDAqKyM8sUYkekU
jH7Lfk8xBrmJ7cU3iRVibK6J2NqjRfMw/mh236JsGKLvAX8Yb/FbdvWk/Zf5
I6JmceLpvJzy/dE0kP94eqqe8gOgPT639mDiEuUHIKa3b7wunO0/AJ1Nz+Mv
L7D9B6C4wL7dx5bd30Dsczqksb+DzgOBmN1/1ljewe5zIPKv3gh1ST1L+YFI
epGTmMyjeowEB1PGpsO+vkj5ElgouePXBOw+SMDNXMie3kb3TyHBrK7izrAv
ez+CUF9ulzbTTPMhCILDeZ6Cv+l+yoJQOu8YcP0MO38QmqPS7idconrMbqhK
9Kqkq3Lhf6cY5Cg=
     "]]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{2.04, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{2, 10}, {0, 1.643313999468311}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.633702984783779*^9, 3.633703023844262*^9}}]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440, 880},
WindowMargins->{{-10, Automatic}, {Automatic, -10}},
FrontEndVersion->"10.0 for Linux x86 (64-bit) (June 27, 2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "BlochPlotColors::usage"->{
  Cell[106947, 2734, 433, 11, 31, "Text",
   CellTags->"BlochPlotColors::usage"]},
 "BlochPlotEndPoints::usage"->{
  Cell[107383, 2747, 381, 9, 31, "Text",
   CellTags->"BlochPlotEndPoints::usage"]},
 "BlochPlotJoined::usage"->{
  Cell[107767, 2758, 616, 21, 51, "Text",
   CellTags->"BlochPlotJoined::usage"]},
 "BlochPlotLabels::usage"->{
  Cell[108386, 2781, 364, 10, 31, "Text",
 "ComplexMatrixPlot::usage"->{
  Cell[3465, 102, 794, 19, 52, "Text",
   CellTags->"ComplexMatrixPlot::usage"]},
 "BlockForm::usage"->{
  Cell[73873, 1733, 1392, 51, 53, "Text",
   CellTags->"BlockForm::usage"]},
 "MatrixListForm::usage"->{
  Cell[81075, 1942, 631, 21, 32, "Text",
   CellTags->"MatrixListForm::usage"]},
 "HintonPlot::usage"->{
  Cell[83629, 2020, 727, 18, 52, "Text",
   CellTags->"HintonPlot::usage"]},
 "ComplexHintonPlot::usage"->{
  Cell[87699, 2125, 724, 21, 32, "Text",
   CellTags->"ComplexHintonPlot::usage"]},
 "BlochPlot::usage"->{
  Cell[93720, 2323, 11215, 347, 414, "Text",
   CellTags->"BlochPlot::usage"]},
 "BlochPlotColors::usage"->{
  Cell[105061, 2677, 433, 11, 32, "Text",
   CellTags->"BlochPlotColors::usage"]},
 "BlochPlotEndPoints::usage"->{
  Cell[105497, 2690, 381, 9, 32, "Text",
   CellTags->"BlochPlotEndPoints::usage"]},
 "BlochPlotJoined::usage"->{
  Cell[105881, 2701, 616, 21, 53, "Text",
   CellTags->"BlochPlotJoined::usage"]},
 "BlochPlotLabels::usage"->{
  Cell[106500, 2724, 364, 10, 32, "Text",
   CellTags->"BlochPlotLabels::usage"]},
 "BlochPlot::usage"->{
  Cell[95606, 2380, 11215, 347, 403, "Text",
   CellTags->"BlochPlot::usage"]},
 "BlochPlot2D::usage"->{
  Cell[972708, 18883, 342, 10, 31, "Text",
   CellTags->"BlochPlot2D::usage"]},
 "BlockForm::usage"->{
  Cell[73824, 1732, 1392, 51, 51, "Text",
   CellTags->"BlockForm::usage"]},
 "ChannelHintonPlot::usage"->{
  Cell[89585, 2182, 724, 21, 31, "Text",
   CellTags->"ChannelHintonPlot::usage"]},
 "ComplexMatrixPlot::usage"->{
  Cell[3416, 101, 794, 19, 50, "Text",
   CellTags->"ComplexMatrixPlot::usage"]},
 "EigensystemForm::usage"->{
  Cell[1078810, 21585, 430, 13, 31, "Text",
   CellTags->"EigensystemForm::usage"]},
 "FourierListPlot::usage"->{
  Cell[1083452, 21732, 1117, 31, 71, "Text",
   CellTags->"FourierListPlot::usage"]},
 "Gap::usage"->{
  Cell[84435, 2044, 372, 10, 31, "Text",
   CellTags->"Gap::usage"]},
 "HintonPlot::usage"->{
  Cell[83580, 2019, 727, 18, 50, "Text",
   CellTags->"HintonPlot::usage"]},
 "ListBlochPlot2D::usage"->{
  Cell[977353, 19015, 408, 9, 31, "Text",
   CellTags->"ListBlochPlot2D::usage"]},
 "MatrixListForm::usage"->{
  Cell[81026, 1941, 631, 21, 31, "Text",
   CellTags->"MatrixListForm::usage"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"BlochPlotColors::usage", 1156460, 23355},
 {"BlochPlotEndPoints::usage", 1156575, 23358},
 {"BlochPlotJoined::usage", 1156689, 23361},
 {"BlochPlotLabels::usage", 1156801, 23364},
 {"BlochPlot::usage", 1156907, 23367},
 {"BlochPlot2D::usage", 1157012, 23370},
 {"BlockForm::usage", 1157115, 23373},
 {"ChannelHintonPlot::usage", 1157223, 23376},
 {"ComplexMatrixPlot::usage", 1157338, 23379},
 {"EigensystemForm::usage", 1157449, 23382},
 {"FourierListPlot::usage", 1157563, 23385},
 {"Gap::usage", 1157666, 23388},
 {"HintonPlot::usage", 1157760, 23391},
 {"ListBlochPlot2D::usage", 1157866, 23394},
 {"MatrixListForm::usage", 1157977, 23397}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 211, 3, 66, "Chapter"],
Cell[CellGroupData[{
Cell[816, 29, 240, 3, 44, "Subsection"],
Cell[1059, 34, 194, 3, 32, "Input"],
Cell[1256, 39, 182, 4, 31, "Text"],
Cell[1441, 45, 527, 9, 99, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2005, 59, 101, 1, 44, "Subsection"],
Cell[2109, 62, 531, 12, 39, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[2677, 79, 159, 2, 51, "Section"],
Cell[2839, 83, 166, 3, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3042, 91, 240, 3, 65, "Section"],
Cell[CellGroupData[{
Cell[3307, 98, 155, 2, 45, "Subsection"],
Cell[3465, 102, 794, 19, 52, "Text",
 CellTags->"ComplexMatrixPlot::usage"],
Cell[CellGroupData[{
Cell[4284, 125, 98, 1, 35, "Subsubsection"],
Cell[4385, 128, 260, 7, 31, "Text"],
Cell[4648, 137, 30860, 675, 2613, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[35545, 817, 151, 2, 29, "Subsubsection"],
Cell[35699, 821, 158, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[35882, 828, 322, 10, 32, "Input"],
Cell[36207, 840, 21240, 501, 296, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[57496, 1347, 102, 1, 29, "Subsubsection"],
Cell[57601, 1350, 166, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[57792, 1357, 809, 25, 32, "Input"],
Cell[58604, 1384, 15057, 338, 297, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[73722, 1729, 148, 2, 44, "Subsection"],
Cell[73873, 1733, 1392, 51, 53, "Text",
 CellTags->"BlockForm::usage"],
Cell[CellGroupData[{
Cell[75290, 1788, 100, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[75415, 1793, 308, 9, 32, "Input"],
Cell[75726, 1804, 2398, 55, 116, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78161, 1864, 343, 10, 32, "Input"],
Cell[78507, 1876, 2400, 56, 116, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[80968, 1939, 104, 1, 44, "Subsection"],
Cell[81075, 1942, 631, 21, 32, "Text",
 CellTags->"MatrixListForm::usage"],
Cell[CellGroupData[{
Cell[81731, 1967, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[81854, 1972, 285, 8, 31, "Input"],
Cell[82142, 1982, 1272, 27, 72, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[83475, 2016, 151, 2, 44, "Subsection"],
Cell[83629, 2020, 727, 18, 52, "Text",
 CellTags->"HintonPlot::usage"],
Cell[CellGroupData[{
Cell[84332, 2041, 100, 1, 34, "Subsubsection"],
Cell[84435, 2044, 372, 10, 31, "Text",
 CellTags->"Gap::usage"],
Cell[84810, 2056, 1420, 38, 80, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[86267, 2099, 98, 1, 34, "Subsubsection"],
Cell[CellGroupData[{
Cell[86390, 2104, 426, 11, 31, "Input"],
Cell[86819, 2117, 2493, 53, 374, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[89373, 2177, 209, 3, 43, "Subsection"],
Cell[89585, 2182, 724, 21, 31, "Text",
 CellTags->"ChannelHintonPlot::usage"],
Cell[CellGroupData[{
Cell[90334, 2207, 98, 1, 34, "Subsubsection"],
Cell[CellGroupData[{
Cell[90457, 2212, 955, 24, 31, "Input"],
Cell[91415, 2238, 3895, 126, 369, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[93497, 2315, 98, 1, 65, "Section"],
Cell[CellGroupData[{
Cell[93620, 2320, 97, 1, 44, "Subsection"],
Cell[93720, 2323, 11215, 347, 414, "Text",
 CellTags->"BlochPlot::usage"],
Cell[CellGroupData[{
Cell[104960, 2674, 98, 1, 35, "Subsubsection"],
Cell[105061, 2677, 433, 11, 32, "Text",
 CellTags->"BlochPlotColors::usage"],
Cell[105497, 2690, 381, 9, 32, "Text",
 CellTags->"BlochPlotEndPoints::usage"],
Cell[105881, 2701, 616, 21, 53, "Text",
 CellTags->"BlochPlotJoined::usage"],
Cell[106500, 2724, 364, 10, 32, "Text",
 CellTags->"BlochPlotLabels::usage"],
Cell[106867, 2736, 37221, 832, 3813, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[144125, 3573, 102, 1, 29, "Subsubsection"],
Cell[144230, 3576, 247, 5, 31, "Text"],
Cell[CellGroupData[{
Cell[144502, 3585, 447, 11, 32, "Input"],
Cell[144952, 3598, 24349, 417, 375, "Output"]
}, Open  ]],
Cell[169316, 4018, 176, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[169517, 4026, 662, 20, 32, "Input"],
Cell[170182, 4048, 30355, 557, 377, "Output"]
}, Open  ]],
Cell[200552, 4608, 193, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[200770, 4616, 973, 29, 32, "Input"],
Cell[201746, 4647, 36997, 693, 377, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[238792, 5346, 102, 1, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[238919, 5351, 831, 19, 32, "Input"],
Cell[239753, 5372, 68583, 1303, 367, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[308385, 6681, 147, 2, 29, "Subsubsection"],
Cell[308535, 6685, 176, 2, 31, "Text"],
Cell[308714, 6689, 945, 27, 55, "Input"],
Cell[309662, 6718, 159, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[309846, 6725, 1082, 22, 121, "Input"],
Cell[310931, 6749, 182234, 3316, 367, "Output"]
}, Open  ]],
Cell[493180, 10068, 112, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[493317, 10073, 966, 24, 143, "Input"],
Cell[494286, 10099, 155276, 2987, 367, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[649611, 13092, 202, 3, 29, "Subsubsection"],
Cell[649816, 13097, 165, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[650006, 13104, 1333, 33, 121, "Input"],
Cell[651342, 13139, 134069, 2293, 217, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[785460, 15438, 300, 4, 29, "Subsubsection"],
Cell[785763, 15444, 285, 6, 32, "Text"],
Cell[CellGroupData[{
Cell[786073, 15454, 1867, 42, 209, "Input"],
Cell[787943, 15498, 182716, 3318, 367, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[975359, 18955, 105, 1, 44, "Subsection"],
Cell[975467, 18958, 408, 9, 32, "Text",
 CellTags->"ListBlochPlot2D::usage"],
Cell[CellGroupData[{
Cell[975900, 18971, 98, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[976023, 18976, 461, 14, 51, "Input"],
Cell[976487, 18992, 100134, 2520, 213, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1076694, 21520, 99, 1, 65, "Section"],
Cell[CellGroupData[{
Cell[1076818, 21525, 103, 1, 45, "Subsection"],
Cell[1076924, 21528, 430, 13, 32, "Text",
 CellTags->"EigensystemForm::usage"],
Cell[CellGroupData[{
Cell[1077379, 21545, 97, 1, 35, "Subsubsection"],
Cell[CellGroupData[{
Cell[1077501, 21550, 203, 5, 32, "Input"],
Cell[1077707, 21557, 3298, 98, 114, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1081078, 21663, 308, 4, 65, "Section"],
Cell[CellGroupData[{
Cell[1081411, 21671, 152, 2, 44, "Subsection"],
Cell[1081566, 21675, 1117, 31, 74, "Text",
 CellTags->"FourierListPlot::usage"],
Cell[CellGroupData[{
Cell[1082708, 21710, 100, 1, 35, "Subsubsection"],
Cell[1082811, 21713, 164, 5, 31, "Text"],
Cell[1082978, 21720, 24844, 547, 2297, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[1107859, 22272, 204, 3, 29, "Subsubsection"],
Cell[1108066, 22277, 181, 4, 31, "Text"],
Cell[1108250, 22283, 817, 24, 32, "Input"],
Cell[CellGroupData[{
Cell[1109092, 22311, 517, 13, 32, "Input"],
Cell[1109612, 22326, 4138, 78, 238, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1113787, 22409, 668, 16, 55, "Input"],
Cell[1114458, 22427, 19551, 392, 245, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1134058, 22825, 159, 2, 29, "Subsubsection"],
Cell[1134220, 22829, 132, 1, 31, "Text"],
Cell[1134355, 22832, 1243, 39, 55, "Input"],
Cell[CellGroupData[{
Cell[1135623, 22875, 510, 13, 32, "Input"],
Cell[1136136, 22890, 14182, 287, 242, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1150367, 23183, 158, 2, 29, "Subsubsection"],
Cell[1150528, 23187, 186, 5, 32, "Text"],
Cell[1150717, 23194, 702, 22, 32, "Input"],
Cell[CellGroupData[{
Cell[1151444, 23220, 426, 11, 32, "Input"],
Cell[1151873, 23233, 2330, 48, 233, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
